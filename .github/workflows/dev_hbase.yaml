---
name: Build HBase

env:
  PRODUCT_NAME: hbase

on:
  workflow_dispatch:
  schedule:
    - cron: '0 1 1/2 * *' # https://crontab.guru/#0_1_1/2_*_*
  push:
    branches:
      - main
    paths:
      # To check dependencies, run this ( you will need to consider transitive dependencies)
      # bake --product PRODUCT -d | grep -v 'docker buildx bake' | jq '.target | keys[]'
      - hbase/**
      - vector/**
      - hadoop/**
      - stackable-base/**
      - java-base/**
      - java-devel/**
      - .github/actions/**
      - .github/workflows/dev_hbase.yaml
  pull_request:
    paths:
        # To check dependencies, run this ( you will need to consider transitive dependencies)
        # bake --product PRODUCT -d | grep -v 'docker buildx bake' | jq '.target | keys[]'
        - hbase/**
        - vector/**
        - hadoop/**
        - stackable-base/**
        - java-base/**
        - java-devel/**
        - .github/actions/**
        - .github/workflows/dev_hbase.yaml
jobs:
  generate_matrix:
    name: Generate Version List
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      - id: shard
        uses: ./.github/actions/shard
        with:
          product: ${{ env.PRODUCT_NAME }}
    outputs:
      versions: ${{ steps.shard.outputs.versions }}

  select_image_orga:
    name: Select image organisation (prs -> sandbox, others -> stackable)
    runs-on: ubuntu-latest
    outputs:
      image_orga: ${{ steps.select_image_orga.outputs.image_orga }}
    steps:
      - id: select_image_orga
        env:
          TRIGGER: ${{ github.event_name }}
        run: |
          if [[ $TRIGGER == "pull_request" ]]; then
            echo "image_orga=sandbox" >> $GITHUB_OUTPUT
          else
            echo "image_orga=stackable" >> $GITHUB_OUTPUT
          fi

  build:
    name: Build/Publish ${{ matrix.versions }}-${{ matrix.runner.arch }} Image
    needs: [generate_matrix, select_image_orga]
    permissions:
      id-token: write
    runs-on: ${{ matrix.runner.name }}
    strategy:
      matrix:
        runner:
          - {name: "ubuntu-latest", arch: "amd64"}
          - {name: "ubicloud-standard-8-arm", arch: "arm64"}
        versions: ${{ fromJson(needs.generate_matrix.outputs.versions) }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      - name: Build Product Image
        id: build
        uses: ./.github/actions/build
        with:
          product-name: ${{ env.PRODUCT_NAME }}
          product-version: ${{ matrix.versions }}
          build-cache-nexus-password: ${{ secrets.BUILD_CACHE_NEXUS_PASSWORD }}
          image-orga: ${{ needs.select_image_orga.outputs.image_orga }}
      - name: Publish Product Image
        uses: ./.github/actions/publish-image
        with:
          product: ${{ env.PRODUCT_NAME }}
          image-name: ${{ steps.build.outputs.image-name }}
          image-version: ${{ steps.build.outputs.image-version }}
          nexus-password: ${{ secrets.NEXUS_PASSWORD }}
          harbor-secret: ${{ secrets.HARBOR_ROBOT_SDP_GITHUB_ACTION_BUILD_SECRET }}

  publish_manifests:
    name: Build/Publish ${{ matrix.versions }} Manifests
    needs: [generate_matrix, build]
    permissions:
      id-token: write
    runs-on: ubuntu-latest
    strategy:
      matrix:
        versions: ${{ fromJson(needs.generate_matrix.outputs.versions) }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      - name: Build Product Manifest List
        uses: ./.github/actions/publish-manifest
        with:
          product: ${{ env.PRODUCT_NAME }}
          image-version: ${{ matrix.versions }}-stackable0.0.0-dev
          nexus-password: ${{ secrets.NEXUS_PASSWORD }}
          harbor-secret: ${{ secrets.HARBOR_ROBOT_SDP_GITHUB_ACTION_BUILD_SECRET }}
