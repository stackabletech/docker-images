---
name: Publish release images
on:
  push:
    tags:
      # Tag names are used passed as 'image_version' to image_tools.bake and
      # are validated there.
      - '*'

jobs:
  build_and_push:
    name: Release product images for ${{ matrix.product }} ${{ matrix.runner }}
    permissions:
      id-token: write
    runs-on: ${{ matrix.runner }}
    strategy:
      # fail-fast: true
      # This setting can be changed to throttle the build load
      # max-parallel: 1
      # If we want more parallelism we can schedule a dedicated task for every tuple (product, product version)
      matrix:
        runner: ["ubuntu-latest", "ubicloud-standard-8-arm"]
        product:
          - airflow
          - druid
          - hadoop
          - hbase
          - hive
          - kafka
          - kafka-testing-tools
          - krb5
          - nifi
          - omid
          - opa
          - spark-k8s
          - superset
          - testing-tools
          - trino
          - trino-cli
          - tools
          - zookeeper
        shard_count:
          - 5
        shard_index: [0, 1, 2, 3, 4] # between 0 and shard-count-1
    env:
      GITHUB_REF_NAME: ${{ github.ref_name }}
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      - uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb # v3.3.0
      # As of 2024-04-08 this throws
      # Error: The version '3.x' with architecture 'arm64' was not found for Ubuntu 22.04.
      # This is because it currently only bundles arm64 packages for darwin.
      # So instead we install python via apt until this is resolved
      # - uses: actions/setup-python@0a5c61591373683505ea898e09a3ea4f39ef2b9c # tag=v5.0.0
      #   with:
      #     python-version: '3.x'
      - name: Setup python
        run: |
          sudo apt update
          sudo apt install --assume-yes python3
      - name: Set up Cosign
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 # v3.5.0
      - name: Set up syft
        uses: anchore/sbom-action/download-syft@e8d2a6937ecead383dfe75190d104edd1f9c5751 # v0.16.0
      - name: Install image-tools-stackabletech
        run: pip install image-tools-stackabletech==0.0.5
      - uses: docker/login-action@0d4c9c5ea7693da7b068278f7b52bda2a190a446 # v3.2.0
        with:
          registry: docker.stackable.tech
          username: github
          password: ${{ secrets.NEXUS_PASSWORD }}
      - name: Login to Stackable Harbor
        uses: docker/login-action@0d4c9c5ea7693da7b068278f7b52bda2a190a446 # v3.2.0
        with:
          registry: oci.stackable.tech
          username: robot$sdp+github-action-build
          password: ${{ secrets.HARBOR_ROBOT_SDP_GITHUB_ACTION_BUILD_SECRET }}
      - name: Publish release product images
        id: publish_images
        run: |
          # Bake images and load them to local docker repo for signing
          # TODO: buildx cannot --load and --push at the same time
          # Tagging images with the architecture they were build on
          ARCH_FOR_DOCKER="$(arch | sed -e 's#x86_64#amd64#' | sed -e 's#aarch64#arm64#')"
          bake --product "${{ matrix.product }}" \
          --image-version "${GITHUB_REF_NAME}-${ARCH_FOR_DOCKER}" \
          --architecture "linux/${ARCH_FOR_DOCKER}" \
          --organization stackable \
          --architecture linux/amd64 \
          --shard-count "${{matrix.shard_count}}" \
          --shard-index "${{matrix.shard_index}}" \
          --export-tags-file bake-target-tags

          # Push images to image repository
          if [ -f bake-target-tags ]; then
            echo "bake-target-tags: "$(< bake-target-tags)
            IMAGE_NAME=$(cat bake-target-tags | cut -d ":" -f 1)
            TAG_NAME=$(cat bake-target-tags | cut -d ":" -f 2)
            echo "image: $IMAGE_NAME"
            echo "tag: $TAG_NAME"
            # Store the output of `docker image push` into a variable, so we can parse it for the digest
            PUSH_OUTPUT=$(docker image push "$(< bake-target-tags)" 2>&1)
            echo "$PUSH_OUTPUT"
            # Obtain the digest of the pushed image from the output of `docker image push`, because signing by tag is deprecated and will be removed from cosign in the future
            DIGEST=$(echo "$PUSH_OUTPUT" | awk "/: digest: sha256:[a-f0-9]{64} size: [0-9]+$/ { print \$3 }")
            # Refer to image via its digest (docker.stackable.tech/stackable/airflow@sha256:0a1b2c...)
            # This generates a signature and publishes it to the registry, next to the image
            # Uses the keyless signing flow with Github Actions as identity provider
            cosign sign -y "$IMAGE_NAME@$DIGEST"

            # Generate SBOM for the image
            syft scan --output cyclonedx-json=sbom.json --select-catalogers "-cargo-auditable-binary-cataloger" --scope all-layers --source-name "${{ matrix.product }}" --source-version "$TAG_NAME" "$IMAGE_NAME@$DIGEST";
            # Determine the PURL for the image
            PURL="pkg:docker/stackable/${{ matrix.product }}@$DIGEST?repository_url=docker.stackable.tech";
            # Get metadata from the image
            IMAGE_METADATA_DESCRIPTION=$(docker inspect --format='{{.Config.Labels.description}}' "$IMAGE_NAME@$DIGEST");
            IMAGE_METADATA_NAME=$(docker inspect --format='{{.Config.Labels.name}}' "$IMAGE_NAME@$DIGEST");
            # Merge the SBOM with the metadata for the image
            jq -s '{"metadata":{"component":{"description":"'"$IMAGE_METADATA_NAME. $IMAGE_METADATA_DESCRIPTION"'","supplier":{"name":"Stackable GmbH","url":["https://stackable.tech/"]},"author":"Stackable GmbH","purl":"'"$PURL"'","publisher":"Stackable GmbH"}}} * .[0]' sbom.json > sbom.merged.json;
            # Attest the SBOM to the image
            cosign attest -y --predicate sbom.merged.json --type cyclonedx "$IMAGE_NAME@$DIGEST"

            # Push to oci.stackable.tech as well
            IMAGE_NAME=oci.stackable.tech/sdp/${{ matrix.product }}
            echo "image: $IMAGE_NAME"
            docker tag "$(< bake-target-tags)" "$IMAGE_NAME:$TAG_NAME"
            # Store the output of `docker image push` into a variable, so we can parse it for the digest
            PUSH_OUTPUT=$(docker image push "$IMAGE_NAME:$TAG_NAME" 2>&1)
            echo "$PUSH_OUTPUT"
            # Obtain the digest of the pushed image from the output of `docker image push`, because signing by tag is deprecated and will be removed from cosign in the future
            DIGEST=$(echo "$PUSH_OUTPUT" | awk "/: digest: sha256:[a-f0-9]{64} size: [0-9]+$/ { print \$3 }")
            # Refer to image via its digest (oci.stackable.tech/sdp/airflow@sha256:0a1b2c...)
            # This generates a signature and publishes it to the registry, next to the image
            # Uses the keyless signing flow with Github Actions as identity provider
            cosign sign -y "$IMAGE_NAME@$DIGEST"

            # Generate SBOM for the image
            syft scan --output cyclonedx-json=sbom.json --select-catalogers "-cargo-auditable-binary-cataloger" --scope all-layers --source-name "${{ matrix.product }}" --source-version "$TAG_NAME" "$IMAGE_NAME@$DIGEST";
            # Determine the PURL for the image
            PURL="pkg:docker/sdp/${{ matrix.product }}@$DIGEST?repository_url=oci.stackable.tech";
            # Get metadata from the image
            IMAGE_METADATA_DESCRIPTION=$(docker inspect --format='{{.Config.Labels.description}}' "$IMAGE_NAME@$DIGEST");
            IMAGE_METADATA_NAME=$(docker inspect --format='{{.Config.Labels.name}}' "$IMAGE_NAME@$DIGEST");
            # Merge the SBOM with the metadata for the image
            jq -s '{"metadata":{"component":{"description":"'"$IMAGE_METADATA_NAME. $IMAGE_METADATA_DESCRIPTION"'","supplier":{"name":"Stackable GmbH","url":["https://stackable.tech/"]},"author":"Stackable GmbH","purl":"'"$PURL"'","publisher":"Stackable GmbH"}}} * .[0]' sbom.json > sbom.merged.json;
            # Attest the SBOM to the image
            cosign attest -y --predicate sbom.merged.json --type cyclonedx "$IMAGE_NAME@$DIGEST"
          fi
  create_manifests:
    permissions:
      id-token: write
    runs-on: ubuntu-latest
    needs: ["build_and_push"]
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      - uses: docker/login-action@0d4c9c5ea7693da7b068278f7b52bda2a190a446 # v3.2.0
        with:
          registry: docker.stackable.tech
          username: github
          password: ${{ secrets.NEXUS_PASSWORD }}
      - name: Login to Stackable Harbor
        uses: docker/login-action@0d4c9c5ea7693da7b068278f7b52bda2a190a446 # v3.2.0
        with:
          registry: oci.stackable.tech
          username: robot$sdp+github-action-build
          password: ${{ secrets.HARBOR_ROBOT_SDP_GITHUB_ACTION_BUILD_SECRET }}
      - name: Set up Cosign
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 # v3.5.0
      - name: Build Manifest List
        shell: bash
        env:
          DOCKER_USER: github
          DOCKER_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
        run: |
          for product_and_version in $(python3 enumerate-product-versions.py); do
            PRODUCT="$(echo "$product_and_version" | cut -d '#' -f 1)"
            VERSION="$(echo "$product_and_version" | cut -d '#' -f 2)"

            echo "Generating manifest list for $PRODUCT in version $VERSION"

            MANIFEST_NAME="docker.stackable.tech/stackable/${PRODUCT}:${VERSION}-stackable${GITHUB_REF_NAME}"
            # Create and push to Stackable Nexus
            # `docker manifest push` directly returns the digest of the manifest list
            # As it is an experimental feature, this might change in the future
            # Further reading: https://docs.docker.com/reference/cli/docker/manifest/push/
            # --amend because the manifest list would be updated since we use the same tag
            docker manifest create "$MANIFEST_NAME" --amend "${MANIFEST_NAME}-amd64" --amend "${MANIFEST_NAME}-arm64"
            DIGEST=$(docker manifest push $MANIFEST_NAME)

            # Refer to image via its digest (oci.stackable.tech/sdp/airflow@sha256:0a1b2c...)
            # This generates a signature and publishes it to the registry, next to the image
            # Uses the keyless signing flow with Github Actions as identity provider
            cosign sign -y "$MANIFEST_NAME@$DIGEST"

            # Push to oci.stackable.tech as well
            MANIFEST_NAME="oci.stackable.tech/sdp/${PRODUCT}:${VERSION}-stackable${GITHUB_REF_NAME}"
            docker manifest create "$MANIFEST_NAME" --amend "${MANIFEST_NAME}-amd64" --amend "${MANIFEST_NAME}-arm64"
            DIGEST=$(docker manifest push $MANIFEST_NAME)
            cosign sign -y "$MANIFEST_NAME@$DIGEST"
          done
