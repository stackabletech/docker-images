name: Product images

on:
  push:
    tags:
      - '*'

jobs:
  reject_illegal_tags:
    name: Check if tag adheres to format 'productx.y.z-stackablea.b.c'
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.version_tag.outputs.tag_name }}
    steps:
      - name: Get version tag
        id: version_tag
        run: |
          [[ ! "$GITHUB_REF" =~ refs/tags ]] && exit 255
          TAG=${GITHUB_REF#refs/tags/}
          echo "Found tag: [$TAG]"
          echo "::set-output name=tag_name::$TAG"
      - name: Check if tag matches expected format
        env:
          TAGNAME: ${{ steps.version_tag.outputs.tag_name }}
        run: |
          echo "Checking $TAGNAME"
          [[ "$TAGNAME" =~ ^kafka|zookeeper|nifi|druid|opa|hive|hbase|hadoop|trino|airflow|superset|spark-k8s|pyspark-k8s|tools|.+-stackable\d+\.\d+\.\d+ ]] && echo "${TAGNAME}" valid || exit 255

  parse_tag:
    name: Extract product, version and imageversion from tag name
    runs-on: ubuntu-latest
    needs:
      - reject_illegal_tags
    env:
      TAGNAME: ${{ needs.reject_illegal_tags.outputs.tag_name }}
    outputs:
      product: ${{ steps.extractproduct.outputs.product }}
      version: ${{ steps.extractversion.outputs.version }}
      imageversion: ${{ steps.extractimageversion.outputs.imageversion }}
    steps:
      - id: debug
        run: echo "$TAGNAME"
      - id: extractproduct
        run: |
          PRODUCT=$(echo "$TAGNAME" | \
          sed -r "s/(kafka|zookeeper|nifi|druid|opa|hive|hbase|hadoop|trino|airflow|superset|spark-k8s|pyspark-k8s|tools).*/\1/" \
          )
          echo "Extracted [\"$PRODUCT\"] as product"
          echo "::set-output name=product::$PRODUCT"
      - id: extractversion
        run: |
          VERSION=$(echo "$TAGNAME" | \
          sed -r "s/(kafka|zookeeper|nifi|druid|opa|hive|hbase|hadoop|trino|airflow|superset|spark-k8s|pyspark-k8s|tools)//" | \
          sed -r "s/([^-]+)-.*/\1/" \
          )
          echo "Extracted [\"$VERSION\"] as version"
          echo "::set-output name=version::$VERSION"
      - id: extractimageversion
        run: |
          IMAGEVERSION=$(echo "$TAGNAME" | \
          sed -r "s/(kafka|zookeeper|nifi|druid|opa|hive|hbase|hadoop|trino|airflow|superset|spark-k8s|pyspark-k8s|tools)//" | \
          sed -r "s/^[^-]+-stackable(.*)/\1/" \
          )
          echo "Extracted [\"$IMAGEVERSION\"] as imageversion"
          echo "::set-output name=imageversion::$IMAGEVERSION"

  build:
    name: Build product images for ${{ needs.reject_illegal_tags.outputs.tag_name }}
    runs-on: ubuntu-latest
    needs:
      - parse_tag
      - reject_illegal_tags
    env:
      PRODUCT: ${{ needs.parse_tag.outputs.product }}
      PRODUCTVERSION: ${{ needs.parse_tag.outputs.version }}
      IMAGEVERSION: ${{ needs.parse_tag.outputs.imageversion }}
    steps:

      -
        name: Checkout
        uses: actions/checkout@v3

      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      -
        name: Install python 3
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      -
        name: Login to Stackable Nexus
        uses: docker/login-action@v2
        with:
          registry: docker.stackable.tech
          username: github
          password: ${{ secrets.NEXUS_PASSWORD }}

      -
        name: Build and push images
        shell: bash
        run: python build_product_images.py -u -p "$PRODUCT" -v "$PRODUCTVERSION" -i "$IMAGEVERSION"
