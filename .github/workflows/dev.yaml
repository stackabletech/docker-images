---
name: Publish 0.0.0-dev images
on:
  push:
    branches:
      - main
      - feat/push-images-to-harbor

jobs:
  development:
    name: ${{ matrix.product }} 0.0.0-dev
    permissions:
      id-token: write
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      # This setting can be changed to throttle the build load
      # max-parallel: 1
      matrix:
        product:
          - airflow
    steps:
      - name: Checkout
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # tag=v3
      - name: Set up QEMU for multiarch builds
        uses: docker/setup-qemu-action@2b82ce82d56a2a04d2637cd93a637ae1b359c0a7 # tag=v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@4c0219f9ac95b02789c1075625400b2acbff50b1 # tag=v2
      - name: Install python 3
        uses: actions/setup-python@61a6322f88396a6271a6ee3565807d608ecaddd1 # tag=v4
        with:
          python-version: '3.x'
      - name: Set up Cosign
        uses: sigstore/cosign-installer@v3.1.1
      - name: Login to Stackable Nexus
        uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc # tag=v2
        with:
          registry: docker.stackable.tech
          username: github
          password: ${{ secrets.NEXUS_PASSWORD }}
      - name: Publish and sign dev images
        id: publish_images
        run: |
          BAKE_OUTPUT=$(python -m image_tools.bake --product "${{ matrix.product }}" --image-version 0.0.0-dev --push 2>&1)
          echo "$BAKE_OUTPUT"

          # find all pushed manifests based on the output of the bake command
          # this is needed for image signing, since images should be referenced by their digest
          IMAGE_LIST=$(echo "$BAKE_OUTPUT" | awk '/^#[0-9]+ pushing manifest for docker.stackable.tech\/stackable\/${{ matrix.product }}:.+ done$/ { print $5 }')

          # Also publish images to Harbor
          # This has to happen in the same step unfortunately, the images that were just built are not available in other steps

          docker login oci.stackable.tech -u 'robot$stackable+github-action-build' -p '${{ secrets.HARBOR_ROBOT_STACKABLE_GITHUB_ACTION_BUILD_SECRET }}'

          # loop over all pushed images, retag them, push them to Harbor and sign them
          while IFS= read -r IMAGE; do
            # drop the digest from the image identifier
            NEXUS_IMAGE=$(echo $IMAGE | awk -F '@' '{ print $1 }')

            HARBOR_IMAGE=$(echo $NEXUS_IMAGE | sed 's#docker\.stackable\.tech/stackable#oci.stackable.tech/stackable/images#')

            docker tag "$NEXUS_IMAGE" "$HARBOR_IMAGE"
            docker push "$HARBOR_IMAGE"

            echo "signing $NEXUS_IMAGE and $HARBOR_IMAGE"
            cosign sign -y "$NEXUS_IMAGE"
            cosign sign -y "$HARBOR_IMAGE"
          done <<< "$IMAGE_LIST"
  preflight:
    name: ${{ matrix.product }} OpenShift checks
    # Run preflight check but do not submit anything to the RH certification portal.
    # This job only runs if the "development" job was successful
    # See: https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idneeds
    needs: development
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      # This setting can be changed to throttle the build load
      # max-parallel: 1
      matrix:
        product:
          - airflow
    steps:
      - name: Checkout
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # tag=v3
      - name: Install python 3
        uses: actions/setup-python@61a6322f88396a6271a6ee3565807d608ecaddd1 # tag=v4
        with:
          python-version: '3.x'
      - name: Install preflight
        run: |
          wget https://github.com/redhat-openshift-ecosystem/openshift-preflight/releases/latest/download/preflight-linux-amd64
          chmod +x preflight-linux-amd64
      - name: OpenShift certification checks
        run: python -m image_tools.preflight --product "${{ matrix.product }}" --image-version 0.0.0-dev --preflight-cmd ./preflight-linux-amd64
