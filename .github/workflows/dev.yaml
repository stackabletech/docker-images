---
name: Publish 0.0.0-dev images
on:
  push:
    branches:
      - main
      - feat/push-images-to-harbor

jobs:
  development:
    name: ${{ matrix.product }} 0.0.0-dev
    permissions:
      id-token: write
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      # This setting can be changed to throttle the build load
      # max-parallel: 1
      matrix:
        product:
          - airflow
        shard_count:
          - 5
        shard_index: [0, 1, 2, 3, 4] # between 0 and shard_count-1
    steps:
      - name: Checkout
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # tag=v3
      - name: Set up QEMU for multiarch builds
        uses: docker/setup-qemu-action@2b82ce82d56a2a04d2637cd93a637ae1b359c0a7 # tag=v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@4c0219f9ac95b02789c1075625400b2acbff50b1 # tag=v2
      - name: Install python 3
        uses: actions/setup-python@61a6322f88396a6271a6ee3565807d608ecaddd1 # tag=v4
        with:
          python-version: '3.x'
      - name: Set up Cosign
        uses: sigstore/cosign-installer@v3.1.2
      - name: Login to Stackable Nexus
        uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc # tag=v2
        with:
          registry: docker.stackable.tech
          username: github
          password: ${{ secrets.NEXUS_PASSWORD }}
      - name: Login to Stackable Harbor
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # tag=v3
        with:
          registry: oci.stackable.tech
          username: robot$stackable+github-action-build
          password: ${{ secrets.HARBOR_ROBOT_STACKABLE_GITHUB_ACTION_BUILD_SECRET }}
      - name: Publish dev images
        id: publish_images
        run: |
          # Bake images and load them to local docker repo for signing
          # TODO: buildx cannot --load and --push at the same time
          bake --product "${{ matrix.product }}" \
          --image-version 0.0.0-dev \
          --shard-count "${{matrix.shard_count}}" \
          --shard-index "${{matrix.shard_index}}" \
          --export-tags-file bake-target-tags
          # Push images to image repository
          if [ -f bake-target-tags ]; then
            IMAGE_NAME=$(< bake-target-tags | cut -d ":" -f 1)
            TAG_NAME=$(< bake-target-tags | cut -d ":" -f 2)
            # Store the output of `docker image push` into a variable, so we can parse it for the digest
            PUSH_OUTPUT=$(docker image push "$(< bake-target-tags)" 2>&1)
            echo "$PUSH_OUTPUT"
            # Obtain the digest of the pushed image from the output of `docker image push`, because signing by tag is deprecated and will be removed from cosign in the future
            DIGEST=$(echo "$PUSH_OUTPUT" | awk "/^$TAG_NAME: digest: sha256:[a-f0-9]{64} size: [0-9]+$/ { print \$3 }")
            # Refer to image via its digest (docker.stackable.tech/stackable/airflow@sha256:0a1b2c...)
            # This generates a signature and publishes it to the registry, next to the image
            # Uses the keyless signing flow with Github Actions as identity provider
            cosign sign -y "$IMAGE_NAME@$DIGEST"

            # Push to oci.stackable.tech as well
            IMAGE_NAME=oci.stackable.tech/stackable/${{ matrix.product }}
            docker tag "$(< bake-target-tags)" "$IMAGE_NAME:$TAG_NAME"
            # Store the output of `docker image push` into a variable, so we can parse it for the digest
            PUSH_OUTPUT=$(docker image push "$IMAGE_NAME:$TAG_NAME" 2>&1)
            echo "$PUSH_OUTPUT"
            # Obtain the digest of the pushed image from the output of `docker image push`, because signing by tag is deprecated and will be removed from cosign in the future
            DIGEST=$(echo "$PUSH_OUTPUT" | awk "/^$TAG_NAME: digest: sha256:[a-f0-9]{64} size: [0-9]+$/ { print \$3 }")
            # Refer to image via its digest (docker.stackable.tech/stackable/airflow@sha256:0a1b2c...)
            # This generates a signature and publishes it to the registry, next to the image
            # Uses the keyless signing flow with Github Actions as identity provider
            cosign sign -y "$IMAGE_NAME@$DIGEST"
          fi
  preflight:
    name: ${{ matrix.product }} OpenShift checks
    # Run preflight check but do not submit anything to the RH certification portal.
    # This job only runs if the "development" job was successful
    # See: https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idneeds
    needs: development
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      # This setting can be changed to throttle the build load
      # max-parallel: 1
      matrix:
        product:
          - airflow
    steps:
      - name: Checkout
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # tag=v3
      - name: Install python 3
        uses: actions/setup-python@61a6322f88396a6271a6ee3565807d608ecaddd1 # tag=v4
        with:
          python-version: '3.x'
      - name: Install preflight
        run: |
          wget https://github.com/redhat-openshift-ecosystem/openshift-preflight/releases/latest/download/preflight-linux-amd64
          chmod +x preflight-linux-amd64
      - name: OpenShift certification checks
        run: python -m image_tools.preflight --product "${{ matrix.product }}" --image-version 0.0.0-dev --preflight-cmd ./preflight-linux-amd64
