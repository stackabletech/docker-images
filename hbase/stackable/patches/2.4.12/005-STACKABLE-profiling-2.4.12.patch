Subject: [PATCH] Adds a MethodTimer class which can be used to do poor man's profiling
---
Index: hbase-server/src/main/java/org/apache/hadoop/hbase/util/MethodTimer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/util/MethodTimer.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/util/MethodTimer.java
new file mode 100644
--- /dev/null	(date 1701184144286)
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/util/MethodTimer.java	(date 1701184144286)
@@ -0,0 +1,64 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hbase.util;
+
+import java.util.LinkedHashMap;
+import java.util.Map;
+import org.apache.yetus.audience.InterfaceAudience;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+@InterfaceAudience.Private
+public class MethodTimer {
+
+  private static final Logger LOG = LoggerFactory.getLogger(MethodTimer.class);
+
+  private final long startTime;
+  private final Map<String, Long> checkpoints = new LinkedHashMap<>();
+
+  public MethodTimer() {
+    startTime = EnvironmentEdgeManager.currentTime();
+  }
+
+  public void checkpoint(String identifier) {
+    checkpoints.put(identifier, EnvironmentEdgeManager.currentTime());
+  }
+
+  public void endAndLogIfSlow(long threshold) {
+    checkpoint("End");
+
+    long endTime = EnvironmentEdgeManager.currentTime();
+    long totalTime = endTime - startTime;
+    if (totalTime > threshold) {
+      StringBuilder builder = new StringBuilder();
+      long lastCheckpoint = startTime;
+      for (Map.Entry<String, Long> entry : checkpoints.entrySet()) {
+        long currentCheckpoint = entry.getValue();
+        builder.append(entry.getKey());
+        builder.append(" -> ");
+        builder.append(currentCheckpoint - startTime);
+        builder.append("/");
+        builder.append(currentCheckpoint - lastCheckpoint);
+        lastCheckpoint = entry.getValue();
+      }
+
+      LOG.info("STACKABLE slow get detected. Total Execution Time: {}ms. Timings: {}", totalTime,
+        builder);
+    }
+  }
+}
Index: hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionServer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionServer.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionServer.java
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionServer.java	(revision e04956f7bb5d95a54612a99905ee2d8e7f0de23a)
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionServer.java	(date 1701182891572)
@@ -62,7 +62,7 @@
   // Incremented per write.
   private Meter serverWriteQueryMeter;
   protected long slowMetricTime;
-  protected static final int DEFAULT_SLOW_METRIC_TIME = 1000; // milliseconds
+  public static final int DEFAULT_SLOW_METRIC_TIME = 1000; // milliseconds
 
   public MetricsRegionServer(MetricsRegionServerWrapper regionServerWrapper, Configuration conf,
       MetricsTable metricsTable) {
Index: hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java	(revision e04956f7bb5d95a54612a99905ee2d8e7f0de23a)
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java	(date 1701183999751)
@@ -142,6 +142,7 @@
 import org.apache.hadoop.hbase.util.Bytes;
 import org.apache.hadoop.hbase.util.DNS;
 import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;
+import org.apache.hadoop.hbase.util.MethodTimer;
 import org.apache.hadoop.hbase.util.Pair;
 import org.apache.hadoop.hbase.util.ServerRegionReplicaUtil;
 import org.apache.hadoop.hbase.wal.WAL;
@@ -260,6 +261,8 @@
 import org.apache.hadoop.hbase.shaded.protobuf.generated.WALProtos.CompactionDescriptor;
 import org.apache.hadoop.hbase.shaded.protobuf.generated.WALProtos.FlushDescriptor;
 import org.apache.hadoop.hbase.shaded.protobuf.generated.WALProtos.RegionEventDescriptor;
+import static org.apache.hadoop.hbase.regionserver.MetricsRegionServer.DEFAULT_SLOW_METRIC_TIME;
+import static org.apache.hadoop.hbase.regionserver.MetricsRegionServer.SLOW_METRIC_TIME;
 
 /**
  * Implements the regionserver RPC services.
@@ -312,7 +315,7 @@
 
   // Request counter for rpc scan
   final LongAdder rpcScanRequestCount = new LongAdder();
-  
+
   // Request counter for scans that might end up in full scans
   final LongAdder rpcFullScanRequestCount = new LongAdder();
 
@@ -357,6 +360,9 @@
    * Row size threshold for multi requests above which a warning is logged
    */
   private final int rowSizeWarnThreshold;
+
+  private final long slowOperationWarningThreshold;
+
   /*
    * Whether we should reject requests with very high no of rows i.e. beyond threshold
    * defined by rowSizeWarnThreshold
@@ -1207,6 +1213,8 @@
     rejectRowsWithSizeOverThreshold =
       conf.getBoolean(REJECT_BATCH_ROWS_OVER_THRESHOLD, DEFAULT_REJECT_BATCH_ROWS_OVER_THRESHOLD);
 
+    slowOperationWarningThreshold = conf.getLong(SLOW_METRIC_TIME, DEFAULT_SLOW_METRIC_TIME);
+
     final RpcSchedulerFactory rpcSchedulerFactory;
     try {
       rpcSchedulerFactory = getRpcSchedulerFactoryClass().asSubclass(RpcSchedulerFactory.class)
@@ -2552,14 +2560,21 @@
   public GetResponse get(final RpcController controller,
       final GetRequest request) throws ServiceException {
     long before = EnvironmentEdgeManager.currentTime();
+    MethodTimer timer = new MethodTimer();
     OperationQuota quota = null;
     HRegion region = null;
     try {
+      // timestamp
+
+      timer.checkpoint("start_checkOpen");
       checkOpen();
+      timer.checkpoint("end_checkOpen");
       requestCount.increment();
       rpcGetRequestCount.increment();
+      timer.checkpoint("start_getRegion");
       region = getRegion(request.getRegion());
-
+      timer.checkpoint("end_getRegion");
+// TODO 1
       GetResponse.Builder builder = GetResponse.newBuilder();
       ClientProtos.Get get = request.getGet();
       // An asynchbase client, https://github.com/OpenTSDB/asynchbase, starts by trying to do
@@ -2573,16 +2588,20 @@
       }
       Boolean existence = null;
       Result r = null;
+
       RpcCallContext context = RpcServer.getCurrentCall().orElse(null);
+      timer.checkpoint("start_checkQuota");
       quota = getRpcQuotaManager().checkQuota(region, OperationQuota.OperationType.GET);
-
+      timer.checkpoint("end_checkQuota");
       Get clientGet = ProtobufUtil.toGet(get);
       if (get.getExistenceOnly() && region.getCoprocessorHost() != null) {
         existence = region.getCoprocessorHost().preExists(clientGet);
       }
       if (existence == null) {
         if (context != null) {
+          timer.checkpoint("start_get");
           r = get(clientGet, (region), null, context);
+          timer.checkpoint("end_get");
         } else {
           // for test purpose
           r = region.get(clientGet);
@@ -2616,6 +2635,7 @@
       if (r != null && r.rawCells() != null) {
         quota.addGetResult(r);
       }
+      timer.endAndLogIfSlow(slowOperationWarningThreshold);
       return builder.build();
     } catch (IOException ie) {
       throw new ServiceException(ie);
