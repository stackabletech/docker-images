From 69c540f561f740596340b73ed1a77d5b115e1bee Mon Sep 17 00:00:00 2001
From: Andrew Kenworthy <andrew.kenworthy@stackable.tech>
Date: Wed, 16 Apr 2025 16:43:33 +0200
Subject: extend servername with external host and port

---
 .../hbase/shaded/protobuf/ProtobufUtil.java   | 15 ++++++--
 .../org/apache/hadoop/hbase/ServerName.java   | 35 ++++++++++++++++++-
 .../src/main/protobuf/HBase.proto             |  2 ++
 .../main/protobuf/RegionServerStatus.proto    |  3 ++
 hbase-protocol/src/main/protobuf/HBase.proto  |  2 ++
 .../src/main/protobuf/ZooKeeper.proto         |  2 ++
 .../tmpl/master/RegionServerListTmpl.jamon    |  2 +-
 .../apache/hadoop/hbase/master/HMaster.java   |  7 ++++
 .../hadoop/hbase/master/ServerManager.java    |  4 ++-
 .../hbase/regionserver/HRegionServer.java     | 16 ++++++++-
 .../resources/hbase-webapps/master/hbck.jsp   |  2 +-
 .../hbase-webapps/master/rsgroup.jsp          | 10 +++---
 .../resources/hbase-webapps/master/table.jsp  | 22 ++++++------
 .../hbase/zookeeper/MasterAddressTracker.java |  3 ++
 14 files changed, 102 insertions(+), 23 deletions(-)

diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/shaded/protobuf/ProtobufUtil.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/shaded/protobuf/ProtobufUtil.java
index 0fe181b503..be121ea641 100644
--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/shaded/protobuf/ProtobufUtil.java
+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/shaded/protobuf/ProtobufUtil.java
@@ -417,6 +417,13 @@ public final class ProtobufUtil {
     if (serverName.getStartcode() >= 0) {
       builder.setStartCode(serverName.getStartcode());
     }
+
+    if (serverName.getExternalHostname() != null) {
+      builder.setExternalHostName(serverName.getExternalHostname());
+    }
+    if (serverName.getExternalPort() != null) {
+      builder.setExternalPort(serverName.getExternalPort());
+    }
     return builder.build();
   }
 
@@ -428,6 +435,9 @@ public final class ProtobufUtil {
   public static ServerName toServerName(final HBaseProtos.ServerName proto) {
     if (proto == null) return null;
     String hostName = proto.getHostName();
+    String externalHostName = proto.getExternalHostName();
+    Integer externalPort = proto.getExternalPort();
+
     long startCode = -1;
     int port = -1;
     if (proto.hasPort()) {
@@ -436,7 +446,7 @@ public final class ProtobufUtil {
     if (proto.hasStartCode()) {
       startCode = proto.getStartCode();
     }
-    return ServerName.valueOf(hostName, port, startCode);
+    return ServerName.valueOf(hostName, port, startCode, externalHostName, externalPort);
   }
 
   /**
@@ -3145,7 +3155,8 @@ public final class ProtobufUtil {
           ZooKeeperProtos.Master.parser().parseFrom(data, prefixLen, data.length - prefixLen);
         org.apache.hadoop.hbase.shaded.protobuf.generated.HBaseProtos.ServerName sn =
           rss.getMaster();
-        return ServerName.valueOf(sn.getHostName(), sn.getPort(), sn.getStartCode());
+        return ServerName.valueOf(sn.getHostName(), sn.getPort(), sn.getStartCode(),
+          sn.getExternalHostName(), sn.getExternalPort());
       } catch (/* InvalidProtocolBufferException */IOException e) {
         // A failed parse of the znode is pretty catastrophic. Rather than loop
         // retrying hoping the bad bytes will changes, and rather than change
diff --git a/hbase-common/src/main/java/org/apache/hadoop/hbase/ServerName.java b/hbase-common/src/main/java/org/apache/hadoop/hbase/ServerName.java
index 5223bac3e5..932865ca69 100644
--- a/hbase-common/src/main/java/org/apache/hadoop/hbase/ServerName.java
+++ b/hbase-common/src/main/java/org/apache/hadoop/hbase/ServerName.java
@@ -85,6 +85,8 @@ public class ServerName implements Comparable<ServerName>, Serializable {
   private final String serverName;
   private final long startCode;
   private transient Address address;
+  private String externalHostname;
+  private Integer externalPort;
 
   /**
    * Cached versioned bytes of this ServerName instance.
@@ -103,11 +105,21 @@ public class ServerName implements Comparable<ServerName>, Serializable {
     this(Address.fromParts(hostname, port), startCode);
   }
 
-  private ServerName(final Address address, final long startCode) {
+  protected ServerName(final String hostname, final int port, final long startCode, String externalHostname, Integer externalPort) {
+    this(Address.fromParts(hostname, port), startCode, externalHostname, externalPort);
+  }
+
+  private ServerName(final Address address, final long startCode, String externalHostname, Integer externalPort) {
     // Use HostAndPort to host port and hostname. Does validation and can do ipv6
     this.address = address;
     this.startCode = startCode;
     this.serverName = getServerName(this.address.getHostname(), this.address.getPort(), startCode);
+    this.externalHostname = externalHostname;
+    this.externalPort = externalPort;
+  }
+
+  private ServerName(final Address address, final long startCode) {
+    this(address, startCode, null, null);
   }
 
   private ServerName(final String hostAndPort, final long startCode) {
@@ -177,6 +189,11 @@ public class ServerName implements Comparable<ServerName>, Serializable {
     return INTERN_POOL.intern(new ServerName(hostname, port, startCode));
   }
 
+  public static ServerName valueOf(final String hostname, final int port, final long startCode,
+    String externalHostname, Integer externalPort) {
+    return new ServerName(hostname, port, startCode, externalHostname, externalPort);
+  }
+
   /**
    * Retrieve an instance of ServerName. Callers should use the equals method to compare returned
    * instances, though we may return a shared immutable object as an internal optimization.
@@ -253,6 +270,22 @@ public class ServerName implements Comparable<ServerName>, Serializable {
     return this.address.getPort();
   }
 
+  public String getExternalHostname() {
+    return this.externalHostname;
+  }
+
+  public Integer getExternalPort() {
+    return this.externalPort;
+  }
+
+  public void setAddress(Address address) {
+    this.address = address;
+  }
+
+  public void setExternalPort(Integer externalPort) {
+    this.externalPort = externalPort;
+  }
+
   /**
    * Return the start code.
    * @deprecated Since 2.5.0, will be removed in 4.0.0. Use {@link #getStartCode()} instead.
diff --git a/hbase-protocol-shaded/src/main/protobuf/HBase.proto b/hbase-protocol-shaded/src/main/protobuf/HBase.proto
index e858d7ec33..2da62e0e0a 100644
--- a/hbase-protocol-shaded/src/main/protobuf/HBase.proto
+++ b/hbase-protocol-shaded/src/main/protobuf/HBase.proto
@@ -147,6 +147,8 @@ message ServerName {
   required string host_name = 1;
   optional uint32 port = 2;
   optional uint64 start_code = 3;
+  optional string external_host_name = 100;
+  optional uint32 external_port = 101;
 }
 
 // Comment data structures
diff --git a/hbase-protocol-shaded/src/main/protobuf/RegionServerStatus.proto b/hbase-protocol-shaded/src/main/protobuf/RegionServerStatus.proto
index 53751082f9..ecb3cf6221 100644
--- a/hbase-protocol-shaded/src/main/protobuf/RegionServerStatus.proto
+++ b/hbase-protocol-shaded/src/main/protobuf/RegionServerStatus.proto
@@ -42,6 +42,9 @@ message RegionServerStartupRequest {
 
   /** hostname for region server, optional */
   optional string use_this_hostname_instead = 4;
+
+  optional string external_host_name = 100;
+  optional uint32 external_port = 101;
 }
 
 message RegionServerStartupResponse {
diff --git a/hbase-protocol/src/main/protobuf/HBase.proto b/hbase-protocol/src/main/protobuf/HBase.proto
index ecfdc8c2c7..833cee7bee 100644
--- a/hbase-protocol/src/main/protobuf/HBase.proto
+++ b/hbase-protocol/src/main/protobuf/HBase.proto
@@ -135,6 +135,8 @@ message ServerName {
   required string host_name = 1;
   optional uint32 port = 2;
   optional uint64 start_code = 3;
+  optional string external_host_name = 100;
+  optional uint32 external_port = 101;
 }
 
 // Comment data structures
diff --git a/hbase-protocol/src/main/protobuf/ZooKeeper.proto b/hbase-protocol/src/main/protobuf/ZooKeeper.proto
index c0f40e970e..bddadf4d30 100644
--- a/hbase-protocol/src/main/protobuf/ZooKeeper.proto
+++ b/hbase-protocol/src/main/protobuf/ZooKeeper.proto
@@ -56,6 +56,8 @@ message Master {
   // Major RPC version so that clients can know what version the master can accept.
   optional uint32 rpc_version = 2;
   optional uint32 info_port = 3;
+  optional string external_host = 4;
+  optional uint32 external_port = 5;
 }
 
 /**
diff --git a/hbase-server/src/main/jamon/org/apache/hadoop/hbase/tmpl/master/RegionServerListTmpl.jamon b/hbase-server/src/main/jamon/org/apache/hadoop/hbase/tmpl/master/RegionServerListTmpl.jamon
index 4c9140470b..604ecd7b2a 100644
--- a/hbase-server/src/main/jamon/org/apache/hadoop/hbase/tmpl/master/RegionServerListTmpl.jamon
+++ b/hbase-server/src/main/jamon/org/apache/hadoop/hbase/tmpl/master/RegionServerListTmpl.jamon
@@ -500,7 +500,7 @@ if  (totalCompactingCells > 0) {
         </%args>
         <%java>
         int infoPort = master.getRegionServerInfoPort(serverName);
-        String url = "//" + serverName.getHostname() + ":" + infoPort + "/rs-status";
+        String url = "//" + serverName.getExternalHostname() + ":" + serverName.getExternalPort() + "/rs-status";
         </%java>
 
         <%if infoPort > 0%>
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java
index 3fe5abac27..652c709ab5 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java
@@ -3128,6 +3128,13 @@ public class HMaster extends HRegionServer implements MasterServices {
 
   public int getRegionServerInfoPort(final ServerName sn) {
     int port = this.serverManager.getInfoPort(sn);
+    if (port == 0) {
+      if (sn.getExternalPort() != null) {
+        port = sn.getExternalPort();
+      } else {
+        port = sn.getAddress().getPort();
+      }
+    }
     return port == 0
       ? conf.getInt(HConstants.REGIONSERVER_INFO_PORT, HConstants.DEFAULT_REGIONSERVER_INFOPORT)
       : port;
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/ServerManager.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/ServerManager.java
index f7115a5cef..e5f6062793 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/ServerManager.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/ServerManager.java
@@ -45,6 +45,7 @@ import org.apache.hadoop.hbase.ServerName;
 import org.apache.hadoop.hbase.YouAreDeadException;
 import org.apache.hadoop.hbase.client.ClusterConnection;
 import org.apache.hadoop.hbase.client.RegionInfo;
+import org.apache.hadoop.hbase.client.RetriesExhaustedException;
 import org.apache.hadoop.hbase.conf.ConfigurationObserver;
 import org.apache.hadoop.hbase.ipc.DecommissionedHostRejectedException;
 import org.apache.hadoop.hbase.ipc.HBaseRpcController;
@@ -230,7 +231,8 @@ public class ServerManager implements ConfigurationObserver {
     String isaHostName = useIp ? ia.getHostAddress() : ia.getHostName();
     final String hostname =
       request.hasUseThisHostnameInstead() ? request.getUseThisHostnameInstead() : isaHostName;
-    ServerName sn = ServerName.valueOf(hostname, request.getPort(), request.getServerStartCode());
+    ServerName sn = ServerName.valueOf(hostname, request.getPort(), request.getServerStartCode(),
+      request.getExternalHostName(), request.getExternalPort());
 
     // Check if the host should be rejected based on it's decommissioned status
     checkRejectableDecommissionedStatus(sn);
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
index 27bcef2f06..8438378059 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
@@ -678,7 +678,18 @@ public class HRegionServer extends Thread
         useIp ? rpcServices.isa.getAddress().getHostAddress() : rpcServices.isa.getHostName();
       String hostName =
         StringUtils.isBlank(useThisHostnameInstead) ? isaHostName : useThisHostnameInstead;
-      serverName = ServerName.valueOf(hostName, this.rpcServices.isa.getPort(), this.startcode);
+
+      String externalHostname;
+      Integer externalPort;
+      if (this instanceof HMaster) {
+        externalHostname = conf.get("hbase.listener.master.hostname", "");
+        externalPort = conf.getInt("hbase.listener.master.port", -1);
+      } else {
+        externalHostname = conf.get("hbase.listener.regionserver.hostname", "");
+        externalPort = conf.getInt("hbase.listener.regionserver.port", -1);
+      }
+
+      serverName = ServerName.valueOf(hostName, this.rpcServices.isa.getPort(), this.startcode, externalHostname, externalPort);
 
       rpcControllerFactory = RpcControllerFactory.instantiate(this.conf);
       rpcRetryingCallerFactory = RpcRetryingCallerFactory.instantiate(this.conf,
@@ -3081,6 +3092,9 @@ public class HRegionServer extends Thread
       request.setPort(port);
       request.setServerStartCode(this.startcode);
       request.setServerCurrentTime(now);
+      request.setExternalHostName(serverName.getExternalHostname());
+      request.setExternalPort(serverName.getExternalPort());
+
       result = rss.regionServerStartup(null, request.build());
     } catch (ServiceException se) {
       IOException ioe = ProtobufUtil.getRemoteException(se);
diff --git a/hbase-server/src/main/resources/hbase-webapps/master/hbck.jsp b/hbase-server/src/main/resources/hbase-webapps/master/hbck.jsp
index 38e16ca8e2..3bd14bf524 100644
--- a/hbase-server/src/main/resources/hbase-webapps/master/hbck.jsp
+++ b/hbase-server/src/main/resources/hbase-webapps/master/hbck.jsp
@@ -366,7 +366,7 @@ private static String formatServerName(HMaster master,
   if (serverManager.isServerOnline(serverName)) {
     int infoPort = master.getRegionServerInfoPort(serverName);
     if (infoPort > 0) {
-      return "<a href=" + "//" + serverName.getHostname() + ":" +
+      return "<a href=" + "//" + serverName.getExternalHostname() + ":" +
         infoPort + "/rs-status>" + sn + "</a>";
     } else {
       return "<b>" + sn + "</b>";
diff --git a/hbase-server/src/main/resources/hbase-webapps/master/rsgroup.jsp b/hbase-server/src/main/resources/hbase-webapps/master/rsgroup.jsp
index 6ba6f78a27..5dad8e07a2 100644
--- a/hbase-server/src/main/resources/hbase-webapps/master/rsgroup.jsp
+++ b/hbase-server/src/main/resources/hbase-webapps/master/rsgroup.jsp
@@ -171,7 +171,7 @@
                    }
                    long startcode = serverName.getStartcode();
                    int infoPort = master.getRegionServerInfoPort(serverName);
-                   String url = "//" + serverName.getHostname() + ":" + infoPort + "/rs-status";%>
+                   String url = "//" + serverName.getExternalHostname() + ":" + serverName.getExternalPort() + "/rs-status";%>
                    <tr>
                      <td><a href="<%= url %>"><%= serverName.getServerName() %></a></td>
                      <td><%= new Date(startcode) %></td>
@@ -226,7 +226,7 @@
                            .stream().mapToDouble(rm -> rm.getMemStoreSize().get(Size.Unit.MEGABYTE))
                            .sum();
                    int infoPort = master.getRegionServerInfoPort(serverName);
-                   String url = "//" + serverName.getHostname() + ":" + infoPort + "/rs-status";
+                   String url = "//" + serverName.getExternalHostname() + ":" + serverName.getExternalPort() + "/rs-status";
 
                    if (memStoreSizeMB > 0) {
                      memStoreSizeMBStr = TraditionalBinaryPrefix.long2String(
@@ -277,7 +277,7 @@
                      readRequestCount += rm.getReadRequestCount();
                      writeRequestCount += rm.getWriteRequestCount();
                    }
-                   String url = "//" + serverName.getHostname() + ":" + infoPort + "/rs-status";
+                   String url = "//" + serverName.getExternalHostname() + ":" + serverName.getExternalPort() + "/rs-status";
             %>
                    <tr>
                      <td><a href="<%= url %>"><%= serverName.getServerName() %></a></td>
@@ -331,7 +331,7 @@
                       totalStaticBloomSizeKB += rm.getBloomFilterSize().get(Size.Unit.KILOBYTE);
                     }
                     int infoPort = master.getRegionServerInfoPort(serverName);
-                    String url = "//" + serverName.getHostname() + ":" + infoPort + "/rs-status";
+                    String url = "//" + serverName.getExternalHostname() + ":" + serverName.getExternalPort() + "/rs-status";
                     if (storeUncompressedSizeMB > 0) {
                       storeUncompressedSizeMBStr = TraditionalBinaryPrefix.long2String(
                       (long) storeUncompressedSizeMB * TraditionalBinaryPrefix.MEGA.value, "B", 1);
@@ -397,7 +397,7 @@
                             ((float) currentCompactedCells / totalCompactingCells)) + "%";
                     }
                     int infoPort = master.getRegionServerInfoPort(serverName);
-                    String url = "//" + serverName.getHostname() + ":" + infoPort + "/rs-status";
+                    String url = "//" + serverName.getExternalHostname() + ":" + serverName.getExternalPort() + "/rs-status";
             %>
                     <tr>
                       <td><a href="<%= url %>"><%= serverName.getServerName() %></a></td>
diff --git a/hbase-server/src/main/resources/hbase-webapps/master/table.jsp b/hbase-server/src/main/resources/hbase-webapps/master/table.jsp
index 56a0c8096d..2da74e9709 100644
--- a/hbase-server/src/main/resources/hbase-webapps/master/table.jsp
+++ b/hbase-server/src/main/resources/hbase-webapps/master/table.jsp
@@ -102,7 +102,7 @@
       return serverName.getServerName();
     }
 
-    final String socketAddress = serverName.getHostname() + ":" + rsInfoPort;
+    final String socketAddress = serverName.getExternalHostname() + ":" + serverName.getExternalPort();
     final String URI = "//" + socketAddress + "/region.jsp"
       + "?name=" + regionInfo.getEncodedName();
     return "<a href=\"" + URI + "\">" + serverName.getServerName() + "</a>";
@@ -299,7 +299,7 @@
                   if (metaLocation != null) {
                     ServerMetrics sl = master.getServerManager().getLoad(metaLocation);
                     // The host name portion should be safe, but I don't know how we handle IDNs so err on the side of failing safely.
-                    hostAndPort = URLEncoder.encode(metaLocation.getHostname()) + ":" + master.getRegionServerInfoPort(metaLocation);
+                    hostAndPort = URLEncoder.encode(metaLocation.getExternalHostname()) + ":" + master.getRegionServerInfoPort(metaLocation);
                     if (sl != null) {
                       Map<byte[], RegionMetrics> map = sl.getRegionMetrics();
                       if (map.containsKey(meta.getRegionName())) {
@@ -374,7 +374,7 @@
                    float localityForSsd = 0.0f;
                    if (metaLocation != null) {
                      ServerMetrics sl = master.getServerManager().getLoad(metaLocation);
-                     hostAndPort = URLEncoder.encode(metaLocation.getHostname()) + ":" + master.getRegionServerInfoPort(metaLocation);
+                     hostAndPort = URLEncoder.encode(metaLocation.getExternalHostname()) + ":" + master.getRegionServerInfoPort(metaLocation);
                      if (sl != null) {
                        Map<byte[], RegionMetrics> map = sl.getRegionMetrics();
                        if (map.containsKey(meta.getRegionName())) {
@@ -426,7 +426,7 @@
                   String compactionProgress = "";
                   if (metaLocation != null) {
                     ServerMetrics sl = master.getServerManager().getLoad(metaLocation);
-                    hostAndPort = URLEncoder.encode(metaLocation.getHostname()) + ":" + master.getRegionServerInfoPort(metaLocation);
+                    hostAndPort = URLEncoder.encode(metaLocation.getExternalHostname()) + ":" + master.getRegionServerInfoPort(metaLocation);
                     if (sl != null) {
                       Map<byte[], RegionMetrics> map = sl.getRegionMetrics();
                       if (map.containsKey(meta.getRegionName())) {
@@ -951,7 +951,7 @@
                   ServerMetrics sl = master.getServerManager().getLoad(addr);
                   // This port might be wrong if RS actually ended up using something else.
                   urlRegionServer =
-                          "//" + URLEncoder.encode(addr.getHostname()) + ":" + master.getRegionServerInfoPort(addr) + "/rs-status";
+                          "//" + URLEncoder.encode(addr.getExternalHostname()) + ":" + master.getRegionServerInfoPort(addr) + "/rs-status";
                   if(sl != null) {
                     Integer i = regDistribution.get(addr);
                     if (null == i) i = Integer.valueOf(0);
@@ -972,7 +972,7 @@
                 if (urlRegionServer != null) {
               %>
               <td>
-                <a href="<%= urlRegionServer %>"><%= addr == null? "-": StringEscapeUtils.escapeHtml4(addr.getHostname().toString()) + ":" + master.getRegionServerInfoPort(addr) %></a>
+                <a href="<%= urlRegionServer %>"><%= addr == null? "-": StringEscapeUtils.escapeHtml4(addr.getExternalHostname().toString()) + ":" + master.getRegionServerInfoPort(addr) %></a>
               </td>
               <%
               } else {
@@ -1037,7 +1037,7 @@
                 if (addr != null) {
                   // This port might be wrong if RS actually ended up using something else.
                   urlRegionServer =
-                    "//" + URLEncoder.encode(addr.getHostname()) + ":" + master.getRegionServerInfoPort(addr) + "/rs-status";
+                    "//" + URLEncoder.encode(addr.getExternalHostname()) + ":" + master.getRegionServerInfoPort(addr) + "/rs-status";
                 }
                 if (numRegionsRendered < numRegionsToRender) {
                   numRegionsRendered++;
@@ -1098,7 +1098,7 @@
                 if (addr != null) {
                   // This port might be wrong if RS actually ended up using something else.
                   urlRegionServer =
-                          "//" + URLEncoder.encode(addr.getHostname()) + ":" + master.getRegionServerInfoPort(addr) + "/rs-status";
+                          "//" + URLEncoder.encode(addr.getExternalHostname()) + ":" + master.getRegionServerInfoPort(addr) + "/rs-status";
                 }
                 if (numRegionsRendered < numRegionsToRender) {
                   numRegionsRendered++;
@@ -1109,7 +1109,7 @@
                 if (urlRegionServer != null) {
               %>
               <td>
-                <a href="<%= urlRegionServer %>"><%= addr == null? "-": StringEscapeUtils.escapeHtml4(addr.getHostname().toString()) + ":" + master.getRegionServerInfoPort(addr) %></a>
+                <a href="<%= urlRegionServer %>"><%= addr == null? "-": StringEscapeUtils.escapeHtml4(addr.getExternalHostname().toString()) + ":" + master.getRegionServerInfoPort(addr) %></a>
               </td>
               <%
               } else {
@@ -1153,10 +1153,10 @@
         <%
           for (Map.Entry<ServerName, Integer> rdEntry : regDistribution.entrySet()) {
             ServerName addr = rdEntry.getKey();
-            String url = "//" + URLEncoder.encode(addr.getHostname()) + ":" + master.getRegionServerInfoPort(addr) + "/rs-status";
+            String url = "//" + URLEncoder.encode(addr.getExternalHostname()) + ":" + master.getRegionServerInfoPort(addr) + "/rs-status";
         %>
         <tr>
-          <td><a href="<%= url %>"><%= StringEscapeUtils.escapeHtml4(addr.getHostname().toString()) + ":" + master.getRegionServerInfoPort(addr) %></a></td>
+          <td><a href="<%= url %>"><%= StringEscapeUtils.escapeHtml4(addr.getExternalHostname().toString()) + ":" + master.getRegionServerInfoPort(addr) %></a></td>
           <td><%= rdEntry.getValue()%></td>
           <%
             if (withReplica) {
diff --git a/hbase-zookeeper/src/main/java/org/apache/hadoop/hbase/zookeeper/MasterAddressTracker.java b/hbase-zookeeper/src/main/java/org/apache/hadoop/hbase/zookeeper/MasterAddressTracker.java
index 840ee2d215..b0f9da3e00 100644
--- a/hbase-zookeeper/src/main/java/org/apache/hadoop/hbase/zookeeper/MasterAddressTracker.java
+++ b/hbase-zookeeper/src/main/java/org/apache/hadoop/hbase/zookeeper/MasterAddressTracker.java
@@ -281,6 +281,9 @@ public class MasterAddressTracker extends ZKNodeTracker {
     snbuilder.setHostName(sn.getHostname());
     snbuilder.setPort(sn.getPort());
     snbuilder.setStartCode(sn.getStartcode());
+    snbuilder.setExternalHostName(sn.getExternalHostname());
+    snbuilder.setExternalPort(sn.getExternalPort());
+
     mbuilder.setMaster(snbuilder.build());
     mbuilder.setRpcVersion(HConstants.RPC_CURRENT_VERSION);
     mbuilder.setInfoPort(infoPort);
