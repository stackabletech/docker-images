From ebf82fed4b32988eaf3d6b27438f63dec8afc00a Mon Sep 17 00:00:00 2001
From: Andrew Kenworthy <andrew.kenworthy@stackable.tech>
Date: Thu, 12 Jun 2025 15:30:15 +0200
Subject: Refactoring

---
 .../apache/hadoop/hbase/ipc/RpcClientFactory.java    |  1 -
 .../java/org/apache/hadoop/hbase/master/HMaster.java |  6 ++++++
 .../hadoop/hbase/regionserver/HRegionServer.java     | 12 ++++++++----
 3 files changed, 14 insertions(+), 5 deletions(-)

diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/ipc/RpcClientFactory.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/ipc/RpcClientFactory.java
index 501b6b7637..fa65739c16 100644
--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/ipc/RpcClientFactory.java
+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/ipc/RpcClientFactory.java
@@ -99,7 +99,6 @@ public final class RpcClientFactory {
    */
   public static RpcClient createClient(Configuration conf, String clusterId,
     SocketAddress localAddr, MetricsConnection metrics, Map<String, byte[]> connectionAttributes) {
-    new Exception("BATMAN creating client localAddr="+localAddr).printStackTrace();
     String rpcClientClass = getRpcClientClass(conf);
     return ReflectionUtils.instantiateWithCustomCtor(
       rpcClientClass, new Class[] { Configuration.class, String.class, SocketAddress.class,
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java
index 5719f276bf..be0136193b 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java
@@ -20,6 +20,7 @@ package org.apache.hadoop.hbase.master;
 import static org.apache.hadoop.hbase.HConstants.DEFAULT_HBASE_SPLIT_COORDINATED_BY_ZK;
 import static org.apache.hadoop.hbase.HConstants.HBASE_MASTER_LOGCLEANER_PLUGINS;
 import static org.apache.hadoop.hbase.HConstants.HBASE_SPLIT_WAL_COORDINATED_BY_ZK;
+import static org.apache.hadoop.hbase.HConstants.MASTER_PORT;
 import static org.apache.hadoop.hbase.master.cleaner.HFileCleaner.CUSTOM_POOL_SIZE;
 import static org.apache.hadoop.hbase.util.DNS.MASTER_HOSTNAME_KEY;
 
@@ -559,6 +560,11 @@ public class HMaster extends HRegionServer implements MasterServices {
     return conf.get(MASTER_HOSTNAME_KEY);
   }
 
+  @Override
+  protected int getUseThisPortInstead(Configuration conf) {
+    return conf.getInt(MASTER_PORT, this.rpcServices.getSocketAddress().getPort());
+  }
+
   private void registerConfigurationObservers() {
     configurationManager.registerObserver(this.rpcServices);
     configurationManager.registerObserver(this);
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
index d18ad91c3a..80949070fd 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
@@ -24,6 +24,7 @@ import static org.apache.hadoop.hbase.HConstants.DEFAULT_HBASE_SPLIT_WAL_MAX_SPL
 import static org.apache.hadoop.hbase.HConstants.DEFAULT_SLOW_LOG_SYS_TABLE_CHORE_DURATION;
 import static org.apache.hadoop.hbase.HConstants.HBASE_SPLIT_WAL_COORDINATED_BY_ZK;
 import static org.apache.hadoop.hbase.HConstants.HBASE_SPLIT_WAL_MAX_SPLITTER;
+import static org.apache.hadoop.hbase.HConstants.REGIONSERVER_PORT;
 import static org.apache.hadoop.hbase.master.waleventtracker.WALEventTrackerTableCreator.WAL_EVENT_TRACKER_ENABLED_DEFAULT;
 import static org.apache.hadoop.hbase.master.waleventtracker.WALEventTrackerTableCreator.WAL_EVENT_TRACKER_ENABLED_KEY;
 import static org.apache.hadoop.hbase.namequeues.NamedQueueServiceChore.NAMED_QUEUE_CHORE_DURATION_DEFAULT;
@@ -673,8 +674,8 @@ public class HRegionServer extends Thread
       this.namedQueueRecorder = NamedQueueRecorder.getInstance(this.conf);
       rpcServices = createRpcServices();
       useThisHostnameInstead = getUseThisHostnameInstead(conf);
-      useThisPortInstead = Integer.parseInt(System.getenv("HBASE_SERVICE_PORT"));
-      useThisInfoPortInstead = Integer.parseInt(System.getenv("HBASE_INFO_PORT"));
+      useThisPortInstead = getUseThisPortInstead(conf);
+      useThisInfoPortInstead = conf.getInt("hbase.info.port" , this.infoServer != null ? this.infoServer.getPort() : -1);
 
       // if use-ip is enabled, we will use ip to expose Master/RS service for client,
       // see HBASE-27304 for details.
@@ -782,6 +783,10 @@ public class HRegionServer extends Thread
     }
   }
 
+  protected int getUseThisPortInstead(Configuration conf) {
+    return conf.getInt(REGIONSERVER_PORT, this.rpcServices.isa.getPort());
+  }
+
   private void setupSignalHandlers() {
     if (!SystemUtils.IS_OS_WINDOWS) {
       HBasePlatformDependent.handle("HUP", (number, name) -> {
@@ -964,7 +969,7 @@ public class HRegionServer extends Thread
       }
       // Setup RPC client for master communication
       this.rpcClient = RpcClientFactory.createClient(conf, clusterId,
-        new InetSocketAddress(/*this.rpcServices.isa.getAddress(), */0),
+        new InetSocketAddress(0),
         clusterConnection.getConnectionMetrics(), Collections.emptyMap());
       span.setStatus(StatusCode.OK);
     } catch (Throwable t) {
@@ -3081,7 +3086,6 @@ public class HRegionServer extends Thread
       LOG.info("reportForDuty to master=" + masterServerName + " with isa=" + rpcServices.isa
         + ", startcode=" + this.startcode);
       long now = EnvironmentEdgeManager.currentTime();
-      int port = rpcServices.isa.getPort();
       RegionServerStartupRequest.Builder request = RegionServerStartupRequest.newBuilder();
       if (!StringUtils.isBlank(useThisHostnameInstead)) {
         request.setUseThisHostnameInstead(useThisHostnameInstead);
