Entirely remove hadoop-resourceestimator

From: Lars Francke <git@lars-francke.de>


---
 .../assemblies/hadoop-resourceestimator.xml        |   42 --
 .../src/main/resources/assemblies/hadoop-tools.xml |   11
 hadoop-project/src/site/site.xml                   |    1
 hadoop-tools/hadoop-resourceestimator/README.md    |   19 -
 hadoop-tools/hadoop-resourceestimator/pom.xml      |  192 --------
 .../src/config/checkstyle.xml                      |   50 --
 .../src/main/bin/estimator.cmd                     |   52 --
 .../src/main/bin/estimator.sh                      |   71 ---
 .../src/main/bin/start-estimator.cmd               |   37 --
 .../src/main/bin/start-estimator.sh                |   42 --
 .../src/main/bin/stop-estimator.cmd                |   37 --
 .../src/main/bin/stop-estimator.sh                 |   42 --
 .../src/main/conf/resourceestimator-config.xml     |   85 ----
 .../src/main/data/resourceEstimatorService.txt     |    2
 .../resourceestimator/common/api/RecurrenceId.java |   95 ----
 .../common/api/ResourceSkyline.java                |  211 ---------
 .../resourceestimator/common/api/package-info.java |   23 -
 .../config/ResourceEstimatorConfiguration.java     |  125 -----
 .../common/config/ResourceEstimatorUtil.java       |   81 ---
 .../common/config/package-info.java                |   23 -
 .../exception/ResourceEstimatorException.java      |   35 --
 .../common/exception/package-info.java             |   23 -
 .../RLESparseResourceAllocationSerDe.java          |   77 ---
 .../common/serialization/ResourceSerDe.java        |   61 ---
 .../common/serialization/package-info.java         |   24 -
 .../service/ResourceEstimatorServer.java           |  146 ------
 .../service/ResourceEstimatorService.java          |  234 ----------
 .../resourceestimator/service/ShutdownHook.java    |   45 --
 .../resourceestimator/service/package-info.java    |   23 -
 .../skylinestore/api/HistorySkylineStore.java      |   99 ----
 .../skylinestore/api/PredictionSkylineStore.java   |   60 ---
 .../skylinestore/api/SkylineStore.java             |   30 -
 .../skylinestore/api/package-info.java             |   23 -
 .../exceptions/DuplicateRecurrenceIdException.java |   33 -
 .../exceptions/EmptyResourceSkylineException.java  |   33 -
 .../exceptions/NullPipelineIdException.java        |   32 -
 .../NullRLESparseResourceAllocationException.java  |   33 -
 .../exceptions/NullRecurrenceIdException.java      |   32 -
 .../exceptions/NullResourceSkylineException.java   |   32 -
 .../exceptions/RecurrenceIdNotFoundException.java  |   33 -
 .../exceptions/SkylineStoreException.java          |   33 -
 .../skylinestore/exceptions/package-info.java      |   24 -
 .../skylinestore/impl/InMemoryStore.java           |  256 -----------
 .../skylinestore/impl/package-info.java            |   23 -
 .../validator/SkylineStoreValidator.java           |  118 -----
 .../skylinestore/validator/package-info.java       |   23 -
 .../resourceestimator/solver/api/Solver.java       |   76 ---
 .../resourceestimator/solver/api/package-info.java |   23 -
 .../solver/exceptions/InvalidInputException.java   |   34 -
 .../solver/exceptions/InvalidSolverException.java  |   34 -
 .../solver/exceptions/SolverException.java         |   34 -
 .../solver/exceptions/package-info.java            |   24 -
 .../resourceestimator/solver/impl/BaseSolver.java  |   94 ----
 .../resourceestimator/solver/impl/LpSolver.java    |  340 ---------------
 .../solver/impl/package-info.java                  |   23 -
 .../solver/preprocess/SolverPreprocessor.java      |  219 ---------
 .../solver/preprocess/package-info.java            |   23 -
 .../translator/api/JobMetaData.java                |  163 -------
 .../translator/api/LogParser.java                  |   65 ---
 .../translator/api/SingleLineParser.java           |   52 --
 .../translator/api/package-info.java               |   23 -
 .../exceptions/DataFieldNotFoundException.java     |   32 -
 .../translator/exceptions/package-info.java        |   23 -
 .../translator/impl/BaseLogParser.java             |  127 -----
 .../translator/impl/LogParserUtil.java             |  104 ----
 .../translator/impl/NativeSingleLineParser.java    |  120 -----
 .../translator/impl/RmSingleLineParser.java        |  203 ---------
 .../translator/impl/package-info.java              |   23 -
 .../translator/validator/ParserValidator.java      |   41 --
 .../translator/validator/package-info.java         |   23 -
 .../webapps/ResourceEstimatorServer/.gitignore     |   14 -
 .../src/site/markdown/ResourceEstimator.md         |  181 --------
 .../src/site/resources/css/site.css                |   29 -
 .../resources/images/resourceestimator_arch.png    |  Bin
 .../src/site/resources/images/tpch_history.png     |  Bin
 .../src/site/resources/images/tpch_predict.png     |  Bin
 .../common/api/TestResourceSkyline.java            |  128 ------
 .../serialization/TestHistorySkylineSerDe.java     |  134 ------
 .../common/serialization/TestResourceSerDe.java    |   64 ---
 .../serialization/TestResourceSkylineSerDe.java    |  112 -----
 .../common/serialization/package-info.java         |   24 -
 .../service/GuiceServletConfig.java                |   42 --
 .../service/TestResourceEstimatorService.java      |  257 -----------
 .../skylinestore/impl/TestInMemoryStore.java       |   32 -
 .../skylinestore/impl/TestSkylineStore.java        |  464 --------------------
 .../solver/impl/TestLpSolver.java                  |  112 -----
 .../resourceestimator/solver/impl/TestSolver.java  |   73 ---
 .../translator/api/TestJobMetaData.java            |  163 -------
 .../translator/impl/TestNativeParser.java          |  115 -----
 .../translator/impl/TestRmParser.java              |  239 ----------
 .../src/test/resources/log4j.properties            |   25 -
 .../src/test/resources/lp/answer.txt               |    7
 .../src/test/resources/lp/tinySample.txt           |    2
 .../src/test/resources/lp/tpch_q12.txt             |   13 -
 .../test/resources/resourceEstimatorService.txt    |    2
 .../test/resources/resourceestimator-config.xml    |   85 ----
 .../src/test/resources/trace/invalidLog1.txt       |    4
 .../src/test/resources/trace/invalidLog2.txt       |    3
 .../src/test/resources/trace/invalidLog3.txt       |    5
 .../src/test/resources/trace/invalidLog4.txt       |    5
 .../src/test/resources/trace/invalidLog5.txt       |    7
 .../src/test/resources/trace/invalidLog6.txt       |    5
 .../src/test/resources/trace/invalidLog7.txt       |    5
 .../src/test/resources/trace/invalidLog8.txt       |    6
 .../src/test/resources/trace/invalidLog9.txt       |    6
 .../src/test/resources/trace/nativeLog.txt         |    1
 .../src/test/resources/trace/rmLog.txt             |   30 -
 hadoop-tools/hadoop-tools-dist/pom.xml             |    6
 hadoop-tools/pom.xml                               |    1
 109 files changed, 7150 deletions(-)
 delete mode 100644 hadoop-assemblies/src/main/resources/assemblies/hadoop-resourceestimator.xml
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/README.md
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/pom.xml
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/config/checkstyle.xml
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/bin/estimator.cmd
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/bin/estimator.sh
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/bin/start-estimator.cmd
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/bin/start-estimator.sh
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/bin/stop-estimator.cmd
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/bin/stop-estimator.sh
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/conf/resourceestimator-config.xml
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/data/resourceEstimatorService.txt
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/common/api/RecurrenceId.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/common/api/ResourceSkyline.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/common/api/package-info.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/common/config/ResourceEstimatorConfiguration.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/common/config/ResourceEstimatorUtil.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/common/config/package-info.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/common/exception/ResourceEstimatorException.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/common/exception/package-info.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/common/serialization/RLESparseResourceAllocationSerDe.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/common/serialization/ResourceSerDe.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/common/serialization/package-info.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/service/ResourceEstimatorServer.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/service/ResourceEstimatorService.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/service/ShutdownHook.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/service/package-info.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/api/HistorySkylineStore.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/api/PredictionSkylineStore.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/api/SkylineStore.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/api/package-info.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/exceptions/DuplicateRecurrenceIdException.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/exceptions/EmptyResourceSkylineException.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/exceptions/NullPipelineIdException.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/exceptions/NullRLESparseResourceAllocationException.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/exceptions/NullRecurrenceIdException.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/exceptions/NullResourceSkylineException.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/exceptions/RecurrenceIdNotFoundException.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/exceptions/SkylineStoreException.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/exceptions/package-info.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/impl/InMemoryStore.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/impl/package-info.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/validator/SkylineStoreValidator.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/validator/package-info.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/api/Solver.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/api/package-info.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/exceptions/InvalidInputException.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/exceptions/InvalidSolverException.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/exceptions/SolverException.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/exceptions/package-info.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/impl/BaseSolver.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/impl/LpSolver.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/impl/package-info.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/preprocess/SolverPreprocessor.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/preprocess/package-info.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/translator/api/JobMetaData.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/translator/api/LogParser.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/translator/api/SingleLineParser.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/translator/api/package-info.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/translator/exceptions/DataFieldNotFoundException.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/translator/exceptions/package-info.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/translator/impl/BaseLogParser.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/translator/impl/LogParserUtil.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/translator/impl/NativeSingleLineParser.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/translator/impl/RmSingleLineParser.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/translator/impl/package-info.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/translator/validator/ParserValidator.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/translator/validator/package-info.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/main/resources/webapps/ResourceEstimatorServer/.gitignore
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/site/markdown/ResourceEstimator.md
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/site/resources/css/site.css
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/site/resources/images/resourceestimator_arch.png
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/site/resources/images/tpch_history.png
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/site/resources/images/tpch_predict.png
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/common/api/TestResourceSkyline.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/common/serialization/TestHistorySkylineSerDe.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/common/serialization/TestResourceSerDe.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/common/serialization/TestResourceSkylineSerDe.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/common/serialization/package-info.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/service/GuiceServletConfig.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/service/TestResourceEstimatorService.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/skylinestore/impl/TestInMemoryStore.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/skylinestore/impl/TestSkylineStore.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/solver/impl/TestLpSolver.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/solver/impl/TestSolver.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/translator/api/TestJobMetaData.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/translator/impl/TestNativeParser.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/translator/impl/TestRmParser.java
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/test/resources/log4j.properties
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/test/resources/lp/answer.txt
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/test/resources/lp/tinySample.txt
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/test/resources/lp/tpch_q12.txt
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/test/resources/resourceEstimatorService.txt
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/test/resources/resourceestimator-config.xml
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/test/resources/trace/invalidLog1.txt
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/test/resources/trace/invalidLog2.txt
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/test/resources/trace/invalidLog3.txt
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/test/resources/trace/invalidLog4.txt
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/test/resources/trace/invalidLog5.txt
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/test/resources/trace/invalidLog6.txt
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/test/resources/trace/invalidLog7.txt
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/test/resources/trace/invalidLog8.txt
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/test/resources/trace/invalidLog9.txt
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/test/resources/trace/nativeLog.txt
 delete mode 100644 hadoop-tools/hadoop-resourceestimator/src/test/resources/trace/rmLog.txt

diff --git a/hadoop-assemblies/src/main/resources/assemblies/hadoop-resourceestimator.xml b/hadoop-assemblies/src/main/resources/assemblies/hadoop-resourceestimator.xml
deleted file mode 100644
index d1d941d60ad..00000000000
--- a/hadoop-assemblies/src/main/resources/assemblies/hadoop-resourceestimator.xml
+++ /dev/null
@@ -1,42 +0,0 @@
-<!--
-  Licensed to the Apache Software Foundation (ASF) under one
-  or more contributor license agreements.  See the NOTICE file
-  distributed with this work for additional information
-  regarding copyright ownership.  The ASF licenses this file
-  to you under the Apache License, Version 2.0 (the
-  "License"); you may not use this file except in compliance
-  with the License.  You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
--->
-<assembly xmlns="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.3"
-  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-  xsi:schemaLocation="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.3 http://maven.apache.org/xsd/assembly-1.1.3.xsd">
-  <id>hadoop-resourceestimator</id>
-  <formats>
-    <format>dir</format>
-  </formats>
-  <includeBaseDirectory>false</includeBaseDirectory>
-
-  <fileSets>
-    <fileSet>
-      <directory>${basedir}/src/main/bin</directory>
-      <outputDirectory>resourceestimator/bin</outputDirectory>
-      <fileMode>0755</fileMode>
-    </fileSet>
-    <fileSet>
-        <directory>${basedir}/src/main/conf</directory>
-        <outputDirectory>resourceestimator/conf</outputDirectory>
-    </fileSet>
-    <fileSet>
-        <directory>${basedir}/src/main/data</directory>
-        <outputDirectory>resourceestimator/data</outputDirectory>
-    </fileSet>
-  </fileSets>
- </assembly>
diff --git a/hadoop-assemblies/src/main/resources/assemblies/hadoop-tools.xml b/hadoop-assemblies/src/main/resources/assemblies/hadoop-tools.xml
index a63fabd7429..013f47479ef 100644
--- a/hadoop-assemblies/src/main/resources/assemblies/hadoop-tools.xml
+++ b/hadoop-assemblies/src/main/resources/assemblies/hadoop-tools.xml
@@ -94,17 +94,6 @@
       <directory>../hadoop-sls/target/hadoop-sls-${project.version}/sls</directory>
       <outputDirectory>/share/hadoop/${hadoop.component}/sls</outputDirectory>
     </fileSet>
-    <fileSet>
-      <directory>../hadoop-resourceestimator/target</directory>
-      <outputDirectory>/share/hadoop/${hadoop.component}/sources</outputDirectory>
-      <includes>
-        <include>*-sources.jar</include>
-      </includes>
-    </fileSet>
-    <fileSet>
-      <directory>../hadoop-resourceestimator/target/hadoop-resourceestimator-${project.version}/resourceestimator</directory>
-      <outputDirectory>/share/hadoop/${hadoop.component}/resourceestimator</outputDirectory>
-    </fileSet>
     <fileSet>
       <directory>../hadoop-aws/src/main/bin</directory>
       <outputDirectory>/bin</outputDirectory>
diff --git a/hadoop-project/src/site/site.xml b/hadoop-project/src/site/site.xml
index 05c8f152a4d..55ae67136f2 100644
--- a/hadoop-project/src/site/site.xml
+++ b/hadoop-project/src/site/site.xml
@@ -194,7 +194,6 @@
       <item name="DistCp" href="hadoop-distcp/DistCp.html"/>
       <item name="HDFS Federation Balance" href="hadoop-federation-balance/HDFSFederationBalance.html"/>
       <item name="Rumen" href="hadoop-rumen/Rumen.html"/>
-      <item name="Resource Estimator Service" href="hadoop-resourceestimator/ResourceEstimator.html"/>
       <item name="Scheduler Load Simulator" href="hadoop-sls/SchedulerLoadSimulator.html"/>
       <item name="Hadoop Benchmarking" href="hadoop-project-dist/hadoop-common/Benchmarking.html"/>
     </menu>
diff --git a/hadoop-tools/hadoop-resourceestimator/README.md b/hadoop-tools/hadoop-resourceestimator/README.md
deleted file mode 100644
index 1cb8cb54ea3..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/README.md
+++ /dev/null
@@ -1,19 +0,0 @@
-Resource Estimator Service
-==========================
-
-Resource Estimator Service can parse the history logs of production jobs, extract their resource consumption skylines in the past runs and predict their resource requirements for the new run.
-
-## Current Status
-
-  * Support [Hadoop YARN ResourceManager](http://hadoop.apache.org/docs/current/hadoop-yarn/hadoop-yarn-site/YARN.html) logs.
-  * In-memory store for parsed history resource skyline and estimation.
-  * A [Linear Programming](https://github.com/optimatika/ojAlgo) based estimator.
-  * Provides REST interface to parse logs, query history store and estimations.
-
-## Upcoming features
-
-  * UI to query history and edit and save estimations.
-  * Persisent store implementation for store (either DB based or distributed key-value like HBase).
-  * Integrate directly with the [Hadoop YARN Reservation System](http://hadoop.apache.org/docs/current/hadoop-yarn/hadoop-yarn-site/ReservationSystem.html) to make a recurring reservation based on the estimated resources.
-
-Refer to the [design document](https://issues.apache.org/jira/secure/attachment/12886714/ResourceEstimator-design-v1.pdf) for more details.
diff --git a/hadoop-tools/hadoop-resourceestimator/pom.xml b/hadoop-tools/hadoop-resourceestimator/pom.xml
deleted file mode 100644
index 8f6d83e276e..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/pom.xml
+++ /dev/null
@@ -1,192 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--
-  ~
-  ~ Licensed to the Apache Software Foundation (ASF) under one
-  ~ or more contributor license agreements.  See the NOTICE file
-  ~ distributed with this work for additional information
-  ~ regarding copyright ownership.  The ASF licenses this file
-  ~ to you under the Apache License, Version 2.0 (the
-  ~ "License"); you may not use this file except in compliance
-  ~ with the License.  You may obtain a copy of the License at
-  ~
-  ~     http://www.apache.org/licenses/LICENSE-2.0
-  ~
-  ~ Unless required by applicable law or agreed to in writing, software
-  ~ distributed under the License is distributed on an "AS IS" BASIS,
-  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  ~ See the License for the specific language governing permissions and
-  ~ limitations under the License.
-  ~
-  -->
-<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-         xmlns="http://maven.apache.org/POM/4.0.0"
-         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
-    <modelVersion>4.0.0</modelVersion>
-    <parent>
-        <groupId>org.apache.hadoop</groupId>
-        <artifactId>hadoop-project</artifactId>
-        <version>3.4.0</version>
-        <relativePath>../../hadoop-project</relativePath>
-    </parent>
-    <artifactId>hadoop-resourceestimator</artifactId>
-    <name>Apache Hadoop Resource Estimator Service</name>
-    <packaging>jar</packaging>
-    <dependencies>
-        <dependency>
-            <groupId>com.google.code.gson</groupId>
-            <artifactId>gson</artifactId>
-        </dependency>
-        <dependency>
-            <groupId>org.ojalgo</groupId>
-            <artifactId>ojalgo</artifactId>
-        </dependency>
-        <dependency>
-            <groupId>org.apache.hadoop</groupId>
-            <artifactId>hadoop-common</artifactId>
-        </dependency>
-        <dependency>
-            <groupId>org.apache.hadoop</groupId>
-            <artifactId>hadoop-yarn-common</artifactId>
-        </dependency>
-        <dependency>
-            <groupId>org.apache.hadoop</groupId>
-            <artifactId>hadoop-yarn-api</artifactId>
-        </dependency>
-        <dependency>
-            <groupId>org.apache.hadoop</groupId>
-            <artifactId>hadoop-yarn-server-resourcemanager</artifactId>
-        </dependency>
-        <dependency>
-            <groupId>org.slf4j</groupId>
-            <artifactId>slf4j-api</artifactId>
-        </dependency>
-        <dependency>
-            <groupId>javax.inject</groupId>
-            <artifactId>javax.inject</artifactId>
-            <version>1</version>
-        </dependency>
-        <dependency>
-            <groupId>com.sun.jersey.jersey-test-framework</groupId>
-            <artifactId>jersey-test-framework-grizzly2</artifactId>
-            <scope>test</scope>
-        </dependency>
-        <dependency>
-            <groupId>javax.servlet</groupId>
-            <artifactId>javax.servlet-api</artifactId>
-        </dependency>
-        <dependency>
-            <groupId>com.sun.jersey</groupId>
-            <artifactId>jersey-server</artifactId>
-        </dependency>
-        <dependency>
-            <groupId>com.github.pjfanning</groupId>
-            <artifactId>jersey-json</artifactId>
-            <exclusions>
-                <exclusion>
-                    <groupId>com.fasterxml.jackson.core</groupId>
-                    <artifactId>jackson-core</artifactId>
-                </exclusion>
-                <exclusion>
-                    <groupId>com.fasterxml.jackson.core</groupId>
-                    <artifactId>jackson-databind</artifactId>
-                </exclusion>
-                <exclusion>
-                    <groupId>com.fasterxml.jackson.jaxrs</groupId>
-                    <artifactId>jackson-jaxrs-json-provider</artifactId>
-                </exclusion>
-                <exclusion>
-                    <groupId>org.codehaus.jettison</groupId>
-                    <artifactId>jettison</artifactId>
-                </exclusion>
-            </exclusions>
-        </dependency>
-        <dependency>
-            <groupId>junit</groupId>
-            <artifactId>junit</artifactId>
-            <scope>test</scope>
-        </dependency>
-    </dependencies>
-    <build>
-        <plugins>
-            <plugin>
-                <groupId>org.apache.rat</groupId>
-                <artifactId>apache-rat-plugin</artifactId>
-                <configuration>
-                    <excludes>
-                        <exclude>README.md</exclude>
-                        <exclude>**/*.txt</exclude>
-                    </excludes>
-                </configuration>
-            </plugin>
-            <plugin>
-                <groupId>org.apache.maven.plugins</groupId>
-                <artifactId>maven-checkstyle-plugin</artifactId>
-                <configuration>
-                    <configLocation>src/config/checkstyle.xml</configLocation>
-                </configuration>
-            </plugin>
-        </plugins>
-    </build>
-
-    <profiles>
-        <profile>
-            <id>dist</id>
-            <activation>
-                <activeByDefault>false</activeByDefault>
-            </activation>
-            <build>
-                <plugins>
-                    <plugin>
-                        <groupId>org.apache.maven.plugins</groupId>
-                        <artifactId>maven-assembly-plugin</artifactId>
-                        <configuration>
-                            <appendAssemblyId>false</appendAssemblyId>
-                            <attach>false</attach>
-                            <finalName>
-                                ${project.artifactId}-${project.version}
-                            </finalName>
-                            <descriptorRefs>
-                                <descriptorRef>hadoop-resourceestimator
-                                </descriptorRef>
-                            </descriptorRefs>
-                        </configuration>
-                        <dependencies>
-                            <dependency>
-                                <groupId>org.apache.hadoop</groupId>
-                                <artifactId>hadoop-assemblies</artifactId>
-                                <version>${project.version}</version>
-                            </dependency>
-                        </dependencies>
-                        <executions>
-                            <execution>
-                                <id>dist</id>
-                                <phase>prepare-package</phase>
-                                <goals>
-                                    <goal>single</goal>
-                                </goals>
-                            </execution>
-                        </executions>
-                    </plugin>
-                    <plugin>
-                        <groupId>org.apache.maven.plugins</groupId>
-                        <artifactId>maven-dependency-plugin</artifactId>
-                        <executions>
-                            <execution>
-                                <id>deplist</id>
-                                <phase>compile</phase>
-                                <goals>
-                                    <goal>list</goal>
-                                </goals>
-                                <configuration>
-                                    <outputFile>
-                                        ${project.basedir}/target/hadoop-tools-deps/${project.artifactId}.tools-builtin.txt
-                                    </outputFile>
-                                </configuration>
-                            </execution>
-                        </executions>
-                    </plugin>
-                </plugins>
-            </build>
-        </profile>
-    </profiles>
-</project>
diff --git a/hadoop-tools/hadoop-resourceestimator/src/config/checkstyle.xml b/hadoop-tools/hadoop-resourceestimator/src/config/checkstyle.xml
deleted file mode 100644
index 646c7190f39..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/config/checkstyle.xml
+++ /dev/null
@@ -1,50 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!DOCTYPE module PUBLIC
-    "-//Checkstyle//DTD Checkstyle Configuration 1.2//EN"
-    "https://checkstyle.org/dtds/configuration_1_2.dtd">
-
-<!--
-  Licensed under the Apache License, Version 2.0 (the "License");
-  you may not use this file except in compliance with the License.
-  You may obtain a copy of the License at
-
-  http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
--->
-
-<!--
-  Checkstyle configuration that checks the sun coding conventions from:
-
-    - the Java Language Specification at
-      http://java.sun.com/docs/books/jls/second_edition/html/index.html
-
-    - the Sun Code Conventions at http://java.sun.com/docs/codeconv/
-
-    - the Javadoc guidelines at
-      http://java.sun.com/j2se/javadoc/writingdoccomments/index.html
-
-    - the JDK Api documentation http://java.sun.com/j2se/docs/api/index.html
-
-    - some best practices
-
-  Checkstyle is very configurable. Be sure to read the documentation at
-  http://checkstyle.sf.net (or in your downloaded distribution).
-
-  Most Checks are configurable, be sure to consult the documentation.
-  To completely disable a check, just comment it out or delete it from the file.
-  Finally, it is worth reading the documentation.
--->
-
-<module name="Checker">
-    <module name="TreeWalker">
-        <module name="AvoidNestedBlocks">
-            <property name="id" value="checkstyle:avoidnestedblocks"/>
-            <property name="allowInSwitchCase" value="true"/>
-        </module>
-    </module>
-</module>
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/bin/estimator.cmd b/hadoop-tools/hadoop-resourceestimator/src/main/bin/estimator.cmd
deleted file mode 100644
index 317025cda97..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/bin/estimator.cmd
+++ /dev/null
@@ -1,52 +0,0 @@
-@echo off
-@rem Licensed to the Apache Software Foundation (ASF) under one or more
-@rem contributor license agreements.  See the NOTICE file distributed with
-@rem this work for additional information regarding copyright ownership.
-@rem The ASF licenses this file to You under the Apache License, Version 2.0
-@rem (the "License"); you may not use this file except in compliance with
-@rem the License.  You may obtain a copy of the License at
-@rem
-@rem     http://www.apache.org/licenses/LICENSE-2.0
-@rem
-@rem Unless required by applicable law or agreed to in writing, software
-@rem distributed under the License is distributed on an "AS IS" BASIS,
-@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-@rem See the License for the specific language governing permissions and
-@rem limitations under the License.
-@rem
-
-setlocal enabledelayedexpansion
-
-if not defined HADOOP_BIN_PATH (
-  set HADOOP_BIN_PATH=%~dp0
-)
-
-if "%HADOOP_BIN_PATH:~-1%" == "\" (
-  set HADOOP_BIN_PATH=%HADOOP_BIN_PATH:~0,-1%
-)
-
-set DEFAULT_LIBEXEC_DIR=%HADOOP_BIN_PATH%\..\libexec
-if not defined HADOOP_LIBEXEC_DIR (
-  set HADOOP_LIBEXEC_DIR=%DEFAULT_LIBEXEC_DIR%
-)
-
-:main
-  @rem CLASSPATH initially contains HADOOP_CONF_DIR
-    if not defined HADOOP_CONF_DIR (
-      echo No HADOOP_CONF_DIR set.
-      echo Please specify it.
-      goto :eof
-    )
-
-  set CLASSPATH=%HADOOP_CONF_DIR%;%CLASSPATH%
-goto :eof
-
-:classpath
-  set CLASS=org.apache.hadoop.util.Classpath
-  goto :eof
-
-:resourceestimator
-  set CLASS=org.apache.hadoop.resourceestimator.service.ResourceEstimatorServer
-  goto :eof
-
-endlocal
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/bin/estimator.sh b/hadoop-tools/hadoop-resourceestimator/src/main/bin/estimator.sh
deleted file mode 100644
index 3e1ec278a9d..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/bin/estimator.sh
+++ /dev/null
@@ -1,71 +0,0 @@
-#!/usr/bin/env bash
-#
-#  Licensed under the Apache License, Version 2.0 (the "License");
-#  you may not use this file except in compliance with the License.
-#  You may obtain a copy of the License at
-#
-#    http://www.apache.org/licenses/LICENSE-2.0
-#
-#  Unless required by applicable law or agreed to in writing, software
-#  distributed under the License is distributed on an "AS IS" BASIS,
-#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-#  See the License for the specific language governing permissions and
-#  limitations under the License. See accompanying LICENSE file.
-#
-
-## @audience     public
-## @stability    stable
-function hadoop_usage()
-{
-  echo "Usage: estimator.sh"
- #hadoop-daemon.sh. need both start and stop, status (query the status). run as background process.
-}
-
-## @audience     public
-## @stability    stable
-function calculate_classpath
-{
-  hadoop_add_client_opts
-  hadoop_add_to_classpath_tools hadoop-resourceestimator
-}
-
-## @audience     public
-## @stability    stable
-function resourceestimatorcmd_case
-{
-  # shellcheck disable=SC2034
-  HADOOP_SUBCMD_SUPPORTDAEMONIZATION="true"
-  # shellcheck disable=SC2034
-  HADOOP_CLASSNAME='org.apache.hadoop.resourceestimator.service.ResourceEstimatorServer'
-}
-
-# let's locate libexec...
-if [[ -n "${HADOOP_HOME}" ]]; then
-  HADOOP_DEFAULT_LIBEXEC_DIR="${HADOOP_HOME}/libexec"
-else
-  this="${BASH_SOURCE-$0}"
-  bin=$(cd -P -- "$(dirname -- "${this}")" >/dev/null && pwd -P)
-  HADOOP_DEFAULT_LIBEXEC_DIR="${bin}/../../../../../libexec"
-fi
-
-HADOOP_LIBEXEC_DIR="${HADOOP_LIBEXEC_DIR:-$HADOOP_DEFAULT_LIBEXEC_DIR}"
-# shellcheck disable=SC2034
-HADOOP_NEW_CONFIG=true
-if [[ -f "${HADOOP_LIBEXEC_DIR}/hadoop-config.sh" ]]; then
-  # shellcheck source=./hadoop-common-project/hadoop-common/src/main/bin/hadoop-config.sh
-  . "${HADOOP_LIBEXEC_DIR}/hadoop-config.sh"
-else
-  echo "ERROR: Cannot execute ${HADOOP_LIBEXEC_DIR}/hadoop-config.sh." 2>&1
-  exit 1
-fi
-
-# get arguments
-HADOOP_SUBCMD=$1
-shift
-
-HADOOP_SUBCMD_ARGS=("$@")
-
-resourceestimatorcmd_case "${HADOOP_SUBCMD}" "${HADOOP_SUBCMD_ARGS[@]}"
-
-calculate_classpath
-hadoop_generic_java_subcmd_handler
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/bin/start-estimator.cmd b/hadoop-tools/hadoop-resourceestimator/src/main/bin/start-estimator.cmd
deleted file mode 100644
index 463e91c70ff..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/bin/start-estimator.cmd
+++ /dev/null
@@ -1,37 +0,0 @@
-@echo off
-@rem Licensed to the Apache Software Foundation (ASF) under one or more
-@rem contributor license agreements.  See the NOTICE file distributed with
-@rem this work for additional information regarding copyright ownership.
-@rem The ASF licenses this file to You under the Apache License, Version 2.0
-@rem (the "License"); you may not use this file except in compliance with
-@rem the License.  You may obtain a copy of the License at
-@rem
-@rem     http://www.apache.org/licenses/LICENSE-2.0
-@rem
-@rem Unless required by applicable law or agreed to in writing, software
-@rem distributed under the License is distributed on an "AS IS" BASIS,
-@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-@rem See the License for the specific language governing permissions and
-@rem limitations under the License.
-@rem
-setlocal enabledelayedexpansion
-
-echo starting resource estimator daemons
-
-if not defined HADOOP_BIN_PATH (
-  set HADOOP_BIN_PATH=%~dp0
-)
-
-if "%HADOOP_BIN_PATH:~-1%" == "\" (
-  set HADOOP_BIN_PATH=%HADOOP_BIN_PATH:~0,-1%
-)
-
-set DEFAULT_LIBEXEC_DIR=%HADOOP_BIN_PATH%\..\libexec
-if not defined HADOOP_LIBEXEC_DIR (
-  set HADOOP_LIBEXEC_DIR=%DEFAULT_LIBEXEC_DIR%
-)
-
-@rem start resource estimator
-start "Resource Estimator Service" estimator resourceestimator
-
-endlocal
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/bin/start-estimator.sh b/hadoop-tools/hadoop-resourceestimator/src/main/bin/start-estimator.sh
deleted file mode 100644
index bf4328adae2..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/bin/start-estimator.sh
+++ /dev/null
@@ -1,42 +0,0 @@
-#!/usr/bin/env bash
-#
-#  Licensed under the Apache License, Version 2.0 (the "License");
-#  you may not use this file except in compliance with the License.
-#  You may obtain a copy of the License at
-#
-#    http://www.apache.org/licenses/LICENSE-2.0
-#
-#  Unless required by applicable law or agreed to in writing, software
-#  distributed under the License is distributed on an "AS IS" BASIS,
-#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-#  See the License for the specific language governing permissions and
-#  limitations under the License. See accompanying LICENSE file.
-#
-
-# let's locate libexec...
-if [[ -n "${HADOOP_HOME}" ]]; then
-  HADOOP_DEFAULT_LIBEXEC_DIR="${HADOOP_HOME}/libexec"
-else
-  this="${BASH_SOURCE-$0}"
-  bin=$(cd -P -- "$(dirname -- "${this}")" >/dev/null && pwd -P)
-  HADOOP_DEFAULT_LIBEXEC_DIR="${bin}/../../../../../libexec"
-fi
-
-HADOOP_LIBEXEC_DIR="${HADOOP_LIBEXEC_DIR:-$HADOOP_DEFAULT_LIBEXEC_DIR}"
-# shellcheck disable=SC2034
-HADOOP_NEW_CONFIG=true
-if [[ -f "${HADOOP_LIBEXEC_DIR}/hadoop-config.sh" ]]; then
-  # shellcheck source=./hadoop-common-project/hadoop-common/src/main/bin/hadoop-config.sh
-  . "${HADOOP_LIBEXEC_DIR}/hadoop-config.sh"
-else
-  echo "ERROR: Cannot execute ${HADOOP_LIBEXEC_DIR}/hadoop-config.sh." 2>&1
-  exit 1
-fi
-
-# start resource estimator
-echo "Starting resource estimator"
-hadoop_uservar_su estimator resourceestimator "bin/estimator.sh" \
-    --config "${HADOOP_CONF_DIR}" \
-    --daemon start \
-    resourceestimator
-(( HADOOP_JUMBO_RETCOUNTER=HADOOP_JUMBO_RETCOUNTER + $? ))
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/bin/stop-estimator.cmd b/hadoop-tools/hadoop-resourceestimator/src/main/bin/stop-estimator.cmd
deleted file mode 100644
index e08c7e02382..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/bin/stop-estimator.cmd
+++ /dev/null
@@ -1,37 +0,0 @@
-@echo off
-@rem Licensed to the Apache Software Foundation (ASF) under one or more
-@rem contributor license agreements.  See the NOTICE file distributed with
-@rem this work for additional information regarding copyright ownership.
-@rem The ASF licenses this file to You under the Apache License, Version 2.0
-@rem (the "License"); you may not use this file except in compliance with
-@rem the License.  You may obtain a copy of the License at
-@rem
-@rem     http://www.apache.org/licenses/LICENSE-2.0
-@rem
-@rem Unless required by applicable law or agreed to in writing, software
-@rem distributed under the License is distributed on an "AS IS" BASIS,
-@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-@rem See the License for the specific language governing permissions and
-@rem limitations under the License.
-@rem
-setlocal enabledelayedexpansion
-
-echo stopping resource estimator daemons
-
-if not defined HADOOP_BIN_PATH (
-  set HADOOP_BIN_PATH=%~dp0
-)
-
-if "%HADOOP_BIN_PATH:~-1%" == "\" (
-  set HADOOP_BIN_PATH=%HADOOP_BIN_PATH:~0,-1%
-)
-
-set DEFAULT_LIBEXEC_DIR=%HADOOP_BIN_PATH%\..\libexec
-if not defined HADOOP_LIBEXEC_DIR (
-  set HADOOP_LIBEXEC_DIR=%DEFAULT_LIBEXEC_DIR%
-)
-
-@rem start resource estimator
-stop "Resource Estimator Service" estimator resourceestimator
-
-endlocal
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/bin/stop-estimator.sh b/hadoop-tools/hadoop-resourceestimator/src/main/bin/stop-estimator.sh
deleted file mode 100644
index e78c7983332..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/bin/stop-estimator.sh
+++ /dev/null
@@ -1,42 +0,0 @@
-#!/usr/bin/env bash
-#
-#  Licensed under the Apache License, Version 2.0 (the "License");
-#  you may not use this file except in compliance with the License.
-#  You may obtain a copy of the License at
-#
-#    http://www.apache.org/licenses/LICENSE-2.0
-#
-#  Unless required by applicable law or agreed to in writing, software
-#  distributed under the License is distributed on an "AS IS" BASIS,
-#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-#  See the License for the specific language governing permissions and
-#  limitations under the License. See accompanying LICENSE file.
-#
-
-# let's locate libexec...
-if [[ -n "${HADOOP_HOME}" ]]; then
-  HADOOP_DEFAULT_LIBEXEC_DIR="${HADOOP_HOME}/libexec"
-else
-  this="${BASH_SOURCE-$0}"
-  bin=$(cd -P -- "$(dirname -- "${this}")" >/dev/null && pwd -P)
-  HADOOP_DEFAULT_LIBEXEC_DIR="${bin}/../../../../../libexec"
-fi
-
-HADOOP_LIBEXEC_DIR="${HADOOP_LIBEXEC_DIR:-$HADOOP_DEFAULT_LIBEXEC_DIR}"
-# shellcheck disable=SC2034
-HADOOP_NEW_CONFIG=true
-if [[ -f "${HADOOP_LIBEXEC_DIR}/hadoop-config.sh" ]]; then
-  # shellcheck source=./hadoop-common-project/hadoop-common/src/main/bin/hadoop-config.sh
-  . "${HADOOP_LIBEXEC_DIR}/hadoop-config.sh"
-else
-  echo "ERROR: Cannot execute ${HADOOP_LIBEXEC_DIR}/hadoop-config.sh." 2>&1
-  exit 1
-fi
-
-# stop resource estimator
-echo "Stopping resource estimator"
-hadoop_uservar_su estimator resourceestimator "bin/estimator.sh" \
-    --config "${HADOOP_CONF_DIR}" \
-    --daemon stop \
-    resourceestimator
-(( HADOOP_JUMBO_RETCOUNTER=HADOOP_JUMBO_RETCOUNTER + $? ))
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/conf/resourceestimator-config.xml b/hadoop-tools/hadoop-resourceestimator/src/main/conf/resourceestimator-config.xml
deleted file mode 100644
index f78085a0abc..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/conf/resourceestimator-config.xml
+++ /dev/null
@@ -1,85 +0,0 @@
-<?xml version="1.0"?>
-<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
-<!--
-    Licensed to the Apache Software Foundation (ASF) under one
-    or more contributor license agreements.  See the NOTICE file
-    distributed with this work for additional information
-    regarding copyright ownership.  The ASF licenses this file
-    to you under the Apache License, Version 2.0 (the
-    "License"); you may not use this file except in compliance
-    with the License.  You may obtain a copy of the License at
-        http://www.apache.org/licenses/LICENSE-2.0
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-<configuration>
-    <property>
-        <name>resourceestimator.solver.lp.alpha</name>
-        <value>0.1</value>
-        <description>
-            The resource estimator has an integrated Linear Programming solver to make the prediction, and this parameter tunes the tradeoff between resource over-allocation and under-allocation in the Linear Programming model. This parameter varies from 0 to 1, and a larger alpha value means the model minimizes over-allocation better. Default value is 0.1.
-        </description>
-    </property>
-    <property>
-        <name>resourceestimator.solver.lp.beta</name>
-        <value>0.1</value>
-        <description>
-            This parameter controls the generalization of the Linear Programming model. This parameter varies from 0 to 1. Deafult value is 0.1.
-        </description>
-    </property>
-    <property>
-        <name>resourceestimator.solver.lp.minJobRuns</name>
-        <value>2</value>
-        <description>
-            The minimum number of job runs required in order to make the prediction. Default value is 2.
-        </description>
-    </property>
-    <property>
-        <name>resourceestimator.timeInterval</name>
-        <value>5</value>
-        <description>
-            The time length which is used to discretize job execution into intervals. Note that the estimator makes resource allocation prediction for each interval. A smaller time interval has more fine-grained granularity for prediction, but it also takes longer time and more space for prediction. Default value is 5 (seconds).
-        </description>
-    </property>
-    <property>
-        <name>resourceestimator.translator.line-parser</name>
-        <value>org.apache.hadoop.resourceestimator.translator.impl.NativeSingleLineParser</value>
-        <description>
-            The class name of the translator single-line parser, which parses a single line in the log. Default value is org.apache.hadoop.resourceestimator.translator.impl.NativeSingleLineParser, which can parse one line in the sample log. Note that if users want to parse Hadoop Resource Manager logs, they need to set the value to be org.apache.hadoop.resourceestimator.translator.impl.RmSingleLineParser. If they want to implement single-line parser to parse their customized log file, they need to change this value accordingly.
-        </description>
-    </property>
-    <!-- Optional configuration parameters -->
-    <!--
-    <property>
-        <name>resourceestimator.solver.provider</name>
-        <value>org.apache.hadoop.resourceestimator.solver.impl.LpSolver</value>
-        <description>
-            The class name of the solver provider. Default value is org.apache.hadoop.resourceestimator.solver.impl.LpSolver, which incorporates a Linear Programming model to make the prediction. If users want to implement their own models, they need to change this value accordingly.
-        </description>
-    </property>
-    <property>
-        <name>resourceestimator.skylinestore.provider</name>
-        <value>org.apache.hadoop.resourceestimator.skylinestore.impl.InMemoryStore</value>
-        <description>
-            The class name of the skylinestore provider. Default value is org.apache.hadoop.resourceestimator.skylinestore.impl.InMemoryStore, which is an in-memory implementation of skylinestore. If users want to use their own skylinestore implementation, they need to change this value accordingly.
-        </description>
-    </property>
-    <property>
-        <name>resourceestimator.translator.provider</name>
-        <value>org.apache.hadoop.resourceestimator.translator.impl.BaseLogParser</value>
-        <description>
-            The class name of the translator provider. Default value is org.apache.hadoop.resourceestimator.translator.impl.BaseLogParser, which extracts resourceskylines from log streams. If users want to use their own translator implementation, they need to change this value accordingly.
-        </description>
-    </property>
-    <property>
-        <name>resourceestimator.service-port</name>
-        <value>9998</value>
-        <description>
-            The port which ResourceEstimatorService listens to. The default value is 9998.
-        </description>
-    </property>
-    -->
-</configuration>
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/data/resourceEstimatorService.txt b/hadoop-tools/hadoop-resourceestimator/src/main/data/resourceEstimatorService.txt
deleted file mode 100644
index 15fb84e98c2..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/data/resourceEstimatorService.txt
+++ /dev/null
@@ -1,2 +0,0 @@
-tpch_q12 50 1462148517000 1462148527345 1462148952345 tpch_q12_0 8192:0| 1:0|1:5|1074:10|2538:15|2468:20|
-tpch_q12 50 1462148949000 1462148960455 1462149205455 tpch_q12_1 8192:0| 1:0|1:5|794:10|2517:15|2484:20|
\ No newline at end of file
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/common/api/RecurrenceId.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/common/api/RecurrenceId.java
deleted file mode 100644
index 01ef97725d8..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/common/api/RecurrenceId.java
+++ /dev/null
@@ -1,95 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.hadoop.resourceestimator.common.api;
-
-/**
- * RecurrenceId is the id for the recurring pipeline jobs.
- * <p> We assume that the pipeline job can be uniquely identified with
- * {pipelineId, runId}.
- */
-public class RecurrenceId {
-  /**
-   * pipelineId is the unique id for the pipeline jobs.
-   */
-  private String pipelineId;
-  /**
-   * runId is the unique instance id for the pipeline job in one run, and it
-   * will change across runs.
-   */
-  private String runId;
-  // TODO: we may addHistory more ids of the pipeline jobs to identify them.
-
-  /**
-   * Constructor.
-   *
-   * @param pipelineIdConfig the unique id for the pipeline jobs.
-   * @param runIdConfig the unique instance id for the pipeline job in one run.
-   */
-  public RecurrenceId(final String pipelineIdConfig, final String runIdConfig) {
-    this.pipelineId = pipelineIdConfig;
-    this.runId = runIdConfig;
-  }
-
-  /**
-   * Return the pipelineId for the pipeline jobs.
-   *
-   * @return the pipelineId.
-   */
-  public final String getPipelineId() {
-    return pipelineId;
-  }
-
-  public void setPipelineId(String pipelineId) {
-    this.pipelineId = pipelineId;
-  }
-
-  /**
-   * Return the runId for the pipeline job in one run.
-   *
-   * @return the runId.
-   */
-  public final String getRunId() {
-    return runId;
-  }
-
-  public void setRunId(String runId) {
-    this.runId = runId;
-  }
-
-  @Override public final String toString() {
-    return String.format("{pipelineId: %s, runId: %s}", pipelineId, runId);
-  }
-
-  @Override public final int hashCode() {
-    return getPipelineId().hashCode() ^ getRunId().hashCode();
-  }
-
-  @Override public final boolean equals(final Object obj) {
-    if (this == obj) {
-      return true;
-    }
-    if ((obj == null) || (getClass() != obj.getClass())) {
-      return false;
-    }
-    final RecurrenceId other = (RecurrenceId) obj;
-    return pipelineId.equals(other.pipelineId) && runId.equals(other.runId);
-  }
-}
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/common/api/ResourceSkyline.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/common/api/ResourceSkyline.java
deleted file mode 100644
index a4bc69f3584..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/common/api/ResourceSkyline.java
+++ /dev/null
@@ -1,211 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.hadoop.resourceestimator.common.api;
-
-import org.apache.hadoop.yarn.api.records.Resource;
-import org.apache.hadoop.yarn.server.resourcemanager.reservation.RLESparseResourceAllocation;
-
-/**
- * ResourceSkyline records the job identification information as well as job's
- * requested {@code
- * container}s information during its lifespan.
- */
-public class ResourceSkyline {
-  /**
-   * The auto-generated {@code ApplicationId} in job's one run.
-   * <p>
-   * <p>
-   * For a pipeline job, we assume the {@code jobId} changes each time we run
-   * the pipeline job.
-   */
-  private String jobId;
-  /**
-   * The input data size of the job.
-   */
-  private double jobInputDataSize;
-  /**
-   * Job submission time. Different logs could have different time format, so we
-   * store the original string directly extracted from logs.
-   */
-  private long jobSubmissionTime;
-  /**
-   * Job finish time. Different logs could have different time format, so we
-   * store the original string directly extracted from logs.
-   */
-  private long jobFinishTime;
-  /**
-   * The resource spec of containers allocated to the job.
-   */
-  private Resource containerSpec;
-  /**
-   * The list of {@link Resource} allocated to the job in its lifespan.
-   */
-  private RLESparseResourceAllocation skylineList;
-  // TODO
-  // We plan to record pipeline job's actual resource consumptions in one run
-  // here.
-  // TODO
-  // We might need to addHistory more features to the ResourceSkyline, such as
-  // users, VC, etc.
-
-  /**
-   * Constructor.
-   *
-   * @param jobIdConfig             the id of the job.
-   * @param jobInputDataSizeConfig  the input data size of the job.
-   * @param jobSubmissionTimeConfig the submission time of the job.
-   * @param jobFinishTimeConfig     the finish time of the job.
-   * @param containerSpecConfig     the resource spec of containers allocated
-   *                                to the job.
-   * @param skylineListConfig       the list of {@link Resource} allocated in
-   *                                one run.
-   */
-  public ResourceSkyline(final String jobIdConfig,
-      final double jobInputDataSizeConfig, final long jobSubmissionTimeConfig,
-      final long jobFinishTimeConfig, final Resource containerSpecConfig,
-      final RLESparseResourceAllocation skylineListConfig) {
-    this.jobId = jobIdConfig;
-    this.jobInputDataSize = jobInputDataSizeConfig;
-    this.jobSubmissionTime = jobSubmissionTimeConfig;
-    this.jobFinishTime = jobFinishTimeConfig;
-    this.containerSpec = containerSpecConfig;
-    this.skylineList = skylineListConfig;
-  }
-
-  /**
-   * Empty constructor.
-   */
-  public ResourceSkyline() {
-  }
-
-  /**
-   * Get the id of the job.
-   *
-   * @return the id of this job.
-   */
-  public final String getJobId() {
-    return jobId;
-  }
-
-  /**
-   * Set jobId.
-   *
-   * @param jobIdConfig jobId.
-   */
-  public final void setJobId(final String jobIdConfig) {
-    this.jobId = jobIdConfig;
-  }
-
-  /**
-   * Get the job's input data size.
-   *
-   * @return job's input data size.
-   */
-  public final double getJobInputDataSize() {
-    return jobInputDataSize;
-  }
-
-  /**
-   * Set jobInputDataSize.
-   *
-   * @param jobInputDataSizeConfig jobInputDataSize.
-   */
-  public final void setJobInputDataSize(final double jobInputDataSizeConfig) {
-    this.jobInputDataSize = jobInputDataSizeConfig;
-  }
-
-  /**
-   * Get the job's submission time.
-   *
-   * @return job's submission time.
-   */
-  public final long getJobSubmissionTime() {
-    return jobSubmissionTime;
-  }
-
-  /**
-   * Set jobSubmissionTime.
-   *
-   * @param jobSubmissionTimeConfig jobSubmissionTime.
-   */
-  public final void setJobSubmissionTime(final long jobSubmissionTimeConfig) {
-    this.jobSubmissionTime = jobSubmissionTimeConfig;
-  }
-
-  /**
-   * Get the job's finish time.
-   *
-   * @return job's finish time.
-   */
-  public final long getJobFinishTime() {
-    return jobFinishTime;
-  }
-
-  /**
-   * Set jobFinishTime.
-   *
-   * @param jobFinishTimeConfig jobFinishTime.
-   */
-  public final void setJobFinishTime(final long jobFinishTimeConfig) {
-    this.jobFinishTime = jobFinishTimeConfig;
-  }
-
-  /**
-   * Get the resource spec of the job's allocated {@code container}s.
-   * <p> Key assumption: during job's lifespan, its allocated {@code container}s
-   * have the same {@link Resource} spec.
-   *
-   * @return the {@link Resource} spec of the job's allocated
-   * {@code container}s.
-   */
-  public final Resource getContainerSpec() {
-    return containerSpec;
-  }
-
-  /**
-   * Set containerSpec.
-   *
-   * @param containerSpecConfig containerSpec.
-   */
-  public final void setContainerSpec(final Resource containerSpecConfig) {
-    this.containerSpec = containerSpecConfig;
-  }
-
-  /**
-   * Get the list of {@link Resource}s allocated to the job.
-   *
-   * @return the {@link RLESparseResourceAllocation} which contains the list of
-   * {@link Resource}s allocated to the job.
-   */
-  public final RLESparseResourceAllocation getSkylineList() {
-    return skylineList;
-  }
-
-  /**
-   * Set skylineList.
-   *
-   * @param skylineListConfig skylineList.
-   */
-  public final void setSkylineList(
-      final RLESparseResourceAllocation skylineListConfig) {
-    this.skylineList = skylineListConfig;
-  }
-}
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/common/api/package-info.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/common/api/package-info.java
deleted file mode 100644
index a7c752752c7..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/common/api/package-info.java
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * The common APIs for the resource estimator.
- */
-
-package org.apache.hadoop.resourceestimator.common.api;
\ No newline at end of file
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/common/config/ResourceEstimatorConfiguration.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/common/config/ResourceEstimatorConfiguration.java
deleted file mode 100644
index bb041b6745a..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/common/config/ResourceEstimatorConfiguration.java
+++ /dev/null
@@ -1,125 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.hadoop.resourceestimator.common.config;
-
-import org.apache.hadoop.resourceestimator.skylinestore.impl.InMemoryStore;
-import org.apache.hadoop.resourceestimator.solver.impl.LpSolver;
-import org.apache.hadoop.resourceestimator.translator.impl.BaseLogParser;
-import org.apache.hadoop.resourceestimator.translator.impl.NativeSingleLineParser;
-
-/**
- * Defines configuration keys for ResourceEstimatorServer.
- */
-public final class ResourceEstimatorConfiguration {
-
-  /**
-   * The location of the configuration file for ResourceEstimatorService.
-   */
-  public static final String CONFIG_FILE = "resourceestimator-config.xml";
-
-  /**
-   * The URI for ResourceEstimatorService.
-   */
-  public static final String SERVICE_URI = "http://0.0.0.0/";
-
-  /**
-   * The port which ResourceEstimatorService listens to.
-   */
-  public static final String SERVICE_PORT = "resourceestimator.service-port";
-
-  /**
-   * Default port number of ResourceEstimatorService.
-   */
-  public static final int DEFAULT_SERVICE_PORT = 9998;
-
-  /**
-   * The class name of the skylinestore provider.
-   */
-  public static final String SKYLINESTORE_PROVIDER =
-      "resourceestimator.skylinestore.provider";
-
-  /**
-   * Default value for skylinestore provider, which is an in-memory implementation of skylinestore.
-   */
-  public static final String DEFAULT_SKYLINESTORE_PROVIDER =
-      InMemoryStore.class.getName();
-
-  /**
-   * The class name of the translator provider.
-   */
-  public static final String TRANSLATOR_PROVIDER =
-      "resourceestimator.translator.provider";
-
-  /**
-   * Default value for translator provider, which extracts resourceskylines from log streams.
-   */
-  public static final String DEFAULT_TRANSLATOR_PROVIDER =
-      BaseLogParser.class.getName();
-
-  /**
-   * The class name of the translator single-line parser, which parses a single line in the log.
-   */
-  public static final String TRANSLATOR_LINE_PARSER =
-      "resourceestimator.translator.line-parser";
-
-  /**
-   * Default value for translator single-line parser, which can parse one line in the sample log.
-   */
-  public static final String DEFAULT_TRANSLATOR_LINE_PARSER =
-      NativeSingleLineParser.class.getName();
-
-  /**
-   * The class name of the solver provider.
-   */
-  public static final String SOLVER_PROVIDER =
-      "resourceestimator.solver.provider";
-
-  /**
-   * Default value for solver provider, which incorporates a Linear Programming model to make the prediction.
-   */
-  public static final String DEFAULT_SOLVER_PROVIDER = LpSolver.class.getName();
-
-  /**
-   * The time length which is used to discretize job execution into intervals.
-   */
-  public static final String TIME_INTERVAL_KEY =
-      "resourceestimator.timeInterval";
-
-  /**
-   * The parameter which tunes the tradeoff between resource over-allocation and under-allocation in the Linear Programming model.
-   */
-  public static final String SOLVER_ALPHA_KEY =
-      "resourceestimator.solver.lp.alpha";
-
-  /**
-   * This parameter which controls the generalization of the Linear Programming model.
-   */
-  public static final String SOLVER_BETA_KEY =
-      "resourceestimator.solver.lp.beta";
-
-  /**
-   * The minimum number of job runs required in order to make the prediction.
-   */
-  public static final String SOLVER_MIN_JOB_RUN_KEY =
-      "resourceestimator.solver.lp.minJobRuns";
-
-  private ResourceEstimatorConfiguration() {}
-}
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/common/config/ResourceEstimatorUtil.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/common/config/ResourceEstimatorUtil.java
deleted file mode 100644
index c00dd006898..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/common/config/ResourceEstimatorUtil.java
+++ /dev/null
@@ -1,81 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.hadoop.resourceestimator.common.config;
-
-import java.lang.reflect.Constructor;
-
-import org.apache.hadoop.conf.Configuration;
-import org.apache.hadoop.resourceestimator.common.exception.ResourceEstimatorException;
-
-/**
- * General resourceestimator utils.
- */
-public final class ResourceEstimatorUtil {
-
-  private static final Class<?>[] EMPTY_ARRAY = new Class[0];
-
-  private ResourceEstimatorUtil() {}
-
-  /**
-   * Helper method to create instances of Object using the class name specified
-   * in the configuration object.
-   *
-   * @param conf                the yarn configuration
-   * @param configuredClassName the configuration provider key
-   * @param defaultValue        the default implementation class
-   * @param type                the required interface/base class
-   * @param <T>                 The type of the instance to create
-   * @return the instances created
-   * @throws ResourceEstimatorException if the provider initialization fails.
-   */
-  @SuppressWarnings("unchecked") public static <T> T createProviderInstance(
-      Configuration conf, String configuredClassName, String defaultValue,
-      Class<T> type) throws ResourceEstimatorException {
-    String className = conf.get(configuredClassName);
-    if (className == null) {
-      className = defaultValue;
-    }
-    try {
-      Class<?> concreteClass = Class.forName(className);
-      if (type.isAssignableFrom(concreteClass)) {
-        Constructor<T> meth =
-            (Constructor<T>) concreteClass.getDeclaredConstructor(EMPTY_ARRAY);
-        meth.setAccessible(true);
-        return meth.newInstance();
-      } else {
-        StringBuilder errMsg = new StringBuilder();
-        errMsg.append("Class: ").append(className).append(" not instance of ")
-            .append(type.getCanonicalName());
-        throw new ResourceEstimatorException(errMsg.toString());
-      }
-    } catch (ClassNotFoundException e) {
-      StringBuilder errMsg = new StringBuilder();
-      errMsg.append("Could not instantiate : ").append(className)
-          .append(" due to exception: ").append(e.getCause());
-      throw new ResourceEstimatorException(errMsg.toString());
-    } catch (ReflectiveOperationException e) {
-      StringBuilder errMsg = new StringBuilder();
-      errMsg.append("Could not instantiate : ").append(className)
-          .append(" due to exception: ").append(e.getCause());
-      throw new ResourceEstimatorException(errMsg.toString());
-    }
-  }
-}
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/common/config/package-info.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/common/config/package-info.java
deleted file mode 100644
index ecf140a4834..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/common/config/package-info.java
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * The common configuration for the resource estimator.
- */
-
-package org.apache.hadoop.resourceestimator.common.config;
\ No newline at end of file
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/common/exception/ResourceEstimatorException.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/common/exception/ResourceEstimatorException.java
deleted file mode 100644
index ba5666d8b8d..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/common/exception/ResourceEstimatorException.java
+++ /dev/null
@@ -1,35 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.hadoop.resourceestimator.common.exception;
-
-/**
- * Exception thrown by ResourceEstimatorServer utility classes.
- */
-public class ResourceEstimatorException extends Exception {
-
-  public ResourceEstimatorException(String message) {
-    super(message);
-  }
-
-  public ResourceEstimatorException(String message, Exception ex) {
-    super(message, ex);
-  }
-}
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/common/exception/package-info.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/common/exception/package-info.java
deleted file mode 100644
index 6ebecb6d0d7..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/common/exception/package-info.java
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * The common exception for the resource estimator.
- */
-
-package org.apache.hadoop.resourceestimator.common.exception;
\ No newline at end of file
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/common/serialization/RLESparseResourceAllocationSerDe.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/common/serialization/RLESparseResourceAllocationSerDe.java
deleted file mode 100644
index 379dc3a71d5..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/common/serialization/RLESparseResourceAllocationSerDe.java
+++ /dev/null
@@ -1,77 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.hadoop.resourceestimator.common.serialization;
-
-import java.lang.reflect.Type;
-import java.util.NavigableMap;
-
-import org.apache.hadoop.yarn.api.records.Resource;
-import org.apache.hadoop.yarn.server.resourcemanager.reservation.RLESparseResourceAllocation;
-import org.apache.hadoop.yarn.util.resource.DefaultResourceCalculator;
-import org.apache.hadoop.yarn.util.resource.ResourceCalculator;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.reflect.TypeToken;
-
-/**
- * Serialize/deserialize RLESparseResourceAllocation object to/from JSON.
- */
-public class RLESparseResourceAllocationSerDe
-    implements JsonSerializer<RLESparseResourceAllocation>,
-    JsonDeserializer<RLESparseResourceAllocation> {
-  private static final String KEY = "resourceAllocation";
-  private final Gson gson =
-      new GsonBuilder().registerTypeAdapter(Resource.class, new ResourceSerDe())
-          .create();
-  private final Type type = new TypeToken<NavigableMap<Long, Resource>>() {
-  }.getType();
-  private final ResourceCalculator resourceCalculator =
-      new DefaultResourceCalculator();
-
-  @Override public final JsonElement serialize(
-      final RLESparseResourceAllocation resourceAllocation,
-      final Type typeOfSrc, final JsonSerializationContext context) {
-    NavigableMap<Long, Resource> myMap = resourceAllocation.getCumulative();
-    JsonObject jo = new JsonObject();
-    JsonElement element = gson.toJsonTree(myMap, type);
-    jo.add(KEY, element);
-
-    return jo;
-  }
-
-  @Override public final RLESparseResourceAllocation deserialize(
-      final JsonElement json, final Type typeOfT,
-      final JsonDeserializationContext context) throws JsonParseException {
-    NavigableMap<Long, Resource> resAllocation =
-        gson.fromJson(json.getAsJsonObject().get(KEY), type);
-    RLESparseResourceAllocation rleSparseResourceAllocation =
-        new RLESparseResourceAllocation(resAllocation, resourceCalculator);
-    return rleSparseResourceAllocation;
-  }
-}
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/common/serialization/ResourceSerDe.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/common/serialization/ResourceSerDe.java
deleted file mode 100644
index 22b079c971d..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/common/serialization/ResourceSerDe.java
+++ /dev/null
@@ -1,61 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.hadoop.resourceestimator.common.serialization;
-
-import java.lang.reflect.Type;
-
-import org.apache.hadoop.yarn.api.records.Resource;
-
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-
-/**
- * Serialize/deserialize Resource object to/from JSON.
- */
-public class ResourceSerDe
-    implements JsonSerializer<Resource>, JsonDeserializer<Resource> {
-  private static final String KEY1 = "memory";
-  private static final String KEY2 = "vcores";
-
-  @Override public final JsonElement serialize(final Resource resource,
-      final Type type, final JsonSerializationContext context) {
-    JsonObject jo = new JsonObject();
-    jo.addProperty(KEY1, resource.getMemorySize());
-    jo.addProperty(KEY2, resource.getVirtualCores());
-    return jo;
-  }
-
-  @Override public final Resource deserialize(final JsonElement json,
-      final Type type, final JsonDeserializationContext context)
-      throws JsonParseException {
-    JsonObject jo = json.getAsJsonObject();
-    long mem = jo.getAsJsonPrimitive(KEY1).getAsLong();
-    int vcore = jo.getAsJsonPrimitive(KEY2).getAsInt();
-    Resource resource = Resource.newInstance(mem, vcore);
-
-    return resource;
-  }
-}
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/common/serialization/package-info.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/common/serialization/package-info.java
deleted file mode 100644
index 06957b39a7e..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/common/serialization/package-info.java
+++ /dev/null
@@ -1,24 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-/**
- * SkylineStore serialization module.
- */
-package org.apache.hadoop.resourceestimator.common.serialization;
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/service/ResourceEstimatorServer.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/service/ResourceEstimatorServer.java
deleted file mode 100644
index 27a5864afdc..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/service/ResourceEstimatorServer.java
+++ /dev/null
@@ -1,146 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.hadoop.resourceestimator.service;
-
-import java.io.IOException;
-import java.net.URI;
-
-import javax.ws.rs.core.UriBuilder;
-
-import org.apache.hadoop.conf.Configuration;
-import org.apache.hadoop.http.HttpServer2;
-import org.apache.hadoop.resourceestimator.common.config.ResourceEstimatorConfiguration;
-import org.apache.hadoop.service.CompositeService;
-import org.apache.hadoop.util.ShutdownHookManager;
-import org.apache.hadoop.yarn.conf.YarnConfiguration;
-import org.apache.hadoop.yarn.webapp.GenericExceptionHandler;
-import org.apache.hadoop.yarn.webapp.YarnJacksonJaxbJsonProvider;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-/**
- * A simple embedded Hadoop HTTP server.
- */
-public final class ResourceEstimatorServer extends CompositeService {
-  private static final Logger LOGGER =
-      LoggerFactory.getLogger(ResourceEstimatorServer.class.getName());
-  private HttpServer2 webServer;
-  private static URI baseURI;
-
-  public ResourceEstimatorServer() {
-    super(ResourceEstimatorServer.class.getName());
-  }
-
-  private static URI getBaseURI(Configuration config) {
-    baseURI = UriBuilder.fromUri(ResourceEstimatorConfiguration.SERVICE_URI)
-        .port(getPort(config)).build();
-    return baseURI;
-  }
-
-  private static int getPort(Configuration config) {
-    return config.getInt(ResourceEstimatorConfiguration.SERVICE_PORT,
-        ResourceEstimatorConfiguration.DEFAULT_SERVICE_PORT);
-  }
-
-  @Override protected void serviceInit(Configuration conf) throws Exception {
-    super.serviceInit(conf);
-  }
-
-  @Override protected void serviceStart() throws Exception {
-    super.serviceStart();
-    startResourceEstimatorApp();
-  }
-
-  private void join() {
-    // keep the main thread that started the server up until it receives a stop
-    // signal
-    if (webServer != null) {
-      try {
-        webServer.join();
-      } catch (InterruptedException ignore) {
-      }
-    }
-  }
-
-  @Override protected void serviceStop() throws Exception {
-    if (webServer != null) {
-      webServer.stop();
-    }
-    super.serviceStop();
-  }
-
-  private void startResourceEstimatorApp() throws IOException {
-    Configuration config = new YarnConfiguration();
-    config.addResource(ResourceEstimatorConfiguration.CONFIG_FILE);
-    HttpServer2.Builder builder =
-        new HttpServer2.Builder().setName("ResourceEstimatorServer")
-            .setConf(config)
-            //.setFindPort(true)
-            .addEndpoint(getBaseURI(config));
-    webServer = builder.build();
-    webServer.addJerseyResourcePackage(
-        ResourceEstimatorService.class.getPackage().getName() + ";"
-            + GenericExceptionHandler.class.getPackage().getName() + ";"
-            + YarnJacksonJaxbJsonProvider.class.getPackage().getName(), "/*");
-    webServer.start();
-  }
-
-  /**
-   * Start embedded Hadoop HTTP server.
-   *
-   * @return an instance of the started HTTP server.
-   * @throws IOException in case there is an error while starting server.
-   */
-  static ResourceEstimatorServer startResourceEstimatorServer()
-      throws IOException, InterruptedException {
-    Configuration config = new YarnConfiguration();
-    config.addResource(ResourceEstimatorConfiguration.CONFIG_FILE);
-    ResourceEstimatorServer resourceEstimatorServer = null;
-    try {
-      resourceEstimatorServer = new ResourceEstimatorServer();
-      ShutdownHookManager.get().addShutdownHook(
-          new CompositeServiceShutdownHook(resourceEstimatorServer), 30);
-      resourceEstimatorServer.init(config);
-      resourceEstimatorServer.start();
-    } catch (Throwable t) {
-      LOGGER.error("Error starting ResourceEstimatorServer", t);
-    }
-
-    return resourceEstimatorServer;
-  }
-
-  public static void main(String[] args)
-      throws InterruptedException, IOException {
-    ResourceEstimatorServer server = startResourceEstimatorServer();
-    server.join();
-  }
-
-  /**
-   * Stop embedded Hadoop HTTP server.
-   *
-   * @throws Exception in case the HTTP server fails to shut down.
-   */
-  public void shutdown() throws Exception {
-    LOGGER.info("Stopping resourceestimator service at: {}.",
-        baseURI.toString());
-    webServer.stop();
-  }
-}
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/service/ResourceEstimatorService.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/service/ResourceEstimatorService.java
deleted file mode 100644
index 5d3aea4fdc5..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/service/ResourceEstimatorService.java
+++ /dev/null
@@ -1,234 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.hadoop.resourceestimator.service;
-
-import java.io.IOException;
-import java.io.InputStream;
-import java.lang.reflect.Type;
-import java.util.List;
-import java.util.Map;
-
-import javax.ws.rs.DELETE;
-import javax.ws.rs.GET;
-import javax.ws.rs.POST;
-import javax.ws.rs.Path;
-import javax.ws.rs.PathParam;
-import javax.ws.rs.Produces;
-import javax.ws.rs.core.MediaType;
-
-import com.sun.jersey.spi.resource.Singleton;
-import org.apache.hadoop.conf.Configuration;
-import org.apache.hadoop.resourceestimator.common.api.RecurrenceId;
-import org.apache.hadoop.resourceestimator.common.api.ResourceSkyline;
-import org.apache.hadoop.resourceestimator.common.config.ResourceEstimatorConfiguration;
-import org.apache.hadoop.resourceestimator.common.config.ResourceEstimatorUtil;
-import org.apache.hadoop.resourceestimator.common.exception.ResourceEstimatorException;
-import org.apache.hadoop.resourceestimator.common.serialization.RLESparseResourceAllocationSerDe;
-import org.apache.hadoop.resourceestimator.common.serialization.ResourceSerDe;
-import org.apache.hadoop.resourceestimator.skylinestore.api.SkylineStore;
-import org.apache.hadoop.resourceestimator.skylinestore.exceptions.SkylineStoreException;
-import org.apache.hadoop.resourceestimator.solver.api.Solver;
-import org.apache.hadoop.resourceestimator.solver.exceptions.SolverException;
-import org.apache.hadoop.resourceestimator.translator.api.LogParser;
-import org.apache.hadoop.resourceestimator.translator.impl.LogParserUtil;
-import org.apache.hadoop.yarn.api.records.Resource;
-import org.apache.hadoop.yarn.server.resourcemanager.reservation.RLESparseResourceAllocation;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.reflect.TypeToken;
-
-/**
- * Resource Estimator Service which provides a set of REST APIs for users to
- * use the estimation service.
- */
-@Singleton
-@Path("/resourceestimator") public class ResourceEstimatorService {
-  private static final Logger LOGGER =
-      LoggerFactory.getLogger(ResourceEstimatorService.class);
-  private final SkylineStore skylineStore;
-  private final Solver solver;
-  private final LogParser logParser;
-  private final LogParserUtil logParserUtil = new LogParserUtil();
-  private final Configuration config;
-  private final Gson gson;
-  private final Type rleType;
-  private final Type skylineStoreType;
-
-  public ResourceEstimatorService() throws ResourceEstimatorException {
-    try {
-      config = new Configuration();
-      config.addResource(ResourceEstimatorConfiguration.CONFIG_FILE);
-      skylineStore = ResourceEstimatorUtil.createProviderInstance(config,
-          ResourceEstimatorConfiguration.SKYLINESTORE_PROVIDER,
-          ResourceEstimatorConfiguration.DEFAULT_SKYLINESTORE_PROVIDER,
-          SkylineStore.class);
-      logParser = ResourceEstimatorUtil.createProviderInstance(config,
-          ResourceEstimatorConfiguration.TRANSLATOR_PROVIDER,
-          ResourceEstimatorConfiguration.DEFAULT_TRANSLATOR_PROVIDER,
-          LogParser.class);
-      logParser.init(config, skylineStore);
-      logParserUtil.setLogParser(logParser);
-      solver = ResourceEstimatorUtil.createProviderInstance(config,
-          ResourceEstimatorConfiguration.SOLVER_PROVIDER,
-          ResourceEstimatorConfiguration.DEFAULT_SOLVER_PROVIDER,
-          Solver.class);
-      solver.init(config, skylineStore);
-    } catch (Exception ex) {
-      LOGGER
-          .error("Server initialization failed due to: {}", ex.getMessage());
-      throw new ResourceEstimatorException(ex.getMessage(), ex);
-    }
-    gson = new GsonBuilder()
-        .registerTypeAdapter(Resource.class, new ResourceSerDe())
-        .registerTypeAdapter(RLESparseResourceAllocation.class,
-            new RLESparseResourceAllocationSerDe())
-        .enableComplexMapKeySerialization().create();
-    rleType = new TypeToken<RLESparseResourceAllocation>() {
-    }.getType();
-    skylineStoreType =
-        new TypeToken<Map<RecurrenceId, List<ResourceSkyline>>>() {
-        }.getType();
-  }
-
-  /**
-   * Parse the log file. See also {@link LogParser#parseStream(InputStream)}.
-   *
-   * @param logFile file/directory of the log to be parsed.
-   * @throws IOException                if fails to parse the log.
-   * @throws SkylineStoreException      if fails to addHistory to
-   *                                    {@link SkylineStore}.
-   * @throws ResourceEstimatorException if the {@link LogParser}
-   *     is not initialized.
-   */
-  @POST @Path("/translator/{logFile : .+}") public void parseFile(
-      @PathParam("logFile") String logFile)
-      throws IOException, SkylineStoreException, ResourceEstimatorException {
-    logParserUtil.parseLog(logFile);
-    LOGGER.debug("Parse logFile: {}.", logFile);
-  }
-
-  /**
-   * Get predicted {code Resource} allocation for the pipeline. If the
-   * prediction for the pipeline already exists in the {@link SkylineStore}, it
-   * will directly get the prediction from {@link SkylineStore}, otherwise it
-   * will call the {@link Solver} to make prediction, and store the predicted
-   * {code Resource} allocation to the {@link SkylineStore}. Note that invoking
-   * {@link Solver} could be a time-consuming operation.
-   *
-   * @param pipelineId the id of the pipeline.
-   * @return Json format of {@link RLESparseResourceAllocation}.
-   * @throws SolverException       if {@link Solver} fails;
-   * @throws SkylineStoreException if fails to get history
-   *     {@link ResourceSkyline} or predicted {code Resource} allocation
-   *     from {@link SkylineStore}.
-   */
-  @GET @Path("/estimator/{pipelineId}") @Produces(MediaType.APPLICATION_JSON)
-  public String getPrediction(
-      @PathParam(value = "pipelineId") String pipelineId)
-      throws SolverException, SkylineStoreException {
-    // first, try to grab the predicted resource allocation from the skyline
-    // store
-    RLESparseResourceAllocation result = skylineStore.getEstimation(pipelineId);
-    // if received resource allocation is null, then run the solver
-    if (result == null) {
-      RecurrenceId recurrenceId = new RecurrenceId(pipelineId, "*");
-      Map<RecurrenceId, List<ResourceSkyline>> jobHistory =
-          skylineStore.getHistory(recurrenceId);
-      result = solver.solve(jobHistory);
-    }
-    final String prediction = gson.toJson(result, rleType);
-    LOGGER.debug("Predict resource requests for pipelineId: {}." + pipelineId);
-
-    return prediction;
-  }
-
-  /**
-   * Get history {@link ResourceSkyline} from {@link SkylineStore}. This
-   * function supports the following special wildcard operations regarding
-   * {@link RecurrenceId}: If the {@code pipelineId} is "*", it will return all
-   * entries in the store; else, if the {@code runId} is "*", it will return all
-   * {@link ResourceSkyline}s belonging to the {@code pipelineId}; else, it will
-   * return all {@link ResourceSkyline}s belonging to the {{@code pipelineId},
-   * {@code runId}}. If the {@link RecurrenceId} does not exist, it will not do
-   * anything.
-   *
-   * @param pipelineId pipelineId of the history run.
-   * @param runId      runId of the history run.
-   * @return Json format of history {@link ResourceSkyline}s.
-   * @throws SkylineStoreException if fails to getHistory
-   *     {@link ResourceSkyline} from {@link SkylineStore}.
-   */
-  @GET @Path("/skylinestore/history/{pipelineId}/{runId}")
-  @Produces(MediaType.APPLICATION_JSON)
-  public String getHistoryResourceSkyline(
-      @PathParam("pipelineId") String pipelineId,
-      @PathParam("runId") String runId) throws SkylineStoreException {
-    RecurrenceId recurrenceId = new RecurrenceId(pipelineId, runId);
-    Map<RecurrenceId, List<ResourceSkyline>> jobHistory =
-        skylineStore.getHistory(recurrenceId);
-    final String skyline = gson.toJson(jobHistory, skylineStoreType);
-    LOGGER
-        .debug("Query the skyline store for recurrenceId: {}." + recurrenceId);
-
-    return skyline;
-  }
-
-  /**
-   * Get estimated {code Resource} allocation for the pipeline.
-   *
-   * @param pipelineId id of the pipeline.
-   * @return Json format of {@link RLESparseResourceAllocation}.
-   * @throws SkylineStoreException if fails to get estimated {code Resource}
-   *                               allocation from {@link SkylineStore}.
-   */
-  @GET @Path("/skylinestore/estimation/{pipelineId}")
-  @Produces(MediaType.APPLICATION_JSON)
-  public String getEstimatedResourceAllocation(
-      @PathParam("pipelineId") String pipelineId) throws SkylineStoreException {
-    RLESparseResourceAllocation result = skylineStore.getEstimation(pipelineId);
-    final String skyline = gson.toJson(result, rleType);
-    LOGGER.debug("Query the skyline store for pipelineId: {}." + pipelineId);
-
-    return skyline;
-  }
-
-  /**
-   * Delete history {@link ResourceSkyline}s from {@link SkylineStore}.
-   * <p> Note that for safety considerations, we only allow users to delete
-   * history {@link ResourceSkyline}s of one job run.
-   *
-   * @param pipelineId pipelineId of the history run.
-   * @param runId      runId runId of the history run.
-   * @throws SkylineStoreException if fails to deleteHistory
-   *                               {@link ResourceSkyline}s.
-   */
-  @DELETE @Path("/skylinestore/history/{pipelineId}/{runId}")
-  public void deleteHistoryResourceSkyline(
-      @PathParam("pipelineId") String pipelineId,
-      @PathParam("runId") String runId) throws SkylineStoreException {
-    RecurrenceId recurrenceId = new RecurrenceId(pipelineId, runId);
-    skylineStore.deleteHistory(recurrenceId);
-    LOGGER.info("Delete ResourceSkyline for recurrenceId: {}.", recurrenceId);
-  }
-}
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/service/ShutdownHook.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/service/ShutdownHook.java
deleted file mode 100644
index 23e1413fcad..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/service/ShutdownHook.java
+++ /dev/null
@@ -1,45 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.hadoop.resourceestimator.service;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-/**
- * Simple shutdown hook for {@link ResourceEstimatorServer}.
- */
-public class ShutdownHook extends Thread {
-  private static final Logger LOGGER =
-      LoggerFactory.getLogger(ShutdownHook.class);
-  private final ResourceEstimatorServer server;
-
-  ShutdownHook(ResourceEstimatorServer server) {
-    this.server = server;
-  }
-
-  public void run() {
-    try {
-      server.shutdown();
-    } catch (Exception e) {
-      LOGGER.error("HttpServer fails to shut down!");
-    }
-  }
-}
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/service/package-info.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/service/package-info.java
deleted file mode 100644
index 3571736c50f..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/service/package-info.java
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * Resource estimator service.
- */
-
-package org.apache.hadoop.resourceestimator.service;
\ No newline at end of file
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/api/HistorySkylineStore.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/api/HistorySkylineStore.java
deleted file mode 100644
index 8fe461937ae..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/api/HistorySkylineStore.java
+++ /dev/null
@@ -1,99 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.hadoop.resourceestimator.skylinestore.api;
-
-import java.util.List;
-import java.util.Map;
-
-import org.apache.hadoop.resourceestimator.common.api.RecurrenceId;
-import org.apache.hadoop.resourceestimator.common.api.ResourceSkyline;
-import org.apache.hadoop.resourceestimator.skylinestore.exceptions.SkylineStoreException;
-
-/**
- * HistorySkylineStore stores pipeline job's {@link ResourceSkyline}s in all
- * runs. {@code Estimator} will query the {@link ResourceSkyline}s for pipeline
- * jobs. {@code Parser} will parse various types of job logs, construct
- * {@link ResourceSkyline}s out of the logs and store them in the SkylineStore.
- */
-public interface HistorySkylineStore {
-  /**
-   * Add job's resource skyline to the <em>store</em> indexed by the job's
-   * {@link RecurrenceId}. {@link RecurrenceId} is used to identify recurring
-   * pipeline jobs, and we assume that {@code
-   * ResourceEstimatorServer} users will provide the correct
-   * {@link RecurrenceId}. <p> If {@link ResourceSkyline}s to be added contain
-   * <em>null</em> elements, the function will skip them.
-   *
-   * @param recurrenceId     the unique id of user's recurring pipeline jobs.
-   * @param resourceSkylines the list of {@link ResourceSkyline}s in one run.
-   * @throws SkylineStoreException if: (1) input parameters are invalid; (2)
-   *     {@link ResourceSkyline}s to be added contain some duplicate
-   *     {@link RecurrenceId}s which already exist in the
-   *     {@link HistorySkylineStore}.
-   */
-  void addHistory(RecurrenceId recurrenceId,
-      List<ResourceSkyline> resourceSkylines) throws SkylineStoreException;
-
-  /**
-   * Delete all {@link ResourceSkyline}s belonging to given
-   * {@link RecurrenceId}.
-   * <p> Note that for safety considerations, we only allow users to
-   * deleteHistory {@link ResourceSkyline}s of one job run.
-   *
-   * @param recurrenceId the unique id of user's recurring pipeline jobs.
-   * @throws SkylineStoreException if: (1) input parameters are invalid; (2)
-   *     recurrenceId does not exist in the {@link HistorySkylineStore}.
-   */
-  void deleteHistory(RecurrenceId recurrenceId) throws SkylineStoreException;
-
-  /**
-   * Update {@link RecurrenceId} with given {@link ResourceSkyline}s. This
-   * function will deleteHistory all the {@link ResourceSkyline}s belonging to
-   * the {@link RecurrenceId}, and re-insert the given {@link ResourceSkyline}s
-   * to the SkylineStore.
-   * <p> If {@link ResourceSkyline}s contain <em>null</em> elements,
-   * the function will skip them.
-   *
-   * @param recurrenceId     the unique id of the pipeline job.
-   * @param resourceSkylines the list of {@link ResourceSkyline}s in one run.
-   * @throws SkylineStoreException if: (1) input parameters are invalid; (2)
-   *     recurrenceId does not exist in the SkylineStore.
-   */
-  void updateHistory(RecurrenceId recurrenceId,
-      List<ResourceSkyline> resourceSkylines) throws SkylineStoreException;
-
-  /**
-   * Return all {@link ResourceSkyline}s belonging to {@link RecurrenceId}.
-   * <p> This function supports the following special wildcard operations
-   * regarding {@link RecurrenceId}: If the {@code pipelineId} is "*", it will
-   * return all entries in the store; else, if the {@code runId} is "*", it
-   * will return all {@link ResourceSkyline}s belonging to the
-   * {@code pipelineId}; else, it will return all {@link ResourceSkyline}s
-   * belonging to the {{@code pipelineId}, {@code runId}}. If the
-   * {@link RecurrenceId} does not exist, it will return <em>null</em>.
-   *
-   * @param recurrenceId the unique id of the pipeline job.
-   * @return all {@link ResourceSkyline}s belonging to the recurrenceId.
-   * @throws SkylineStoreException if recurrenceId is <em>null</em>.
-   */
-  Map<RecurrenceId, List<ResourceSkyline>> getHistory(RecurrenceId recurrenceId)
-      throws SkylineStoreException;
-}
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/api/PredictionSkylineStore.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/api/PredictionSkylineStore.java
deleted file mode 100644
index c3fedce47bc..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/api/PredictionSkylineStore.java
+++ /dev/null
@@ -1,60 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.hadoop.resourceestimator.skylinestore.api;
-
-import org.apache.hadoop.resourceestimator.skylinestore.exceptions.SkylineStoreException;
-import org.apache.hadoop.yarn.server.resourcemanager.reservation.RLESparseResourceAllocation;
-
-/**
- * PredictionSkylineStore stores the predicted
- * {@code RLESparseResourceAllocation} of a job as computed by the
- * {@code Estimator} based on the {@code ResourceSkyline}s of past executions in
- * the {@code HistorySkylineStore}.
- */
-public interface PredictionSkylineStore {
-
-  /**
-   * Add job's predicted {@code Resource} allocation to the <em>store</em>
-   * indexed by the {@code
-   * pipelineId}.
-   * <p> Note that right now we only keep the latest copy of predicted
-   * {@code Resource} allocation for the recurring pipeline.
-   *
-   * @param pipelineId       the id of the recurring pipeline.
-   * @param resourceOverTime the predicted {@code Resource} allocation for the
-   *                         pipeline.
-   * @throws SkylineStoreException if input parameters are invalid.
-   */
-  void addEstimation(String pipelineId,
-      RLESparseResourceAllocation resourceOverTime)
-      throws SkylineStoreException;
-
-  /**
-   * Return the predicted {@code Resource} allocation for the pipeline.
-   * <p> If the pipelineId does not exist, it will return <em>null</em>.
-   *
-   * @param pipelineId the unique id of the pipeline.
-   * @return the predicted {@code Resource} allocation for the pipeline.
-   * @throws SkylineStoreException if pipelineId is <em>null</em>.
-   */
-  RLESparseResourceAllocation getEstimation(String pipelineId)
-      throws SkylineStoreException;
-}
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/api/SkylineStore.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/api/SkylineStore.java
deleted file mode 100644
index f352ed4aa35..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/api/SkylineStore.java
+++ /dev/null
@@ -1,30 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.hadoop.resourceestimator.skylinestore.api;
-
-/**
- * SkylineStore is composable interface for storing the history
- * {@code ResourceSkyline}s of past job runs and the predicted
- * {@code RLESparseResourceAllocation} for future execution.
- */
-public interface SkylineStore
-    extends HistorySkylineStore, PredictionSkylineStore {
-}
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/api/package-info.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/api/package-info.java
deleted file mode 100644
index e8334860757..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/api/package-info.java
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * APIs for the {@code SkylineStore}.
- */
-
-package org.apache.hadoop.resourceestimator.skylinestore.api;
\ No newline at end of file
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/exceptions/DuplicateRecurrenceIdException.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/exceptions/DuplicateRecurrenceIdException.java
deleted file mode 100644
index 7c924809d04..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/exceptions/DuplicateRecurrenceIdException.java
+++ /dev/null
@@ -1,33 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.hadoop.resourceestimator.skylinestore.exceptions;
-
-/**
- * Exception thrown the {@code RecurrenceId} already exists in the
- * {@code SkylineStore}.
- */
-public class DuplicateRecurrenceIdException extends SkylineStoreException {
-  private static final long serialVersionUID = -684069387367879218L;
-
-  public DuplicateRecurrenceIdException(final String message) {
-    super(message);
-  }
-}
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/exceptions/EmptyResourceSkylineException.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/exceptions/EmptyResourceSkylineException.java
deleted file mode 100644
index 55a8fa7eb34..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/exceptions/EmptyResourceSkylineException.java
+++ /dev/null
@@ -1,33 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.hadoop.resourceestimator.skylinestore.exceptions;
-
-/**
- * Exception thrown if the @link{ResourceSkyline}s to be added to the
- * {@code SkylineStore} is empty.
- */
-public class EmptyResourceSkylineException extends SkylineStoreException {
-  private static final long serialVersionUID = -684069387367879218L;
-
-  public EmptyResourceSkylineException(final String message) {
-    super(message);
-  }
-}
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/exceptions/NullPipelineIdException.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/exceptions/NullPipelineIdException.java
deleted file mode 100644
index d48be7d61f4..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/exceptions/NullPipelineIdException.java
+++ /dev/null
@@ -1,32 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.hadoop.resourceestimator.skylinestore.exceptions;
-
-/**
- * Exception thrown when pipelineId to be added is <em>null</em>.
- */
-public class NullPipelineIdException extends SkylineStoreException {
-  private static final long serialVersionUID = -684069387367879218L;
-
-  public NullPipelineIdException(final String message) {
-    super(message);
-  }
-}
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/exceptions/NullRLESparseResourceAllocationException.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/exceptions/NullRLESparseResourceAllocationException.java
deleted file mode 100644
index 9aee0b69a1d..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/exceptions/NullRLESparseResourceAllocationException.java
+++ /dev/null
@@ -1,33 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.hadoop.resourceestimator.skylinestore.exceptions;
-
-/**
- * Exception thrown if the {@code ResourceSkyline} to be added is <em>null</em>.
- */
-public class NullRLESparseResourceAllocationException
-    extends SkylineStoreException {
-  private static final long serialVersionUID = -684069387367879218L;
-
-  public NullRLESparseResourceAllocationException(final String message) {
-    super(message);
-  }
-}
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/exceptions/NullRecurrenceIdException.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/exceptions/NullRecurrenceIdException.java
deleted file mode 100644
index 518c0650b5d..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/exceptions/NullRecurrenceIdException.java
+++ /dev/null
@@ -1,32 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.hadoop.resourceestimator.skylinestore.exceptions;
-
-/**
- * Exception thrown the {@code RecurrenceId} to be added is <em>null</em>.
- */
-public class NullRecurrenceIdException extends SkylineStoreException {
-  private static final long serialVersionUID = -684069387367879218L;
-
-  public NullRecurrenceIdException(final String message) {
-    super(message);
-  }
-}
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/exceptions/NullResourceSkylineException.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/exceptions/NullResourceSkylineException.java
deleted file mode 100644
index b70c7646a31..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/exceptions/NullResourceSkylineException.java
+++ /dev/null
@@ -1,32 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.hadoop.resourceestimator.skylinestore.exceptions;
-
-/**
- * Exception thrown if the {@code ResourceSkyline} to be added is <em>null</em>.
- */
-public class NullResourceSkylineException extends SkylineStoreException {
-  private static final long serialVersionUID = -684069387367879218L;
-
-  public NullResourceSkylineException(final String message) {
-    super(message);
-  }
-}
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/exceptions/RecurrenceIdNotFoundException.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/exceptions/RecurrenceIdNotFoundException.java
deleted file mode 100644
index b5e734dc49a..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/exceptions/RecurrenceIdNotFoundException.java
+++ /dev/null
@@ -1,33 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.hadoop.resourceestimator.skylinestore.exceptions;
-
-/**
- * Exception thrown if {@code RecurrenceId} is not found in the
- * {@code SkylineStore}.
- */
-public class RecurrenceIdNotFoundException extends SkylineStoreException {
-  private static final long serialVersionUID = -684069387367879218L;
-
-  public RecurrenceIdNotFoundException(final String message) {
-    super(message);
-  }
-}
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/exceptions/SkylineStoreException.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/exceptions/SkylineStoreException.java
deleted file mode 100644
index 751b5dd3111..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/exceptions/SkylineStoreException.java
+++ /dev/null
@@ -1,33 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.hadoop.resourceestimator.skylinestore.exceptions;
-
-/**
- * Exception thrown the @link{SkylineStore} or the {@code Estimator} tries to
- * addHistory or query pipeline job's resource skylines.
- */
-public abstract class SkylineStoreException extends Exception {
-  private static final long serialVersionUID = -684069387367879218L;
-
-  public SkylineStoreException(final String message) {
-    super(message);
-  }
-}
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/exceptions/package-info.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/exceptions/package-info.java
deleted file mode 100644
index 716e090c683..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/exceptions/package-info.java
+++ /dev/null
@@ -1,24 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-/**
- * SkylineStore exception module.
- */
-package org.apache.hadoop.resourceestimator.skylinestore.exceptions;
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/impl/InMemoryStore.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/impl/InMemoryStore.java
deleted file mode 100644
index e00f3a061e1..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/impl/InMemoryStore.java
+++ /dev/null
@@ -1,256 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.hadoop.resourceestimator.skylinestore.impl;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.concurrent.locks.Lock;
-import java.util.concurrent.locks.ReentrantReadWriteLock;
-
-import org.apache.hadoop.resourceestimator.common.api.RecurrenceId;
-import org.apache.hadoop.resourceestimator.common.api.ResourceSkyline;
-import org.apache.hadoop.resourceestimator.skylinestore.api.SkylineStore;
-import org.apache.hadoop.resourceestimator.skylinestore.exceptions.DuplicateRecurrenceIdException;
-import org.apache.hadoop.resourceestimator.skylinestore.exceptions.EmptyResourceSkylineException;
-import org.apache.hadoop.resourceestimator.skylinestore.exceptions.RecurrenceIdNotFoundException;
-import org.apache.hadoop.resourceestimator.skylinestore.exceptions.SkylineStoreException;
-import org.apache.hadoop.resourceestimator.skylinestore.validator.SkylineStoreValidator;
-import org.apache.hadoop.yarn.server.resourcemanager.reservation.RLESparseResourceAllocation;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-/**
- * An in-memory implementation of {@link SkylineStore}.
- */
-public class InMemoryStore implements SkylineStore {
-  private static final Logger LOGGER =
-      LoggerFactory.getLogger(InMemoryStore.class);
-  private final ReentrantReadWriteLock readWriteLock =
-      new ReentrantReadWriteLock();
-  private final Lock readLock = readWriteLock.readLock();
-  private final Lock writeLock = readWriteLock.writeLock();
-  private final SkylineStoreValidator inputValidator =
-      new SkylineStoreValidator();
-  /**
-   * A pipeline job's history {@link ResourceSkyline}s. TODO: we may flatten it
-   * out for quick access.
-   */
-  private final Map<RecurrenceId, List<ResourceSkyline>> skylineStore =
-      new HashMap<>(); // pipelineId, resource skyline
-  // Recurring pipeline's predicted {@link ResourceSkyline}s.
-  private final Map<String, RLESparseResourceAllocation> estimationStore =
-      new HashMap<>(); // pipelineId, ResourceSkyline
-
-  private List<ResourceSkyline> eliminateNull(
-      final List<ResourceSkyline> resourceSkylines) {
-    final List<ResourceSkyline> result = new ArrayList<>();
-    for (final ResourceSkyline resourceSkyline : resourceSkylines) {
-      if (resourceSkyline != null) {
-        result.add(resourceSkyline);
-      }
-    }
-    return result;
-  }
-
-  @Override public final void addHistory(final RecurrenceId recurrenceId,
-      final List<ResourceSkyline> resourceSkylines)
-      throws SkylineStoreException {
-    inputValidator.validate(recurrenceId, resourceSkylines);
-    writeLock.lock();
-    try {
-      // remove the null elements in the resourceSkylines
-      final List<ResourceSkyline> filteredInput =
-          eliminateNull(resourceSkylines);
-      if (filteredInput.size() > 0) {
-        if (skylineStore.containsKey(recurrenceId)) {
-          // if filteredInput has duplicate jobIds with existing skylines in the
-          // store,
-          // throw out an exception
-          final List<ResourceSkyline> jobHistory =
-              skylineStore.get(recurrenceId);
-          final List<String> oldJobIds = new ArrayList<>();
-          for (final ResourceSkyline resourceSkyline : jobHistory) {
-            oldJobIds.add(resourceSkyline.getJobId());
-          }
-          if (!oldJobIds.isEmpty()) {
-            for (ResourceSkyline elem : filteredInput) {
-              if (oldJobIds.contains(elem.getJobId())) {
-                StringBuilder errMsg = new StringBuilder();
-                errMsg.append(
-                    "Trying to addHistory duplicate resource skylines for "
-                        + recurrenceId
-                        + ". Use updateHistory function instead.");
-                LOGGER.error(errMsg.toString());
-                throw new DuplicateRecurrenceIdException(errMsg.toString());
-              }
-            }
-          }
-          skylineStore.get(recurrenceId).addAll(filteredInput);
-          LOGGER.info("Successfully addHistory new resource skylines for {}.",
-              recurrenceId);
-        } else {
-          skylineStore.put(recurrenceId, filteredInput);
-          LOGGER.info("Successfully addHistory new resource skylines for {}.",
-              recurrenceId);
-        }
-      }
-    } finally {
-      writeLock.unlock();
-    }
-  }
-
-  @Override public void addEstimation(String pipelineId,
-      RLESparseResourceAllocation resourceSkyline)
-      throws SkylineStoreException {
-    inputValidator.validate(pipelineId, resourceSkyline);
-    writeLock.lock();
-    try {
-      estimationStore.put(pipelineId, resourceSkyline);
-      LOGGER.info("Successfully add estimated resource allocation for {}.",
-          pipelineId);
-    } finally {
-      writeLock.unlock();
-    }
-  }
-
-  @Override public final void deleteHistory(final RecurrenceId recurrenceId)
-      throws SkylineStoreException {
-    inputValidator.validate(recurrenceId);
-    writeLock.lock();
-    try {
-      if (skylineStore.containsKey(recurrenceId)) {
-        skylineStore.remove(recurrenceId);
-        LOGGER.warn("Delete resource skylines for {}.", recurrenceId);
-      } else {
-        StringBuilder errMsg = new StringBuilder();
-        errMsg.append(
-            "Trying to deleteHistory non-existing recurring pipeline  "
-                + recurrenceId + "\'s resource skylines");
-        LOGGER.error(errMsg.toString());
-        throw new RecurrenceIdNotFoundException(errMsg.toString());
-      }
-    } finally {
-      writeLock.unlock();
-    }
-  }
-
-  @Override public final void updateHistory(final RecurrenceId recurrenceId,
-      final List<ResourceSkyline> resourceSkylines)
-      throws SkylineStoreException {
-    inputValidator.validate(recurrenceId, resourceSkylines);
-    writeLock.lock();
-    try {
-      if (skylineStore.containsKey(recurrenceId)) {
-        // remove the null elements in the resourceSkylines
-        List<ResourceSkyline> filteredInput = eliminateNull(resourceSkylines);
-        if (filteredInput.size() > 0) {
-          skylineStore.put(recurrenceId, filteredInput);
-          LOGGER.info("Successfully updateHistory resource skylines for {}.",
-              recurrenceId);
-        } else {
-          StringBuilder errMsg = new StringBuilder();
-          errMsg.append("Trying to updateHistory " + recurrenceId
-              + " with empty resource skyline");
-          LOGGER.error(errMsg.toString());
-          throw new EmptyResourceSkylineException(errMsg.toString());
-        }
-      } else {
-        StringBuilder errMsg = new StringBuilder();
-        errMsg.append(
-            "Trying to updateHistory non-existing resource skylines for "
-                + recurrenceId);
-        LOGGER.error(errMsg.toString());
-        throw new RecurrenceIdNotFoundException(errMsg.toString());
-      }
-    } finally {
-      writeLock.unlock();
-    }
-  }
-
-  @Override public final Map<RecurrenceId, List<ResourceSkyline>> getHistory(
-      final RecurrenceId recurrenceId) throws SkylineStoreException {
-    inputValidator.validate(recurrenceId);
-    readLock.lock();
-    try {
-      String pipelineId = recurrenceId.getPipelineId();
-      // User tries to getHistory all resource skylines in the skylineStore
-      if (pipelineId.equals("*")) {
-        LOGGER
-            .info("Successfully query resource skylines for {}.", recurrenceId);
-        return Collections.unmodifiableMap(skylineStore);
-      }
-      String runId = recurrenceId.getRunId();
-      Map<RecurrenceId, List<ResourceSkyline>> result =
-          new HashMap<RecurrenceId, List<ResourceSkyline>>();
-      // User tries to getHistory pipelineId's all resource skylines in the
-      // skylineStore
-      if (runId.equals("*")) {
-        // TODO: this for loop is expensive, so we may change the type of
-        // skylineStore to
-        // speed up this loop.
-        for (Map.Entry<RecurrenceId, List<ResourceSkyline>> entry : skylineStore
-            .entrySet()) {
-          RecurrenceId index = entry.getKey();
-          if (index.getPipelineId().equals(pipelineId)) {
-            result.put(index, entry.getValue());
-          }
-        }
-        if (result.size() > 0) {
-          LOGGER.info("Successfully query resource skylines for {}.",
-              recurrenceId);
-          return Collections.unmodifiableMap(result);
-        } else {
-          LOGGER.warn(
-              "Trying to getHistory non-existing resource skylines for {}.",
-              recurrenceId);
-          return null;
-        }
-      }
-      // User tries to getHistory {pipelineId, runId}'s resource skylines
-      if (skylineStore.containsKey(recurrenceId)) {
-        result.put(recurrenceId, skylineStore.get(recurrenceId));
-      } else {
-        LOGGER
-            .warn("Trying to getHistory non-existing resource skylines for {}.",
-                recurrenceId);
-        return null;
-      }
-      LOGGER.info("Successfully query resource skylines for {}.", recurrenceId);
-      return Collections.unmodifiableMap(result);
-    } finally {
-      readLock.unlock();
-    }
-  }
-
-  @Override public final RLESparseResourceAllocation getEstimation(
-      String pipelineId) throws SkylineStoreException {
-    inputValidator.validate(pipelineId);
-    readLock.lock();
-    try {
-      return estimationStore.get(pipelineId);
-    } finally {
-      readLock.unlock();
-    }
-  }
-}
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/impl/package-info.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/impl/package-info.java
deleted file mode 100644
index ffccd5de16a..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/impl/package-info.java
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * Implementation for {@code SkylineStore}.
- */
-
-package org.apache.hadoop.resourceestimator.skylinestore.impl;
\ No newline at end of file
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/validator/SkylineStoreValidator.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/validator/SkylineStoreValidator.java
deleted file mode 100644
index f5f50f5eaf8..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/validator/SkylineStoreValidator.java
+++ /dev/null
@@ -1,118 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.hadoop.resourceestimator.skylinestore.validator;
-
-import java.util.List;
-
-import org.apache.hadoop.resourceestimator.common.api.RecurrenceId;
-import org.apache.hadoop.resourceestimator.common.api.ResourceSkyline;
-import org.apache.hadoop.resourceestimator.skylinestore.api.SkylineStore;
-import org.apache.hadoop.resourceestimator.skylinestore.exceptions.NullPipelineIdException;
-import org.apache.hadoop.resourceestimator.skylinestore.exceptions.NullRLESparseResourceAllocationException;
-import org.apache.hadoop.resourceestimator.skylinestore.exceptions.NullRecurrenceIdException;
-import org.apache.hadoop.resourceestimator.skylinestore.exceptions.NullResourceSkylineException;
-import org.apache.hadoop.resourceestimator.skylinestore.exceptions.SkylineStoreException;
-import org.apache.hadoop.yarn.server.resourcemanager.reservation.RLESparseResourceAllocation;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-/**
- * SkylineStoreValidator validates input parameters for {@link SkylineStore}.
- */
-public class SkylineStoreValidator {
-  private static final Logger LOGGER =
-      LoggerFactory.getLogger(SkylineStoreValidator.class);
-
-  /**
-   * Check if recurrenceId is <em>null</em>.
-   *
-   * @param recurrenceId the id of the recurring pipeline job.
-   * @throws SkylineStoreException if input parameters are invalid.
-   */
-  public final void validate(final RecurrenceId recurrenceId)
-      throws SkylineStoreException {
-    if (recurrenceId == null) {
-      StringBuilder sb = new StringBuilder();
-      sb.append("Recurrence id is null, please try again by specifying"
-          + " a valid Recurrence id.");
-      LOGGER.error(sb.toString());
-      throw new NullRecurrenceIdException(sb.toString());
-    }
-  }
-
-  /**
-   * Check if pipelineId is <em>null</em>.
-   *
-   * @param pipelineId the id of the recurring pipeline job.
-   * @throws SkylineStoreException if input parameters are invalid.
-   */
-  public final void validate(final String pipelineId)
-      throws SkylineStoreException {
-    if (pipelineId == null) {
-      StringBuilder sb = new StringBuilder();
-      sb.append("pipelineId is null, please try again by specifying"
-          + " a valid pipelineId.");
-      LOGGER.error(sb.toString());
-      throw new NullPipelineIdException(sb.toString());
-    }
-  }
-
-  /**
-   * Check if recurrenceId is <em>null</em> or resourceSkylines is
-   * <em>null</em>.
-   *
-   * @param recurrenceId     the id of the recurring pipeline job.
-   * @param resourceSkylines the list of {@link ResourceSkyline}s to be added.
-   * @throws SkylineStoreException if input parameters are invalid.
-   */
-  public final void validate(final RecurrenceId recurrenceId,
-      final List<ResourceSkyline> resourceSkylines)
-      throws SkylineStoreException {
-    validate(recurrenceId);
-    if (resourceSkylines == null) {
-      StringBuilder sb = new StringBuilder();
-      sb.append("ResourceSkylines for " + recurrenceId
-          + " is null, please try again by "
-          + "specifying valid ResourceSkylines.");
-      LOGGER.error(sb.toString());
-      throw new NullResourceSkylineException(sb.toString());
-    }
-  }
-
-  /**
-   * Check if pipelineId is <em>null</em> or resourceOverTime is <em>null</em>.
-   *
-   * @param pipelineId       the id of the recurring pipeline.
-   * @param resourceOverTime predicted {@code Resource} allocation to be added.
-   * @throws SkylineStoreException if input parameters are invalid.
-   */
-  public final void validate(final String pipelineId,
-      final RLESparseResourceAllocation resourceOverTime)
-      throws SkylineStoreException {
-    validate(pipelineId);
-    if (resourceOverTime == null) {
-      StringBuilder sb = new StringBuilder();
-      sb.append("Resource allocation for " + pipelineId + " is null.");
-      LOGGER.error(sb.toString());
-      throw new NullRLESparseResourceAllocationException(sb.toString());
-    }
-  }
-}
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/validator/package-info.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/validator/package-info.java
deleted file mode 100644
index 23d67c50bc1..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/validator/package-info.java
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * Validator for {@code SkylineStore}.
- */
-
-package org.apache.hadoop.resourceestimator.skylinestore.validator;
\ No newline at end of file
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/api/Solver.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/api/Solver.java
deleted file mode 100644
index 7958a6f29cd..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/api/Solver.java
+++ /dev/null
@@ -1,76 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.hadoop.resourceestimator.solver.api;
-
-import java.util.List;
-import java.util.Map;
-
-import org.apache.hadoop.conf.Configuration;
-import org.apache.hadoop.resourceestimator.common.api.RecurrenceId;
-import org.apache.hadoop.resourceestimator.common.api.ResourceSkyline;
-import org.apache.hadoop.resourceestimator.skylinestore.api.PredictionSkylineStore;
-import org.apache.hadoop.resourceestimator.skylinestore.exceptions.SkylineStoreException;
-import org.apache.hadoop.resourceestimator.solver.exceptions.SolverException;
-import org.apache.hadoop.yarn.api.records.Resource;
-import org.apache.hadoop.yarn.server.resourcemanager.reservation.RLESparseResourceAllocation;
-
-/**
- * Solver takes recurring pipeline's {@link ResourceSkyline} history as input,
- * predicts its {@link Resource} requirement at each time t for the next run,
- * and translate them into {@link ResourceSkyline} which will be used to make
- * recurring resource reservations.
- */
-public interface Solver {
-  /**
-   * Initializing the Solver, including loading solver parameters from
-   * configuration file.
-   *
-   * @param config       {@link Configuration} for the Solver.
-   * @param skylineStore the {@link PredictionSkylineStore} which stores
-   *                     predicted {@code Resource} allocations.
-   */
-  void init(Configuration config, PredictionSkylineStore skylineStore);
-
-  /**
-   * The Solver reads recurring pipeline's {@link ResourceSkyline} history, and
-   * precits its {@link ResourceSkyline} requirements for the next run.
-   *
-   * @param jobHistory the {@link ResourceSkyline}s of the recurring pipeline in
-   *     previous runs. The {@link RecurrenceId} identifies one run of the
-   *     recurring pipeline, and the list of {@link ResourceSkyline}s
-   *     records the {@link ResourceSkyline} of each job within the pipeline.
-   * @return the amount of {@link Resource} requested by the pipeline for the
-   * next run (discretized by timeInterval).
-   * @throws SolverException       if: (1) input is invalid; (2) the number of
-   *     instances in the jobHistory is smaller than the minimum
-   *     requirement; (3) solver runtime has unexpected behaviors;
-   * @throws SkylineStoreException if it fails to add predicted {@code Resource}
-   *     allocation to the {@link PredictionSkylineStore}.
-   */
-  RLESparseResourceAllocation solve(
-      Map<RecurrenceId, List<ResourceSkyline>> jobHistory)
-      throws SolverException, SkylineStoreException;
-
-  /**
-   * Release the resource used by the Solver.
-   */
-  void close();
-}
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/api/package-info.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/api/package-info.java
deleted file mode 100644
index fc8363d8510..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/api/package-info.java
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * API for {@code Solver}.
- */
-
-package org.apache.hadoop.resourceestimator.solver.api;
\ No newline at end of file
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/exceptions/InvalidInputException.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/exceptions/InvalidInputException.java
deleted file mode 100644
index ff51f5fd53b..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/exceptions/InvalidInputException.java
+++ /dev/null
@@ -1,34 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.hadoop.resourceestimator.solver.exceptions;
-
-/**
- * Exception thrown the {@code SkylineStore} or the {@code Estimator} tries to
- * addHistory or query pipeline job's resource skylines.
- */
-public class InvalidInputException extends SolverException {
-
-  private static final long serialVersionUID = -684069387367879218L;
-
-  public InvalidInputException(final String entity, final String reason) {
-    super(entity + " is " + reason + ", please try again with valid " + entity);
-  }
-}
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/exceptions/InvalidSolverException.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/exceptions/InvalidSolverException.java
deleted file mode 100644
index 9b614b6fa0c..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/exceptions/InvalidSolverException.java
+++ /dev/null
@@ -1,34 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.hadoop.resourceestimator.solver.exceptions;
-
-/**
- * Exception thrown the @link{SkylineStore} or the {@code Estimator} tries to
- * addHistory or query pipeline job's resource skylines.
- */
-public class InvalidSolverException extends SolverException {
-
-  private static final long serialVersionUID = -684069387367879218L;
-
-  public InvalidSolverException(final String message) {
-    super(message);
-  }
-}
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/exceptions/SolverException.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/exceptions/SolverException.java
deleted file mode 100644
index 57507eaac07..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/exceptions/SolverException.java
+++ /dev/null
@@ -1,34 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.hadoop.resourceestimator.solver.exceptions;
-
-/**
- * Exception thrown the @link{SkylineStore} or the {@code Estimator} tries to
- * addHistory or query pipeline job's resource skylines.
- */
-public abstract class SolverException extends Exception {
-
-  private static final long serialVersionUID = -684069387367879218L;
-
-  public SolverException(final String message) {
-    super(message);
-  }
-}
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/exceptions/package-info.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/exceptions/package-info.java
deleted file mode 100644
index bd4532428cd..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/exceptions/package-info.java
+++ /dev/null
@@ -1,24 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-/**
- * Exception module.
- */
-package org.apache.hadoop.resourceestimator.solver.exceptions;
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/impl/BaseSolver.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/impl/BaseSolver.java
deleted file mode 100644
index 55abb1c9081..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/impl/BaseSolver.java
+++ /dev/null
@@ -1,94 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.hadoop.resourceestimator.solver.impl;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Random;
-
-import org.apache.hadoop.conf.Configuration;
-import org.apache.hadoop.resourceestimator.common.config.ResourceEstimatorConfiguration;
-import org.apache.hadoop.yarn.api.protocolrecords.ReservationSubmissionRequest;
-import org.apache.hadoop.yarn.api.records.ReservationDefinition;
-import org.apache.hadoop.yarn.api.records.ReservationId;
-import org.apache.hadoop.yarn.api.records.ReservationRequest;
-import org.apache.hadoop.yarn.api.records.ReservationRequestInterpreter;
-import org.apache.hadoop.yarn.api.records.ReservationRequests;
-import org.apache.hadoop.yarn.api.records.Resource;
-import org.apache.hadoop.yarn.server.resourcemanager.reservation.RLESparseResourceAllocation;
-
-/**
- * Common functions shared by {@code Solver} (translate predicted resource
- * allocation into Hadoop's {@link ReservationSubmissionRequest}.
- */
-public abstract class BaseSolver {
-  /**
-   * Used to generate {@link ReservationId}.
-   */
-  private static final Random RAND = new Random();
-
-  /**
-   * Translate the estimated {@link Resource} requirements of the pipeline to
-   * Hadoop's {@link ReservationSubmissionRequest}.
-   *
-   * @param containerSpec     the {@link Resource} to be allocated to each
-   *                          container;
-   * @param containerRequests the predicted {@link Resource} to be allocated to
-   *                          the job in each discrete time intervals;
-   * @param config            configuration file for BaseSolver.
-   * @return {@link ReservationSubmissionRequest} to be submitted to Hadoop to
-   * make recurring resource reservation for the pipeline.
-   */
-  public final ReservationSubmissionRequest toRecurringRDL(
-      final Resource containerSpec,
-      final RLESparseResourceAllocation containerRequests,
-      final Configuration config) {
-    final int timeInterval =
-        config.getInt(ResourceEstimatorConfiguration.TIME_INTERVAL_KEY, 5);
-    long pipelineSubmissionTime = containerRequests.getEarliestStartTime();
-    long pipelineFinishTime = containerRequests.getLatestNonNullTime();
-    final long containerMemAlloc = containerSpec.getMemorySize();
-    final long jobLen =
-        (pipelineFinishTime - pipelineSubmissionTime) / timeInterval;
-    List<ReservationRequest> reservationRequestList = new ArrayList<>();
-    for (int i = 0; i < jobLen; i++) {
-      // container spec, # of containers, concurrency, duration
-      ReservationRequest reservationRequest = ReservationRequest
-          .newInstance(containerSpec, (int) (
-              containerRequests.getCapacityAtTime(i * timeInterval)
-                  .getMemorySize() / containerMemAlloc), 1, timeInterval);
-      reservationRequestList.add(reservationRequest);
-    }
-    ReservationRequests reservationRequests = ReservationRequests
-        .newInstance(reservationRequestList,
-            ReservationRequestInterpreter.R_ALL);
-    ReservationDefinition reservationDefinition = ReservationDefinition
-        .newInstance(pipelineSubmissionTime, pipelineFinishTime,
-            reservationRequests, "LpSolver#toRecurringRDL");
-    ReservationId reservationId =
-        ReservationId.newInstance(RAND.nextLong(), RAND.nextLong());
-    ReservationSubmissionRequest reservationSubmissionRequest =
-        ReservationSubmissionRequest
-            .newInstance(reservationDefinition, "resourceestimator",
-                reservationId);
-    return reservationSubmissionRequest;
-  }
-}
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/impl/LpSolver.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/impl/LpSolver.java
deleted file mode 100644
index c944d20ae9b..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/impl/LpSolver.java
+++ /dev/null
@@ -1,340 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.hadoop.resourceestimator.solver.impl;
-
-import java.math.BigDecimal;
-import java.util.List;
-import java.util.Map;
-import java.util.TreeMap;
-
-import org.apache.hadoop.conf.Configuration;
-import org.apache.hadoop.resourceestimator.common.api.RecurrenceId;
-import org.apache.hadoop.resourceestimator.common.api.ResourceSkyline;
-import org.apache.hadoop.resourceestimator.common.config.ResourceEstimatorConfiguration;
-import org.apache.hadoop.resourceestimator.skylinestore.api.PredictionSkylineStore;
-import org.apache.hadoop.resourceestimator.skylinestore.exceptions.SkylineStoreException;
-import org.apache.hadoop.resourceestimator.solver.api.Solver;
-import org.apache.hadoop.resourceestimator.solver.exceptions.SolverException;
-import org.apache.hadoop.resourceestimator.solver.preprocess.SolverPreprocessor;
-import org.apache.hadoop.yarn.api.records.Resource;
-import org.apache.hadoop.yarn.server.resourcemanager.reservation.RLESparseResourceAllocation;
-import org.apache.hadoop.yarn.server.resourcemanager.reservation.ReservationInterval;
-import org.apache.hadoop.yarn.util.resource.DefaultResourceCalculator;
-import org.ojalgo.optimisation.Expression;
-import org.ojalgo.optimisation.ExpressionsBasedModel;
-import org.ojalgo.optimisation.Optimisation.Result;
-import org.ojalgo.optimisation.Variable;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-/**
- * A LP(Linear Programming) solution to predict recurring pipeline's
- * {@link Resource} requirements, and generate Hadoop {@code RDL} requests which
- * will be used to make recurring resource reservation.
- */
-public class LpSolver extends BaseSolver implements Solver {
-  private static final Logger LOGGER = LoggerFactory.getLogger(LpSolver.class);
-  private final SolverPreprocessor preprocessor = new SolverPreprocessor();
-  /**
-   * Controls the balance between over-allocation and under-allocation.
-   */
-  private double alpha;
-  /**
-   * Controls the generalization of the solver.
-   */
-  private double beta;
-  /**
-   * The minimum number of job runs required to run the solver.
-   */
-  private int minJobRuns;
-  /**
-   * The time interval which is used to discretize job execution.
-   */
-  private int timeInterval;
-  /**
-   * The PredictionSkylineStore to store the predicted ResourceSkyline for new
-   * run.
-   */
-  private PredictionSkylineStore predictionSkylineStore;
-
-  @Override public final void init(final Configuration config,
-      PredictionSkylineStore skylineStore) {
-    this.alpha =
-        config.getDouble(ResourceEstimatorConfiguration.SOLVER_ALPHA_KEY, 0.1);
-    this.beta =
-        config.getDouble(ResourceEstimatorConfiguration.SOLVER_BETA_KEY, 0.1);
-    this.minJobRuns =
-        config.getInt(ResourceEstimatorConfiguration.SOLVER_MIN_JOB_RUN_KEY, 1);
-    this.timeInterval =
-        config.getInt(ResourceEstimatorConfiguration.TIME_INTERVAL_KEY, 5);
-    this.predictionSkylineStore = skylineStore;
-  }
-
-  /**
-   * Generate over-allocation constraints.
-   *
-   * @param lpModel            the LP model.
-   * @param cJobITimeK         actual container allocation for job i in time
-   *                           interval k.
-   * @param oa                 container over-allocation.
-   * @param x                  predicted container allocation.
-   * @param indexJobITimeK     index for job i at time interval k.
-   * @param timeK              index for time interval k.
-   */
-  private void generateOverAllocationConstraints(
-      final ExpressionsBasedModel lpModel, final double cJobITimeK,
-      final Variable[] oa, final Variable[] x, final int indexJobITimeK,
-      final int timeK) {
-    // oa_job_i_timeK >= x_timeK - cJobITimeK
-    Expression overAllocExpression =
-        lpModel.addExpression("over_alloc_" + indexJobITimeK);
-    overAllocExpression.set(oa[indexJobITimeK], 1);
-    overAllocExpression.set(x[timeK], -1);
-    overAllocExpression.lower(-cJobITimeK); // >=
-  }
-
-  /**
-   * Generate under-allocation constraints.
-   *
-   * @param lpModel            the LP model.
-   * @param cJobITimeK     actual container allocation for job i in time
-   *                           interval k.
-   * @param uaPredict          absolute container under-allocation.
-   * @param ua                 recursive container under-allocation.
-   * @param x                  predicted container allocation.
-   * @param indexJobITimeK index for job i at time interval k.
-   * @param timeK             index for time interval k.
-   */
-  private void generateUnderAllocationConstraints(
-      final ExpressionsBasedModel lpModel, final double cJobITimeK,
-      final Variable[] uaPredict, final Variable[] ua, final Variable[] x,
-      final int indexJobITimeK, final int timeK) {
-    // uaPredict_job_i_timeK + x_timeK >= cJobITimeK
-    Expression underAllocPredictExpression =
-        lpModel.addExpression("under_alloc_predict_" + indexJobITimeK);
-    underAllocPredictExpression.set(uaPredict[indexJobITimeK], 1);
-    underAllocPredictExpression.set(x[timeK], 1);
-    underAllocPredictExpression.lower(cJobITimeK); // >=
-    if (timeK >= 1) {
-      /** Recursively calculate container under-allocation. */
-      // ua_job_i_timeK >= ua_job_i_time_(k-1) + cJobITimeK - x_timeK
-      Expression underAllocExpression =
-          lpModel.addExpression("under_alloc_" + indexJobITimeK);
-      underAllocExpression.set(ua[indexJobITimeK], 1);
-      underAllocExpression.set(ua[indexJobITimeK - 1], -1);
-      underAllocExpression.set(x[timeK], 1);
-      underAllocExpression.lower(cJobITimeK); // >=
-    } else {
-      /** Initial value for container under-allocation. */
-      // ua_job_i_time_0 >= cJobI_time_0 - x_time_0
-      Expression underAllocExpression =
-          lpModel.addExpression("under_alloc_" + indexJobITimeK);
-      underAllocExpression.set(ua[indexJobITimeK], 1);
-      underAllocExpression.set(x[timeK], 1);
-      underAllocExpression.lower(cJobITimeK); // >=
-    }
-  }
-
-  /**
-   * Generate solver objective.
-   *
-   * @param objective LP solver objective.
-   * @param numJobs   number of history runs of the recurring pipeline.
-   * @param jobLen    (maximum) job lenght of the recurring pipeline.
-   * @param oa        container over-allocation.
-   * @param ua        recursive container under-allocation.
-   * @param eps       regularization parameter.
-   */
-  private void generateObjective(final Expression objective, final int numJobs,
-      final int jobLen, final Variable[] oa, final Variable[] ua,
-      final Variable eps) {
-    int indexJobITimeK;
-    // sum Over_Allocation
-    for (int indexJobI = 0; indexJobI < numJobs; indexJobI++) {
-      for (int timeK = 0; timeK < jobLen; timeK++) {
-        indexJobITimeK = indexJobI * jobLen + timeK;
-        objective.set(oa[indexJobITimeK], alpha / numJobs);
-      }
-    }
-    // sum Under_Allocation
-    int indexJobITimeN;
-    for (int indexJobI = 0; indexJobI < numJobs; indexJobI++) {
-      indexJobITimeN = indexJobI * jobLen + jobLen - 1;
-      objective.set(ua[indexJobITimeN], (1 - alpha) / numJobs);
-    }
-    objective.set(eps, beta);
-    objective.weight(BigDecimal.valueOf(1));
-  }
-
-  /**
-   * Get the job length of recurring pipeline.
-   *
-   * @param resourceSkylines the history ResourceSkylines allocated to the
-   *                         recurring pipeline.
-   * @param numJobs          number of history runs of the recurring pipeline.
-   * @return length of (discretized time intervals of) the recurring pipeline.
-   */
-  private int getJobLen(final List<ResourceSkyline> resourceSkylines,
-      final int numJobs) {
-    int curLen = 0;
-    int jobLen = 0;
-    for (int indexJobI = 0; indexJobI < numJobs; indexJobI++) {
-      curLen = (int) (resourceSkylines.get(indexJobI).getSkylineList()
-          .getLatestNonNullTime() - resourceSkylines.get(indexJobI)
-          .getSkylineList().getEarliestStartTime() + timeInterval - 1)
-          / timeInterval; // for round up
-      if (jobLen < curLen) {
-        jobLen = curLen;
-      }
-    }
-    return jobLen;
-  }
-
-  @Override public final RLESparseResourceAllocation solve(
-      final Map<RecurrenceId, List<ResourceSkyline>> jobHistory)
-      throws SolverException, SkylineStoreException {
-    // TODO: addHistory timeout support for this function, and ideally we should
-    // return the confidence
-    // level associated with the predicted resource.
-    preprocessor.validate(jobHistory, timeInterval);
-    final List<ResourceSkyline> resourceSkylines =
-        preprocessor.aggregateSkylines(jobHistory, minJobRuns);
-    final int numJobs = resourceSkylines.size();
-    final int jobLen = getJobLen(resourceSkylines, numJobs);
-
-    /** Create variables. */
-    final ExpressionsBasedModel lpModel = new ExpressionsBasedModel();
-
-    Variable[] oa = new Variable[jobLen * numJobs];
-    Variable[] ua = new Variable[jobLen * numJobs];
-    Variable[] uaPredict = new Variable[jobLen * numJobs];
-    Variable[] x = new Variable[jobLen];
-    for (int i = 0; i < jobLen * numJobs; i++) {
-      oa[i] = new Variable("oa" + i).lower(BigDecimal.valueOf(0));
-      ua[i] = new Variable("ua" + i).lower(BigDecimal.valueOf(0));
-      uaPredict[i] = new Variable("uaPredict" + i).lower(BigDecimal.valueOf(0));
-    }
-    for (int i = 0; i < jobLen; i++) {
-      x[i] = new Variable("x").lower(BigDecimal.valueOf(0));
-    }
-    lpModel.addVariables(x);
-    lpModel.addVariables(oa);
-    lpModel.addVariables(ua);
-    lpModel.addVariables(uaPredict);
-    Variable eps = new Variable("epsilon").lower(BigDecimal.valueOf(0));
-    lpModel.addVariable(eps);
-
-    /** Set constraints. */
-    int indexJobITimeK = 0;
-    double cJobI = 0;
-    double cJobITimeK = 0;
-    ResourceSkyline resourceSkyline;
-    int[] containerNums;
-    // 1. sum(job_i){sum(timeK){1/cJobI * uaPredict_job_i_timeK}} <= numJobs
-    // * eps
-    Expression regularizationConstraint =
-        lpModel.addExpression("regularization");
-    regularizationConstraint.set(eps, -numJobs);
-    regularizationConstraint.upper(BigDecimal.valueOf(0)); // <= 0
-    for (int indexJobI = 0;
-         indexJobI < resourceSkylines.size(); indexJobI++) {
-      resourceSkyline = resourceSkylines.get(indexJobI);
-      // the # of containers consumed by job i in discretized time intervals
-      containerNums = preprocessor
-          .getDiscreteSkyline(resourceSkyline.getSkylineList(), timeInterval,
-              resourceSkyline.getContainerSpec().getMemorySize(), jobLen);
-      // the aggregated # of containers consumed by job i during its lifespan
-      cJobI = 0;
-      for (int i = 0; i < containerNums.length; i++) {
-        cJobI = cJobI + containerNums[i];
-      }
-      for (int timeK = 0; timeK < jobLen; timeK++) {
-        indexJobITimeK = indexJobI * jobLen + timeK;
-        // the # of containers consumed by job i in the k-th time interval
-        cJobITimeK = containerNums[timeK];
-        regularizationConstraint
-            .set(uaPredict[indexJobITimeK], 1 / cJobI);
-        generateOverAllocationConstraints(lpModel, cJobITimeK, oa, x,
-            indexJobITimeK, timeK);
-        generateUnderAllocationConstraints(lpModel, cJobITimeK, uaPredict,
-            ua, x, indexJobITimeK, timeK);
-      }
-    }
-
-    /** Set objective. */
-    Expression objective = lpModel.addExpression("objective");
-    generateObjective(objective, numJobs, jobLen, oa, ua, eps);
-
-    /** Solve the model. */
-    final Result lpResult = lpModel.minimise();
-    final TreeMap<Long, Resource> treeMap = new TreeMap<>();
-    RLESparseResourceAllocation result =
-        new RLESparseResourceAllocation(treeMap,
-            new DefaultResourceCalculator());
-    ReservationInterval riAdd;
-    Resource containerSpec = resourceSkylines.get(0).getContainerSpec();
-    String pipelineId =
-        ((RecurrenceId) jobHistory.keySet().toArray()[0]).getPipelineId();
-    Resource resource;
-    for (int indexTimeK = 0; indexTimeK < jobLen; indexTimeK++) {
-      riAdd = new ReservationInterval(indexTimeK * timeInterval,
-          (indexTimeK + 1) * timeInterval);
-      resource = Resource.newInstance(
-          containerSpec.getMemorySize() * (int) lpResult
-              .doubleValue(indexTimeK),
-          containerSpec.getVirtualCores() * (int) lpResult
-              .doubleValue(indexTimeK));
-      result.addInterval(riAdd, resource);
-      LOGGER.debug("time interval: {}, container: {}.", indexTimeK,
-          lpResult.doubleValue(indexTimeK));
-    }
-
-    predictionSkylineStore.addEstimation(pipelineId, result);
-
-    /**
-     * TODO: 1. We can calculate the estimated error (over-allocation,
-     * under-allocation) of our prediction which could be used to generate
-     * confidence level for our prediction; 2. Also, we can modify our model to
-     * take job input data size (and maybe stage info) into consideration; 3. We
-     * can also try to generate such conclusion: our prediction under-allocates
-     * X amount of resources from time 0 to time 100 compared with 95% of
-     * history runs; 4. We can build framework-specific versions of estimator
-     * (such as scope/spark/hive, etc.) and provides more specific suggestions.
-     * For example, we may say: for spark job i, its task size is X GB while the
-     * container memory allocation is Y GB; as a result, its shuffling stage is
-     * 20% slower than ideal case due to the disk spilling operations, etc. 5.
-     * If we have more information of jobs (other than ResourceSkyline), we may
-     * have such conclusion: job i is 20% slower than 90% of history runs, and
-     * it is because part of its tasks are running together with job j's tasks.
-     * In this case, we not only predict the amount of resource needed for job
-     * i, but also how to place the resource requirements to clusters; 6. We may
-     * monitor job progress, and dynamically increase/decrease container
-     * allocations to satisfy job deadline while minimizing the cost; 7. We may
-     * allow users to specify a budget (say $100 per job run), and optimize the
-     * resource allocation under the budget constraints. 8. ...
-     */
-    return result;
-  }
-
-  @Override public final void close() {
-    // TODO: currently place holder
-  }
-}
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/impl/package-info.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/impl/package-info.java
deleted file mode 100644
index 3344f60ae03..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/impl/package-info.java
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * Implementation for {@code Solver}.
- */
-
-package org.apache.hadoop.resourceestimator.solver.impl;
\ No newline at end of file
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/preprocess/SolverPreprocessor.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/preprocess/SolverPreprocessor.java
deleted file mode 100644
index af613346e47..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/preprocess/SolverPreprocessor.java
+++ /dev/null
@@ -1,219 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.hadoop.resourceestimator.solver.preprocess;
-
-import static java.lang.Math.toIntExact;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-import java.util.Map;
-import java.util.TreeMap;
-
-import org.apache.hadoop.resourceestimator.common.api.RecurrenceId;
-import org.apache.hadoop.resourceestimator.common.api.ResourceSkyline;
-import org.apache.hadoop.resourceestimator.solver.api.Solver;
-import org.apache.hadoop.resourceestimator.solver.exceptions.InvalidInputException;
-import org.apache.hadoop.yarn.api.records.Resource;
-import org.apache.hadoop.yarn.server.resourcemanager.reservation.RLESparseResourceAllocation;
-import org.apache.hadoop.yarn.server.resourcemanager.reservation.ReservationInterval;
-import org.apache.hadoop.yarn.util.resource.DefaultResourceCalculator;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-/**
- * Common preprocessing functions for {@link Solver}.
- */
-public class SolverPreprocessor {
-  private static final Logger LOGGER =
-      LoggerFactory.getLogger(SolverPreprocessor.class);
-
-  /**
-   * Check if Solver's input parameters are valid.
-   *
-   * @param jobHistory   the history {@link ResourceSkyline}s of the recurring
-   *                     pipeline job.
-   * @param timeInterval the time interval which is used to discretize the
-   *                     history {@link ResourceSkyline}s.
-   * @throws InvalidInputException if: (1) jobHistory is <em>null</em>;
-   *     (2) jobHistory is empty; (3) timeout is non-positive;
-   *     (4) timeInterval is non-positive;
-   */
-  public final void validate(
-      final Map<RecurrenceId, List<ResourceSkyline>> jobHistory,
-      final int timeInterval) throws InvalidInputException {
-    if ((jobHistory == null) || (jobHistory.size() == 0)) {
-      LOGGER.error(
-          "Job resource skyline history is invalid, please try again with"
-              + " valid resource skyline history.");
-      throw new InvalidInputException("Job ResourceSkyline history", "invalid");
-    }
-
-    if (timeInterval <= 0) {
-      LOGGER.error(
-          "Solver timeInterval {} is invalid, please specify a positive value.",
-          timeInterval);
-      throw new InvalidInputException("Solver timeInterval", "non-positive");
-    }
-  }
-
-  /**
-   * Return the multi-dimension resource vector consumed by the job at specified
-   * time.
-   *
-   * @param skyList           the list of {@link Resource}s used by the job.
-   * @param index             the discretized time index.
-   * @param containerMemAlloc the multi-dimension resource vector allocated to
-   *                          one container.
-   * @return the multi-dimension resource vector consumed by the job.
-   */
-  public final long getResourceVector(final RLESparseResourceAllocation skyList,
-      final int index, final long containerMemAlloc) {
-    return skyList.getCapacityAtTime(index).getMemorySize() / containerMemAlloc;
-  }
-
-  /**
-   * Discretize job's lifespan into intervals, and return the number of
-   * containers used by the job within each interval.
-   * <p> Note that here we assume all containers allocated to the job have the
-   * same {@link Resource}. This is due to the limit of
-   * {@link RLESparseResourceAllocation}.
-   *
-   * @param skyList           the list of {@link Resource}s used by the job.
-   * @param timeInterval      the time interval used to discretize the job's
-   *                          lifespan.
-   * @param containerMemAlloc the amount of memory allocated to each container.
-   * @param jobLen            the duration of the job.
-   * @return the number of containers allocated to the job within discretized
-   * time intervals.
-   */
-  public final int[] getDiscreteSkyline(
-      final RLESparseResourceAllocation skyList, final int timeInterval,
-      final long containerMemAlloc, final int jobLen) {
-    long jobLifeSpan =
-        skyList.getLatestNonNullTime() - skyList.getEarliestStartTime();
-    int[] result = new int[jobLen];
-    Arrays.fill(result, 0);
-
-    int index = 0;
-    long numContainerAt = 0;
-    for (int i = 0; i < jobLifeSpan; i++) {
-      index = (int) Math.floor((double) i / timeInterval);
-      numContainerAt = getResourceVector(skyList, i, containerMemAlloc);
-      if (result[index] < numContainerAt) {
-        result[index] = (int) numContainerAt;
-      }
-    }
-    return result;
-  }
-
-  /**
-   * Merge different jobs' resource skylines into one within the same pipeline.
-   *
-   * @param resourceSkylines different jobs' resource skylines within the same
-   *                         pipeline.
-   * @return an aggregated resource skyline for the pipeline.
-   */
-  public final ResourceSkyline mergeSkyline(
-      final List<ResourceSkyline> resourceSkylines) {
-    // TODO:
-    // rewrite this function with shift and merge once YARN-5328 is committed
-    /** First, getHistory the pipeline submission time. */
-    long pipelineSubmission = Long.MAX_VALUE;
-    for (int i = 0; i < resourceSkylines.size(); i++) {
-      long jobSubmission = resourceSkylines.get(i).getJobSubmissionTime();
-      if (pipelineSubmission > jobSubmission) {
-        pipelineSubmission = jobSubmission;
-      }
-    }
-    final TreeMap<Long, Resource> resourceOverTime = new TreeMap<>();
-    final RLESparseResourceAllocation skylineListAgg =
-        new RLESparseResourceAllocation(resourceOverTime,
-            new DefaultResourceCalculator());
-    /**
-     * Second, adjust different jobs' ResourceSkyline starting time based on
-     * pipeline submission time, and merge them into one ResourceSkyline.
-     */
-    for (int i = 0; i < resourceSkylines.size(); i++) {
-      long jobSubmission = resourceSkylines.get(i).getJobSubmissionTime();
-      long diff = (jobSubmission - pipelineSubmission) / 1000;
-      RLESparseResourceAllocation tmp =
-          resourceSkylines.get(i).getSkylineList();
-      Object[] timePoints = tmp.getCumulative().keySet().toArray();
-      for (int j = 0; j < timePoints.length - 2; j++) {
-        ReservationInterval riAdd =
-            new ReservationInterval(toIntExact((long) timePoints[j]) + diff,
-                toIntExact((long) timePoints[j + 1] + diff));
-        skylineListAgg.addInterval(riAdd,
-            tmp.getCapacityAtTime(toIntExact((long) timePoints[j])));
-      }
-    }
-    ResourceSkyline skylineAgg =
-        new ResourceSkyline(resourceSkylines.get(0).getJobId(),
-            resourceSkylines.get(0).getJobInputDataSize(),
-            resourceSkylines.get(0).getJobSubmissionTime(),
-            resourceSkylines.get(0).getJobFinishTime(),
-            resourceSkylines.get(0).getContainerSpec(), skylineListAgg);
-
-    return skylineAgg;
-  }
-
-  /**
-   * Aggregate all job's {@link ResourceSkyline}s in the one run of recurring
-   * pipeline, and return the aggregated {@link ResourceSkyline}s in different
-   * runs.
-   *
-   * @param jobHistory the history {@link ResourceSkyline} of the recurring
-   *                   pipeline job.
-   * @param minJobRuns the minimum number of job runs required to run the
-   *                   solver.
-   * @return the aggregated {@link ResourceSkyline}s in different runs.
-   * @throws InvalidInputException if: (1) job submission time parsing fails;
-   *     (2) jobHistory has less job runs than the minimum requirement;
-   */
-  public final List<ResourceSkyline> aggregateSkylines(
-      final Map<RecurrenceId, List<ResourceSkyline>> jobHistory,
-      final int minJobRuns) throws InvalidInputException {
-    List<ResourceSkyline> resourceSkylines = new ArrayList<ResourceSkyline>();
-    for (Map.Entry<RecurrenceId, List<ResourceSkyline>> entry : jobHistory
-        .entrySet()) {
-      // TODO: identify different jobs within the same pipeline
-      // right now, we do prediction at the granularity of pipeline, i.e., we
-      // will merge the
-      // resource skylines of jobs within the same pipeline into one aggregated
-      // resource skyline
-      ResourceSkyline skylineAgg = null;
-      skylineAgg = mergeSkyline(entry.getValue());
-      resourceSkylines.add(skylineAgg);
-    }
-    int numJobs = resourceSkylines.size();
-    if (numJobs < minJobRuns) {
-      LOGGER.error(
-          "Solver requires job resource skyline history for at least {} runs,"
-              + " but it only receives history info for {}  runs.",
-          minJobRuns, numJobs);
-      throw new InvalidInputException("Job ResourceSkyline history",
-          "containing less job runs" + " than " + minJobRuns);
-    }
-
-    return resourceSkylines;
-  }
-}
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/preprocess/package-info.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/preprocess/package-info.java
deleted file mode 100644
index b58cef96def..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/preprocess/package-info.java
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * Preprocessor for {@code Solver}.
- */
-
-package org.apache.hadoop.resourceestimator.solver.preprocess;
\ No newline at end of file
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/translator/api/JobMetaData.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/translator/api/JobMetaData.java
deleted file mode 100644
index 2bfab3ebf8a..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/translator/api/JobMetaData.java
+++ /dev/null
@@ -1,163 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.hadoop.resourceestimator.translator.api;
-
-import java.util.HashMap;
-import java.util.Map;
-import java.util.TreeMap;
-
-import org.apache.hadoop.resourceestimator.common.api.RecurrenceId;
-import org.apache.hadoop.resourceestimator.common.api.ResourceSkyline;
-import org.apache.hadoop.yarn.api.records.Resource;
-import org.apache.hadoop.yarn.server.resourcemanager.reservation.RLESparseResourceAllocation;
-import org.apache.hadoop.yarn.server.resourcemanager.reservation.ReservationInterval;
-import org.apache.hadoop.yarn.util.resource.DefaultResourceCalculator;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-/**
- * Job metadata collected when parsing the log file.
- */
-public class JobMetaData {
-  // containerId, releaseTime
-  private static final Logger LOGGER =
-      LoggerFactory.getLogger(JobMetaData.class);
-  private final ResourceSkyline resourceSkyline = new ResourceSkyline();
-  private final Map<String, Long> rawStart = new HashMap<String, Long>();
-  // containerId, startTime
-  private final Map<String, Long> rawEnd = new HashMap<String, Long>();
-  private RecurrenceId recurrenceId;
-
-  /**
-   * Constructor.
-   *
-   * @param jobSubmissionTimeConfig job submission time.
-   */
-  public JobMetaData(final long jobSubmissionTimeConfig) {
-    resourceSkyline.setJobSubmissionTime(jobSubmissionTimeConfig);
-  }
-
-  /**
-   * Set job finish time.
-   *
-   * @param jobFinishTimeConfig job finish time.
-   * @return the reference to current {@link JobMetaData}.
-   */
-  public final JobMetaData setJobFinishTime(final long jobFinishTimeConfig) {
-    resourceSkyline.setJobFinishTime(jobFinishTimeConfig);
-    return this;
-  }
-
-  /**
-   * Add container launch time.
-   *
-   * @param containerId id of the container.
-   * @param time        container launch time.
-   * @return the reference to current {@link JobMetaData}.
-   */
-  public final JobMetaData setContainerStart(final String containerId,
-      final long time) {
-    if (rawStart.put(containerId, time) != null) {
-      LOGGER.warn("find duplicate container launch time for {}, so we replace"
-              + " it with {}.", containerId, time);
-    }
-    return this;
-  }
-
-  /**
-   * Add container release time.
-   *
-   * @param containerId id of the container.
-   * @param time        container release time.
-   * @return the reference to current {@link JobMetaData}.
-   */
-  public final JobMetaData setContainerEnd(final String containerId,
-      final long time) {
-    if (rawEnd.put(containerId, time) != null) {
-      LOGGER.warn("find duplicate container release time for {}, so we replace"
-          + " it with {}.", containerId, time);
-    }
-    return this;
-  }
-
-  /**
-   * Get {@link RecurrenceId}.
-   *
-   * @return {@link RecurrenceId}.
-   */
-  public final RecurrenceId getRecurrenceId() {
-    return recurrenceId;
-  }
-
-  /**
-   * Set {@link RecurrenceId}.
-   *
-   * @param recurrenceIdConfig the {@link RecurrenceId}.
-   * @return the reference to current {@link JobMetaData}.
-   */
-  public final JobMetaData setRecurrenceId(
-      final RecurrenceId recurrenceIdConfig) {
-    this.recurrenceId = recurrenceIdConfig;
-    return this;
-  }
-
-  /**
-   * Get {@link ResourceSkyline}.
-   *
-   * @return {@link ResourceSkyline}.
-   */
-  public final ResourceSkyline getResourceSkyline() {
-    return resourceSkyline;
-  }
-
-  /**
-   * Normalized container launch/release time, and generate the
-   * {@link ResourceSkyline}.
-   */
-  public final void createSkyline() {
-    final long jobSubmissionTime = resourceSkyline.getJobSubmissionTime();
-    Resource containerSpec = resourceSkyline.getContainerSpec();
-    final TreeMap<Long, Resource> resourceOverTime = new TreeMap<>();
-    final RLESparseResourceAllocation skylineList =
-        new RLESparseResourceAllocation(resourceOverTime,
-            new DefaultResourceCalculator());
-    resourceSkyline.setSkylineList(skylineList);
-    if (containerSpec == null) {
-      // if RmParser fails to extract container resource spec from logs, we will
-      // statically set
-      // it to be <1core, 1GB>
-      containerSpec = Resource.newInstance(1024, 1);
-    }
-    resourceSkyline.setContainerSpec(containerSpec);
-    for (final Map.Entry<String, Long> entry : rawStart.entrySet()) {
-      final long timeStart = entry.getValue();
-      final Long timeEnd = rawEnd.get(entry.getKey());
-      if (timeEnd == null) {
-        LOGGER.warn("container release time not found for {}.", entry.getKey());
-      } else {
-        final ReservationInterval riAdd =
-            new ReservationInterval((timeStart - jobSubmissionTime) / 1000,
-                (timeEnd - jobSubmissionTime) / 1000);
-        resourceSkyline.getSkylineList().addInterval(riAdd, containerSpec);
-      }
-    }
-  }
-}
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/translator/api/LogParser.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/translator/api/LogParser.java
deleted file mode 100644
index b7efe5adf99..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/translator/api/LogParser.java
+++ /dev/null
@@ -1,65 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.hadoop.resourceestimator.translator.api;
-
-import java.io.IOException;
-import java.io.InputStream;
-
-import org.apache.hadoop.conf.Configuration;
-import org.apache.hadoop.resourceestimator.common.exception.ResourceEstimatorException;
-import org.apache.hadoop.resourceestimator.skylinestore.api.HistorySkylineStore;
-import org.apache.hadoop.resourceestimator.skylinestore.exceptions.SkylineStoreException;
-
-/**
- * LogParser iterates over a stream of logs, uses {@link SingleLineParser} to
- * parse each line, and adds extracted {@code ResourceSkyline}s to the
- * {@code SkylineStore}.
- */
-public interface LogParser extends AutoCloseable {
-
-  /**
-   * Initializing the LogParser, including loading solver parameters from
-   * configuration file.
-   *
-   * @param config       {@link Configuration} for the LogParser.
-   * @param skylineStore the {@link HistorySkylineStore} which stores recurring
-   *                     pipeline's {@code
-   *                     ResourceSkyline}s.
-   * @throws ResourceEstimatorException if initialization of a
-   *     {@code SingleLineParser} fails.
-   */
-  void init(Configuration config, HistorySkylineStore skylineStore)
-      throws ResourceEstimatorException;
-
-  /**
-   * Parses each line in the log stream, and adds extracted
-   * {@code ResourceSkyline}s to the {@code
-   * SkylineStore}.
-   *
-   * @param logs the stream of input logs.
-   * @throws SkylineStoreException if it fails to addHistory extracted
-   *     {@code ResourceSkyline}s to the {@code SkylineStore}.
-   * @throws IOException if it fails to read from the {@link InputStream}.
-   */
-  void parseStream(InputStream logs) throws SkylineStoreException, IOException;
-
-  @Override void close();
-}
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/translator/api/SingleLineParser.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/translator/api/SingleLineParser.java
deleted file mode 100644
index b9607fe2c31..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/translator/api/SingleLineParser.java
+++ /dev/null
@@ -1,52 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.hadoop.resourceestimator.translator.api;
-
-import java.text.ParseException;
-import java.util.List;
-import java.util.Map;
-
-import org.apache.hadoop.resourceestimator.common.api.RecurrenceId;
-import org.apache.hadoop.resourceestimator.common.api.ResourceSkyline;
-import org.apache.hadoop.resourceestimator.translator.exceptions.DataFieldNotFoundException;
-
-/**
- * SingleLineParser parses one line in the log file, extracts the
- * {@link ResourceSkyline}s and stores them.
- */
-public interface SingleLineParser {
-  /**
-   * Parse one line in the log file, extract the {@link ResourceSkyline}s and
-   * store them.
-   *
-   * @param logLine        one line in the log file.
-   * @param jobMetas       the job metadata collected during parsing.
-   * @param skylineRecords the valid {@link ResourceSkyline}s extracted from the
-   *                       log.
-   * @throws DataFieldNotFoundException if certain data fields are not found in
-   *                                    the log.
-   * @throws ParseException if it fails to convert date string to
-   *     unix timestamp successfully.
-   */
-  void parseLine(String logLine, Map<String, JobMetaData> jobMetas,
-      Map<RecurrenceId, List<ResourceSkyline>> skylineRecords)
-      throws DataFieldNotFoundException, ParseException;
-}
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/translator/api/package-info.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/translator/api/package-info.java
deleted file mode 100644
index a1b79c0b064..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/translator/api/package-info.java
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * API for {@code Translator}.
- */
-
-package org.apache.hadoop.resourceestimator.translator.api;
\ No newline at end of file
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/translator/exceptions/DataFieldNotFoundException.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/translator/exceptions/DataFieldNotFoundException.java
deleted file mode 100644
index 6eae614b9b0..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/translator/exceptions/DataFieldNotFoundException.java
+++ /dev/null
@@ -1,32 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.hadoop.resourceestimator.translator.exceptions;
-
-/**
- * Exception thrown when job attributes are not found.
- */
-public class DataFieldNotFoundException extends Exception {
-  private static final long serialVersionUID = -684069387367879218L;
-
-  public DataFieldNotFoundException(final String log) {
-    super("Fail to extract data fields properly from " + log);
-  }
-}
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/translator/exceptions/package-info.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/translator/exceptions/package-info.java
deleted file mode 100644
index 104388ddfd7..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/translator/exceptions/package-info.java
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * Exception for {@code Translator}.
- */
-
-package org.apache.hadoop.resourceestimator.translator.exceptions;
\ No newline at end of file
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/translator/impl/BaseLogParser.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/translator/impl/BaseLogParser.java
deleted file mode 100644
index 2accbac784d..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/translator/impl/BaseLogParser.java
+++ /dev/null
@@ -1,127 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.hadoop.resourceestimator.translator.impl;
-
-import java.io.BufferedReader;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.nio.charset.StandardCharsets;
-import java.text.ParseException;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import org.apache.hadoop.conf.Configuration;
-import org.apache.hadoop.resourceestimator.common.api.RecurrenceId;
-import org.apache.hadoop.resourceestimator.common.api.ResourceSkyline;
-import org.apache.hadoop.resourceestimator.common.config.ResourceEstimatorConfiguration;
-import org.apache.hadoop.resourceestimator.common.config.ResourceEstimatorUtil;
-import org.apache.hadoop.resourceestimator.common.exception.ResourceEstimatorException;
-import org.apache.hadoop.resourceestimator.skylinestore.api.HistorySkylineStore;
-import org.apache.hadoop.resourceestimator.skylinestore.exceptions.SkylineStoreException;
-import org.apache.hadoop.resourceestimator.translator.api.JobMetaData;
-import org.apache.hadoop.resourceestimator.translator.api.LogParser;
-import org.apache.hadoop.resourceestimator.translator.api.SingleLineParser;
-import org.apache.hadoop.resourceestimator.translator.exceptions.DataFieldNotFoundException;
-import org.apache.hadoop.resourceestimator.translator.validator.ParserValidator;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-/**
- * Base class to implement {@link LogParser}. It wraps a
- * {@link SingleLineParser} from the {@link Configuration} to parse a log
- * dir/file.
- */
-public class BaseLogParser implements LogParser {
-  private static final Logger LOGGER =
-      LoggerFactory.getLogger(BaseLogParser.class);
-  private static final ParserValidator INPUT_VALIDATOR = new ParserValidator();
-  private SingleLineParser singleLineParser;
-  private HistorySkylineStore historySkylineStore;
-
-  @Override public void init(Configuration config,
-      HistorySkylineStore skylineStore) throws ResourceEstimatorException {
-    singleLineParser = ResourceEstimatorUtil.createProviderInstance(config,
-        ResourceEstimatorConfiguration.TRANSLATOR_LINE_PARSER,
-        ResourceEstimatorConfiguration.DEFAULT_TRANSLATOR_LINE_PARSER,
-        SingleLineParser.class);
-    this.historySkylineStore = skylineStore;
-  }
-
-  /**
-   * Add job's {@link ResourceSkyline}s to the {@link HistorySkylineStore}.
-   *
-   * @param skylineRecords the {@link Map} which records the completed recurring
-   *                       pipeline's {@link ResourceSkyline}s.
-   * @throws SkylineStoreException if it failes to addHistory job's
-   *     {@link ResourceSkyline}s to the {@link HistorySkylineStore}.
-   */
-  private void addToSkylineStore(
-      final Map<RecurrenceId, List<ResourceSkyline>> skylineRecords)
-      throws SkylineStoreException {
-    for (final Map.Entry<RecurrenceId, List<ResourceSkyline>> entry :
-        skylineRecords.entrySet()) {
-      historySkylineStore.addHistory(entry.getKey(), entry.getValue());
-    }
-  }
-
-  public void parseLine(final String logLine,
-      final Map<String, JobMetaData> jobMetas,
-      final Map<RecurrenceId, List<ResourceSkyline>> skylineRecords)
-      throws DataFieldNotFoundException, ParseException {
-    singleLineParser.parseLine(logLine, jobMetas, skylineRecords);
-  }
-
-  @Override public final void parseStream(final InputStream logs)
-      throws SkylineStoreException, IOException {
-    if (!INPUT_VALIDATOR.validate(logs)) {
-      LOGGER.error("Input validation fails, please specify with"
-          + " valid input parameters.");
-      return;
-    }
-    final Map<RecurrenceId, List<ResourceSkyline>> skylineRecords =
-        new HashMap<>();
-    final Map<String, JobMetaData> jobMetas =
-        new HashMap<String, JobMetaData>();
-    final BufferedReader bf = new BufferedReader(
-        new InputStreamReader(logs, StandardCharsets.UTF_8));
-    String line = null;
-    while ((line = bf.readLine()) != null) {
-      try {
-        parseLine(line, jobMetas, skylineRecords);
-      } catch (DataFieldNotFoundException e) {
-        LOGGER.debug("Data field not found", e);
-      } catch (ParseException e) {
-        LOGGER.debug("Date conversion error", e);
-      }
-    }
-
-    addToSkylineStore(skylineRecords);
-  }
-
-  /**
-   * Release the resource used by the ParserUtil.
-   */
-  @Override public final void close() {
-    historySkylineStore = null;
-  }
-}
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/translator/impl/LogParserUtil.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/translator/impl/LogParserUtil.java
deleted file mode 100644
index 4ca1fffd2d9..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/translator/impl/LogParserUtil.java
+++ /dev/null
@@ -1,104 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.hadoop.resourceestimator.translator.impl;
-
-import java.io.FileInputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.text.DateFormat;
-import java.text.ParseException;
-import java.text.SimpleDateFormat;
-
-import org.apache.hadoop.resourceestimator.common.exception.ResourceEstimatorException;
-import org.apache.hadoop.resourceestimator.skylinestore.api.SkylineStore;
-import org.apache.hadoop.resourceestimator.skylinestore.exceptions.SkylineStoreException;
-import org.apache.hadoop.resourceestimator.translator.api.LogParser;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-/**
- * Common utility functions for {@link LogParser}.
- */
-public class LogParserUtil {
-  private static final Logger LOGGER =
-      LoggerFactory.getLogger(LogParserUtil.class);
-  private LogParser logParser;
-  private DateFormat format = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
-
-  /**
-   * Set the {@link LogParser} to use.
-   *
-   * @param logParser the {@link LogParser} to use.
-   */
-  public void setLogParser(final LogParser logParser) {
-    this.logParser = logParser;
-  }
-
-  /**
-   * Set date format for the {@link LogParser}.
-   *
-   * @param datePattern the date pattern in the log.
-   */
-  public void setDateFormat(final String datePattern) {
-    this.format = new SimpleDateFormat(datePattern);
-  }
-
-  /**
-   * Converts String date to unix timestamp. Note that we assume the time in the
-   * logs has the same time zone with the machine which runs the
-   * {@link RmSingleLineParser}.
-   *
-   * @param date The String date.
-   * @return Unix time stamp.
-   * @throws ParseException if data conversion from String to unix timestamp
-   *                        fails.
-   */
-  public long stringToUnixTimestamp(final String date) throws ParseException {
-    return format.parse(date).getTime();
-  }
-
-  /**
-   * Parse the log file/directory.
-   *
-   * @param logFile the file/directory of the log.
-   * @throws SkylineStoreException      if fails to addHistory to
-   *                                    {@link SkylineStore}.
-   * @throws IOException                if fails to parse the log.
-   * @throws ResourceEstimatorException if the {@link LogParser}
-   *     is not initialized.
-   */
-  public final void parseLog(final String logFile)
-      throws SkylineStoreException, IOException, ResourceEstimatorException {
-    if (logParser == null) {
-      throw new ResourceEstimatorException("The log parser is not initialized,"
-          + " please try again after initializing.");
-    }
-    InputStream inputStream = null;
-    try {
-      inputStream = new FileInputStream(logFile);
-      logParser.parseStream(inputStream);
-    } finally {
-      if (inputStream != null) {
-        inputStream.close();
-      }
-    }
-  }
-}
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/translator/impl/NativeSingleLineParser.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/translator/impl/NativeSingleLineParser.java
deleted file mode 100644
index 83557d32fe2..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/translator/impl/NativeSingleLineParser.java
+++ /dev/null
@@ -1,120 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.hadoop.resourceestimator.translator.impl;
-
-import java.text.ParseException;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Map;
-import java.util.TreeMap;
-
-import org.apache.hadoop.conf.Configuration;
-import org.apache.hadoop.resourceestimator.common.api.RecurrenceId;
-import org.apache.hadoop.resourceestimator.common.api.ResourceSkyline;
-import org.apache.hadoop.resourceestimator.common.config.ResourceEstimatorConfiguration;
-import org.apache.hadoop.resourceestimator.translator.api.JobMetaData;
-import org.apache.hadoop.resourceestimator.translator.api.SingleLineParser;
-import org.apache.hadoop.resourceestimator.translator.exceptions.DataFieldNotFoundException;
-import org.apache.hadoop.yarn.api.records.Resource;
-import org.apache.hadoop.yarn.server.resourcemanager.reservation.RLESparseResourceAllocation;
-import org.apache.hadoop.yarn.server.resourcemanager.reservation.ReservationInterval;
-import org.apache.hadoop.yarn.util.resource.DefaultResourceCalculator;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-/**
- * This sample parser will parse the sample log and extract the resource
- * skyline.
- * <p> The expected log format is: NormalizedJobName NumInstances SubmitTime
- * StartTime EndTime JobInstanceName memUsage coreUsage
- */
-public class NativeSingleLineParser implements SingleLineParser {
-  private static final Logger LOGGER =
-      LoggerFactory.getLogger(NativeSingleLineParser.class);
-
-  /**
-   * Aggregates different jobs' {@link ResourceSkyline}s within the same
-   * pipeline together.
-   *
-   * @param resourceSkyline newly extracted {@link ResourceSkyline}.
-   * @param recurrenceId    the {@link RecurrenceId} which the resourceSkyline
-   *                        belongs to.
-   * @param skylineRecords  a {@link Map} which stores the
-   *     {@link ResourceSkyline}s for all pipelines during this parsing.
-   */
-  private void aggregateSkyline(final ResourceSkyline resourceSkyline,
-      final RecurrenceId recurrenceId,
-      final Map<RecurrenceId, List<ResourceSkyline>> skylineRecords) {
-    List<ResourceSkyline> resourceSkylines = skylineRecords.get(recurrenceId);
-    if (resourceSkylines == null) {
-      resourceSkylines = new ArrayList<ResourceSkyline>();
-      skylineRecords.put(recurrenceId, resourceSkylines);
-    }
-    resourceSkylines.add(resourceSkyline);
-  }
-
-  @Override public void parseLine(String logLine,
-      Map<String, JobMetaData> jobMetas,
-      Map<RecurrenceId, List<ResourceSkyline>> skylineRecords)
-      throws DataFieldNotFoundException, ParseException {
-    Configuration config = new Configuration();
-    config.addResource(new org.apache.hadoop.fs.Path(
-        ResourceEstimatorConfiguration.CONFIG_FILE));
-    int timeInterval =
-        config.getInt(ResourceEstimatorConfiguration.TIME_INTERVAL_KEY, 5);
-    // note that for native log, we assume each container is allocated <1 core,
-    // 1GB RAM>
-    long containerMemAlloc = 1024;
-    int containerCpuAlloc = 1;
-    String[] splitString = logLine.split("\\s+");
-    String pipelineId = splitString[0];
-    String jobId = splitString[5];
-    String[] skylineUnits = splitString[7].split("\\|");
-
-    JobMetaData appMeta = new JobMetaData(0);
-    RecurrenceId recurrenceId = new RecurrenceId(pipelineId, jobId);
-    appMeta.setRecurrenceId(recurrenceId);
-    Resource containerAlloc;
-    int numContainers;
-    ResourceSkyline resourceSkyline = appMeta.getResourceSkyline();
-    final TreeMap<Long, Resource> resourceOverTime = new TreeMap<>();
-    final RLESparseResourceAllocation skylineList =
-        new RLESparseResourceAllocation(resourceOverTime,
-            new DefaultResourceCalculator());
-    resourceSkyline.setSkylineList(skylineList);
-    for (String elem : skylineUnits) {
-      numContainers = Integer.parseInt(elem.split("\\:")[0]);
-      containerAlloc = Resource.newInstance(containerMemAlloc * numContainers,
-          containerCpuAlloc * numContainers);
-      final ReservationInterval riAdd =
-          new ReservationInterval(Long.parseLong(elem.split("\\:")[1]),
-              Long.parseLong(elem.split("\\:")[1]) + timeInterval);
-      resourceSkyline.getSkylineList().addInterval(riAdd, containerAlloc);
-    }
-    resourceSkyline.setContainerSpec(
-        Resource.newInstance(containerMemAlloc, containerCpuAlloc));
-    appMeta.setJobFinishTime(
-        appMeta.getResourceSkyline().getSkylineList().getLatestNonNullTime());
-    resourceSkyline.setJobInputDataSize(0);
-    resourceSkyline.setJobId(jobId);
-    aggregateSkyline(resourceSkyline, recurrenceId, skylineRecords);
-  }
-}
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/translator/impl/RmSingleLineParser.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/translator/impl/RmSingleLineParser.java
deleted file mode 100644
index 19049348a84..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/translator/impl/RmSingleLineParser.java
+++ /dev/null
@@ -1,203 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.hadoop.resourceestimator.translator.impl;
-
-import java.text.ParseException;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Map;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
-import org.apache.hadoop.resourceestimator.common.api.RecurrenceId;
-import org.apache.hadoop.resourceestimator.common.api.ResourceSkyline;
-import org.apache.hadoop.resourceestimator.translator.api.JobMetaData;
-import org.apache.hadoop.resourceestimator.translator.api.SingleLineParser;
-import org.apache.hadoop.resourceestimator.translator.exceptions.DataFieldNotFoundException;
-import org.apache.hadoop.yarn.api.records.Resource;
-
-/**
- * {@link SingleLineParser} for Hadoop Resource Manager logs.
- */
-public class RmSingleLineParser implements SingleLineParser {
-  private static final LogParserUtil PARSERUTIL = new LogParserUtil();
-  private static final Pattern FILTER_PATTERN = Pattern.compile(
-      "(Submit Application Request|AM Allocated Container|"
-          + "AM Released Container|finalState=FAILED|"
-          + "ApplicationSummary|, Resource:)");
-  private static final Pattern SUBMISSION_PATTERN =
-      Pattern.compile("APPID=(\\w+)");
-  private static final Pattern FAIL_PATTERN =
-      Pattern.compile("appattempt_(\\d+_\\d+)_\\d+");
-  private static final Pattern FINISH_PATTERN =
-      Pattern.compile("appId=(\\w+).*?name=(\\w+)\\-(\\w+)");
-  private static final Pattern CONTAINER_EVENT_PATTERN =
-      Pattern.compile("APPID=(\\w+).*?CONTAINERID=(\\w+)");
-  private static final Pattern CONTAINER_SPEC_PATTERN = Pattern.compile(
-      "(container_[^_]+|appattempt)_(\\d+_\\d+).*?memory:(\\d+),"
-          + "\\svCores:(\\d+)");
-
-  /**
-   * Aggregates different jobs' {@link ResourceSkyline}s within the same
-   * pipeline together.
-   *
-   * @param resourceSkyline newly extracted {@link ResourceSkyline}.
-   * @param recurrenceId    the {@link RecurrenceId} which the resourceSkyline
-   *                        belongs to.
-   * @param skylineRecords  a {@link Map} which stores the
-   *     {@link ResourceSkyline}s for all pipelines during this parsing.
-   */
-  private void aggregateSkyline(final ResourceSkyline resourceSkyline,
-      final RecurrenceId recurrenceId,
-      final Map<RecurrenceId, List<ResourceSkyline>> skylineRecords) {
-    List<ResourceSkyline> resourceSkylines = skylineRecords.get(recurrenceId);
-    if (resourceSkylines == null) {
-      resourceSkylines = new ArrayList<ResourceSkyline>();
-      skylineRecords.put(recurrenceId, resourceSkylines);
-    }
-    resourceSkylines.add(resourceSkyline);
-  }
-
-  @Override public final void parseLine(final String logLine,
-      final Map<String, JobMetaData> jobMetas,
-      final Map<RecurrenceId, List<ResourceSkyline>> skylineRecords)
-      throws DataFieldNotFoundException, ParseException {
-    final String[] splits = logLine.split(",", 5); // Limit the max number of 5
-    // splits
-    if (splits.length < 5) {
-      return;
-    }
-    final Matcher jobEventMatcher = FILTER_PATTERN.matcher(splits[4]); // search
-    // only
-    // the
-    // tail
-    if (!jobEventMatcher.find()) { // this line of log does not contain targeted
-      // events
-      return;
-    }
-
-    // now we have the match, let's do some parsing
-    final long date = PARSERUTIL.stringToUnixTimestamp(splits[1]);
-    final String tail = splits[4].split("\\s+", 4)[3]; // use the tail of the
-    // tail only
-    switch (jobEventMatcher.group(1)) {
-    case "Submit Application Request": {
-      /** Submit job. */
-      final Matcher appIdMatch = SUBMISSION_PATTERN.matcher(tail);
-      if (appIdMatch.find()) {
-        final String appId = appIdMatch.group(1);
-        jobMetas.put(appId, new JobMetaData(date));
-      } else {
-        throw new DataFieldNotFoundException(tail);
-      }
-      break;
-    }
-    case "AM Allocated Container": {
-      /** Allocate container. */
-      final Matcher containerEventMatcher =
-          CONTAINER_EVENT_PATTERN.matcher(tail);
-      if (containerEventMatcher.find()) {
-        final String appId = containerEventMatcher.group(1);
-        final String containerId = containerEventMatcher.group(2);
-        final JobMetaData appMeta = jobMetas.get(appId);
-        if (appMeta != null) {
-          appMeta.setContainerStart(containerId, date);
-        }
-      } else {
-        throw new DataFieldNotFoundException(tail);
-      }
-      break;
-    }
-    case ", Resource:": {
-      final Matcher containerSpecMatcher = CONTAINER_SPEC_PATTERN.matcher(tail);
-      if (containerSpecMatcher.find()) {
-        final String appId = "application_" + containerSpecMatcher.group(2);
-        final JobMetaData appMeta = jobMetas.get(appId);
-        if (appMeta != null) {
-          final long memAlloc = Long.parseLong(containerSpecMatcher.group(3));
-          final int cpuAlloc = Integer.parseInt(containerSpecMatcher.group(4));
-          final Resource containerAlloc =
-              Resource.newInstance(memAlloc, cpuAlloc);
-          appMeta.getResourceSkyline().setContainerSpec(containerAlloc);
-        }
-      } else {
-        throw new DataFieldNotFoundException(tail);
-      }
-      break;
-    }
-    case "AM Released Container": {
-      final Matcher containerEventMatcher =
-          CONTAINER_EVENT_PATTERN.matcher(tail);
-      if (containerEventMatcher.find()) {
-        final String appId = containerEventMatcher.group(1);
-        final JobMetaData appMeta = jobMetas.get(appId);
-        if (appMeta != null) {
-          final String containerId = containerEventMatcher.group(2);
-          appMeta.setContainerEnd(containerId, date);
-        }
-      } else {
-        throw new DataFieldNotFoundException(tail);
-      }
-      break;
-    }
-    case "finalState=FAILED": {
-      /** In case of appAttempt failed: discard previous records. */
-      final Matcher failMatcher = FAIL_PATTERN.matcher(tail);
-      if (failMatcher.find()) {
-        final String appId = "application_" + failMatcher.group(1);
-        if (jobMetas.containsKey(appId)) {
-          jobMetas.put(appId, new JobMetaData(date));
-        }
-      } else {
-        throw new DataFieldNotFoundException(tail);
-      }
-      break;
-    }
-    case "ApplicationSummary": {
-      /** Finish a job. */
-      final Matcher finishMatcher = FINISH_PATTERN.matcher(tail);
-      if (finishMatcher.find()) {
-        final String appId = finishMatcher.group(1);
-        final String pipelineId = finishMatcher.group(2);
-        final String runId = finishMatcher.group(3);
-        final RecurrenceId recurrenceId = new RecurrenceId(pipelineId, runId);
-        final JobMetaData appMeta = jobMetas.remove(appId);
-        if (appMeta != null) {
-          appMeta.setRecurrenceId(recurrenceId).setJobFinishTime(date)
-              .getResourceSkyline().setJobInputDataSize(0); // TODO: need to
-          // read job input
-          // data size from
-          // logs
-          appMeta.createSkyline();
-          final ResourceSkyline resourceSkyline = appMeta.getResourceSkyline();
-          resourceSkyline.setJobId(appId);
-          aggregateSkyline(resourceSkyline, recurrenceId, skylineRecords);
-        }
-      } else {
-        throw new DataFieldNotFoundException(tail);
-      }
-      break;
-    }
-    default:
-      break;
-    }
-  }
-}
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/translator/impl/package-info.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/translator/impl/package-info.java
deleted file mode 100644
index 13b5138a26a..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/translator/impl/package-info.java
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * Implementation for {@code Translator}.
- */
-
-package org.apache.hadoop.resourceestimator.translator.impl;
\ No newline at end of file
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/translator/validator/ParserValidator.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/translator/validator/ParserValidator.java
deleted file mode 100644
index ebf50ba8bcd..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/translator/validator/ParserValidator.java
+++ /dev/null
@@ -1,41 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.hadoop.resourceestimator.translator.validator;
-
-import java.io.InputStream;
-
-import org.apache.hadoop.resourceestimator.translator.api.LogParser;
-
-/**
- * Validates the input parameters for the {@link LogParser}.
- */
-public class ParserValidator {
-  /**
-   * Validates the input parameters for the {@link LogParser}.
-   *
-   * @param logs input log streams to the {@link LogParser}.
-   * @return whether the input parameters are valid or not.
-   */
-  public final boolean validate(final InputStream logs) {
-    // TODO
-    return true;
-  }
-}
diff --git a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/translator/validator/package-info.java b/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/translator/validator/package-info.java
deleted file mode 100644
index c48b262265b..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/translator/validator/package-info.java
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * Validator for {@code Translator}.
- */
-
-package org.apache.hadoop.resourceestimator.translator.validator;
\ No newline at end of file
diff --git a/hadoop-tools/hadoop-resourceestimator/src/site/markdown/ResourceEstimator.md b/hadoop-tools/hadoop-resourceestimator/src/site/markdown/ResourceEstimator.md
deleted file mode 100644
index 12f8dd5ef28..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/site/markdown/ResourceEstimator.md
+++ /dev/null
@@ -1,181 +0,0 @@
-<!---
-  Licensed under the Apache License, Version 2.0 (the "License");
-  you may not use this file except in compliance with the License.
-  You may obtain a copy of the License at
-
-   http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License. See accompanying LICENSE file.
--->
-
-Resource Estimator Service
-==========================
-
-* [Resource Estimator Service](#Resource_Estimator_Service)
-    * [Overview](#Overview)
-        * [Motivation](#Motivation)
-        * [Goals](#Goals)
-        * [Architecture](#Architecture)
-    * [Usage](#Usage)
-    * [Example](#Example)
-    * [Advanced Configuration](#AdvancedConfig)
-    * [Future work](#Future)
-
-Overview
---------
-
-### Motivation
-Estimating job resource requirements remains an important and challenging problem for enterprise clusters. This is amplified by the ever-increasing complexity of workloads, i.e. from traditional batch jobs to interactive queries to streaming and recently machine learning jobs. This results in jobs relying on multiple computation frameworks such as Tez, MapReduce, Spark, etc., and the problem is further compounded by sharing nature of the clusters. Current state-of-art solution relies on user expertise to make resource requirement estimations for the jobs (for e.g.: number of reducers or container memory size, etc.), which is both tedious and inefficient.
-
-Based on the analysis of our cluster workloads, we observe that a large portion of jobs (more than 60%) are recurring jobs, giving us the opportunity to automatically estimate job resource requirements based on job's history runs. It is worth noting that jobs usually come from different computation frameworks, and the version may change across runs as well. Therefore, we want to come up with a framework agnostic black-box solution to automatically make resource requirement estimation for the recurring jobs.
-
-### Goals
-
-*   For a periodic job, analyze its history logs and predict its resource requirement for the new run.
-*   Support various types of job logs.
-*   Scale to terabytes of job logs.
-
-### Architecture
-
-The following figure illustrates the implementation architecture of the resource estimator.
-
-![The architecture of the resource estimator](images/resourceestimator_arch.png)
-
-Hadoop-resourceestimator mainly consists of three modules: Translator, SkylineStore and Estimator.
-
-1. `ResourceSkyline` is used to characterize job's resource utilizations during its lifespan. More specifically, it uses `RLESparseResourceAllocation` (<https://github.com/apache/hadoop/blob/b6e7d1369690eaf50ce9ea7968f91a72ecb74de0/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/RLESparseResourceAllocation.java>) to record the container allocation information. `RecurrenceId` is used to identify a specific run of a recurring pipeline. A pipeline could consist of multiple jobs, each has a `ResourceSkyline` to characterize its resource utilization.
-2. `Translator` parses the job logs, extracts their `ResourceSkylines` and stores them to the SkylineStore. `SingleLineParser` parses one line in the log stream and extract the `ResourceSkyline`. `LogParser` recursively parses each line in the log stream using `SingleLineParser`. Note that logs could have different storage formats, so `LogParser` takes a stream of strings as input, instead of File or other formats. Since job logs may have various formats thus require different `SingleLineParser` implementations, `LogParser` initiates the `SingleLineParser` based on user configuration. Currently Hadoop-resourceestimator provides two implementations for `SingleLineParser`: `NativeSingleLineParser` supports an optimized native format, and `RMSingleLineParser` parses the YARN ResourceManager logs generated in Hadoop systems since RM logs are widely available (in production deployments).
-3. `SkylineStore` serves as the storage layer for Hadoop-resourceestimator and consists of 2 parts. `HistorySkylineStore` stores the `ResourceSkylines` extracted by the `Translator`. It supports four actions: addHistory, deleteHistory, updateHistory and getHistory. addHistory appends new `ResourceSkylines` to the recurring pipelines, while updateHistory deletes all the `ResourceSkylines` of a specific recurring pipeline, and re-insert new `ResourceSkylines`. `PredictionSkylineStore` stores the predicted `RLESparseResourceAllocation` generated by the Estimator. It supports two actions: addEstimation and getEstimation.
-
-    Currently Hadoop-resourceestimator provides in-memory implementation for the SkylineStore.
-4. `Estimator` predicts recurring pipeline's resource requirements based on its history runs, stores the prediction to the `SkylineStore` and makes recurring resource reservations to YARN (YARN-5326). `Solver` reads all the history `ResourceSkylines` of a specific recurring pipeline, and predicts its new resource requirements wrapped in `RLESparseResourceAllocation`. Currently Hadoop-resourceestimator provides a `LPSOLVER` to make the prediction (the details of the Linear Programming model can be find in the paper). There is also a `BaseSolver` to translate predicted resource requirements into `ReservationSubmissionRequest` which is used by different solver implementations to make recurring resource reservations on YARN.
-5. `ResourceEstimationService` wraps Hadoop-resourceestimator as a micro-service, which can be easily deployed in clusters. It provides a set of REST APIs to allow users to parse specified job logs, query pipeline's history `ResourceSkylines`, query pipeline's predicted resource requirements and run the `SOLVER` if the prediction does not exist, delete the `ResourceSkylines` in the `SkylineStore`.
-
-Usage
------
-
-This section will guide you through the usage of resource estimator service.
-
-Here let `$HADOOP_ROOT` represent the Hadoop install directory. If you build Hadoop yourself, `$HADOOP_ROOT` is `hadoop-dist/target/hadoop-$VERSION`. The location of the resource estimator service, `$ResourceEstimatorServiceHome`, is `$HADOOP_ROOT/share/hadoop/tools/resourceestimator`. It contains 3 folders: `bin`, `conf` and `data`. Please note that users can use resource estimator service with the default configurations.
-
-* `bin` contains the running scripts for the resource estimator service.
-
-* `conf`: contains the configuration files for the resource estimator service.
-
-* `data` contains the sample log that is used to run the example of resource estimator service.
-
-### Step 1: Start the estimator
-
-First of all, copy the configuration file (located in `$ResourceEstimatorServiceHome/conf/`) to `$HADOOP_ROOT/etc/hadoop`.
-
-The script to start the estimator is `start-estimator.sh`.
-
-    $ cd $ResourceEstimatorServiceHome
-    $ bin/start-estimator.sh
-
-A web server is started, and users can use the resource estimation service through REST APIs.
-
-### Step 2: Run the estimator
-
-The URI for the resource estimator sercive is `http://0.0.0.0`, and the default service port is `9998` (configured in `$ResourceEstimatorServiceHome/conf/resourceestimator-config.xml`). In `$ResourceEstimatorServiceHome/data`, there is a sample log file `resourceEstimatorService.txt` which contains the logs of tpch_q12 query job for 2 runs.
-
-* `parse job logs: POST http://URI:port/resourceestimator/translator/LOG_FILE_DIRECTORY`
-
-  Send `POST http://0.0.0.0:9998/resourceestimator/translator/data/resourceEstimatorService.txt`. The underlying estimator will extract the ResourceSkylines from the log file and store them in the jobHistory SkylineStore.
-
-* `query job's history ResourceSkylines: GET http://URI:port/resourceestimator/skylinestore/history/{pipelineId}/{runId}`
-
-  Send `GET http://0.0.0.0:9998/resourceestimator/skylinestore/history/*/*`, and the underlying estimator will return all the records in history SkylineStore. You should be able to see ResourceSkylines for two runs of tpch_q12: tpch_q12_0 and tpch_q12_1. Note that both `pipelineId` and `runId` fields support wildcard operations.
-
-* `predict job's resource skyline requirement: GET http://URI:port/resourceestimator/estimator/{pipelineId}`
-
-  Send `http://0.0.0.0:9998/resourceestimator/estimator/tpch_q12`, and the underlying estimator will predict job's resource requirements for the new run based on its history ResourceSkylines, and store the predicted resource requirements to jobEstimation SkylineStore.
-
-* `query job's estimated resource skylines: GET http://URI:port/resourceestimator/skylinestore/estimation/{pipelineId}`
-
-  Send `http://0.0.0.0:9998/resourceestimator/skylinestore/estimation/tpch_q12`, and the underlying estimator will return the history resource requirement estimation for tpch_q12 job. Note that for jobEstimation SkylineStore, it does not support wildcard operations.
-
-*   `delete job's history resource skylines: DELETE http://URI:port/resourceestimator/skylinestore/history/{pipelineId}/{runId}`
-
-  Send `http://0.0.0.0:9998/resourceestimator/skylinestore/history/tpch_q12/tpch_q12_0`, and the underlying estimator will delete the ResourceSkyline record for tpch_q12_0. Re-send `GET http://0.0.0.0:9998/resourceestimator/skylinestore/history/*/*`, and the underlying estimator will only return the ResourceSkyline for tpch_q12_1.
-
-### Step 3: Run the estimator
-The script to stop the estimator is `stop-estimator.sh`.
-
-    $ cd $ResourceEstimatorServiceHome
-    $ bin/stop-estimator.sh
-
-Example
--------
-
-Here we present an example for using Resource Estimator Service.
-
-First, we run a tpch_q12 job for 9 times, and collect job's resource skylines in each run (note that in this example, we only collect "# of allocated containers" information).
-
-Then, we run the log parser in Resource Estimator Service to extract the ResourceSkylines from logs and store them in the SkylineStore. The job's ResourceSkylines are plotted below for demonstration.
-
-![Tpch job history runs](images/tpch_history.png)
-
-Finally, we run the estimator in Resource Estimator Service to predict the resource requirements for the new run, which is wrapped in RLESparseResourceAllocation (<https://github.com/apache/hadoop/blob/b6e7d1369690eaf50ce9ea7968f91a72ecb74de0/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/RLESparseResourceAllocation.java>). The predicted resource requirement is plotted below for demonstration.
-
-![Tpch job history prediction](images/tpch_predict.png)
-
-Advanced Configuration
-----------------------
-
-This section will guide you through the configuration for Resource Estimator Service. The configuration file is located at `$ResourceEstimatorServiceHome/conf/resourceestimator-config.xml`.
-
-* `resourceestimator.solver.lp.alpha`
-
-  The resource estimator has an integrated Linear Programming solver to make the prediction (refer to <https://www.microsoft.com/en-us/research/wp-content/uploads/2016/10/osdi16-final107.pdf> for more details), and this parameter tunes the tradeoff between resource over-allocation and under-allocation in the Linear Programming model. This parameter varies from 0 to 1, and a larger alpha value means the model minimizes over-allocation better. Default value is 0.1.
-
-* `resourceestimator.solver.lp.beta`
-
-  This parameter controls the generalization of the Linear Programming model. This parameter varies from 0 to 1. Deafult value is 0.1.
-
-* `resourceestimator.solver.lp.minJobRuns`
-
-  The minimum number of job runs required in order to make the prediction. Default value is 2.
-
-* `resourceestimator.timeInterval`
-
-  The time length which is used to discretize job execution into intervals. Note that the estimator makes resource allocation prediction for each interval. A smaller time interval has more fine-grained granularity for prediction, but it also takes longer time and more space for prediction. Default value is 5 (seconds).
-
-* `resourceestimator.skylinestore.provider`
-
-  The class name of the skylinestore provider. Default value is `org.apache.hadoop.resourceestimator.skylinestore.impl.InMemoryStore`, which is an in-memory implementation of skylinestore. If users want to use their own skylinestore implementation, they need to change this value accordingly.
-
-* `resourceestimator.translator.provider`
-
-  The class name of the translator provider. Default value is `org.apache.hadoop.resourceestimator.translator.impl.BaseLogParser`, which extracts resourceskylines from log streams. If users want to use their own translator implementation, they need to change this value accordingly.
-
-* `resourceestimator.translator.line-parser`
-
-  The class name of the translator single-line parser, which parses a single line in the log. Default value is `org.apache.hadoop.resourceestimator.translator.impl.NativeSingleLineParser`, which can parse one line in the sample log. Note that if users want to parse Hadoop Resource Manager (<https://hadoop.apache.org/docs/current/hadoop-yarn/hadoop-yarn-site/YARN.html>) logs, they need to set the value to be `org.apache.hadoop.resourceestimator.translator.impl.RmSingleLineParser`. If they want to implement single-line parser to parse their customized log file, they need to change this value accordingly.
-
-* `resourceestimator.solver.provider`
-
-  The class name of the solver provider. Default value is `org.apache.hadoop.resourceestimator.solver.impl.LpSolver`, which incorporates a Linear Programming model to make the prediction. If users want to implement their own models, they need to change this value accordingly.
-
-* `resourceestimator.service-port`
-
-  The port which ResourceEstimatorService listens to. The default value is 9998.
-
-Future work
------------
-
-1. For SkylineStore, we plan to provide a persistent store implementation. We are considering HBase to future proof our scale requirements.
-
-2. For Translator module, we want to support Timeline Service v2 as the primary source as we want to rely on a stable API and logs are flaky at best.
-
-3. Job resource requirements could vary across runs due to skewness, contention, input data or code changes, etc. We want to design a Reprovisioner module, which dynamically monitors job progress at runtime, identifies the performance bottlenecks if the progress is slower than expectation, and dynamically adjusts job's resource allocations accordingly using ReservationUpdateRequest.
-
-4. When Estimator predicts job's resource requirements, we want to provide the confidence level associated with the prediction according to the estimation error (combination of over-allocation and under-allocation), etc.
-
-5. For Estimator module, we can integrate machine learning tools such as reinforcement learning to make better prediction. We can also integrate with domain-specific solvers such as PerfOrator to improve prediction quality.
-
-6. For Estimator module, we want to design incremental solver, which can incrementally update job's resource requirements only based on the new logs.
diff --git a/hadoop-tools/hadoop-resourceestimator/src/site/resources/css/site.css b/hadoop-tools/hadoop-resourceestimator/src/site/resources/css/site.css
deleted file mode 100644
index 7315db31e53..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/site/resources/css/site.css
+++ /dev/null
@@ -1,29 +0,0 @@
-/*
-* Licensed to the Apache Software Foundation (ASF) under one or more
-* contributor license agreements.  See the NOTICE file distributed with
-* this work for additional information regarding copyright ownership.
-* The ASF licenses this file to You under the Apache License, Version 2.0
-* (the "License"); you may not use this file except in compliance with
-* the License.  You may obtain a copy of the License at
-*
-*     http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing, software
-* distributed under the License is distributed on an "AS IS" BASIS,
-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-* See the License for the specific language governing permissions and
-* limitations under the License.
-*/
-#banner {
-  height: 93px;
-  background: none;
-}
-
-#bannerLeft img {
-  margin-left: 30px;
-  margin-top: 10px;
-}
-
-#bannerRight img {
-  margin: 17px;
-}
diff --git a/hadoop-tools/hadoop-resourceestimator/src/site/resources/images/resourceestimator_arch.png b/hadoop-tools/hadoop-resourceestimator/src/site/resources/images/resourceestimator_arch.png
deleted file mode 100644
index 0a6b507a5fb77daabc72ed04fdc4136594b0d621..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 41981
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

diff --git a/hadoop-tools/hadoop-resourceestimator/src/site/resources/images/tpch_history.png b/hadoop-tools/hadoop-resourceestimator/src/site/resources/images/tpch_history.png
deleted file mode 100644
index 46e79a602b057c67d304399ba481cdfe726ca32b..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 53335
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

diff --git a/hadoop-tools/hadoop-resourceestimator/src/site/resources/images/tpch_predict.png b/hadoop-tools/hadoop-resourceestimator/src/site/resources/images/tpch_predict.png
deleted file mode 100644
index 6a0498d113cbca7f0bc225fda87f85ecb1b37af0..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 56581
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
R?t91p1fH&bF6*2UngB!FYp?(S

diff --git a/hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/common/api/TestResourceSkyline.java b/hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/common/api/TestResourceSkyline.java
deleted file mode 100644
index 65e1c34adc9..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/common/api/TestResourceSkyline.java
+++ /dev/null
@@ -1,128 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.hadoop.resourceestimator.common.api;
-
-import java.util.TreeMap;
-
-import org.apache.hadoop.yarn.api.records.Resource;
-import org.apache.hadoop.yarn.server.resourcemanager.reservation.RLESparseResourceAllocation;
-import org.apache.hadoop.yarn.server.resourcemanager.reservation.ReservationInterval;
-import org.apache.hadoop.yarn.util.resource.DefaultResourceCalculator;
-import org.junit.After;
-import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Test;
-
-/**
- * Test {@link ResourceSkyline} class.
- */
-public class TestResourceSkyline {
-  /**
-   * Testing variables.
-   */
-  private ResourceSkyline resourceSkyline;
-
-  private Resource resource1;
-  private Resource resource2;
-  private TreeMap<Long, Resource> resourceOverTime;
-  private RLESparseResourceAllocation skylineList;
-
-  @Before public final void setup() {
-    resourceOverTime = new TreeMap<>();
-    skylineList = new RLESparseResourceAllocation(resourceOverTime,
-        new DefaultResourceCalculator());
-    resource1 = Resource.newInstance(1024 * 100, 100);
-    resource2 = Resource.newInstance(1024 * 200, 200);
-  }
-
-  @Test public final void testGetJobId() {
-    Assert.assertNull(resourceSkyline);
-    ReservationInterval riAdd = new ReservationInterval(0, 10);
-    skylineList.addInterval(riAdd, resource1);
-    riAdd = new ReservationInterval(10, 20);
-    skylineList.addInterval(riAdd, resource1);
-    resourceSkyline =
-        new ResourceSkyline("1", 1024.5, 0, 20, resource1, skylineList);
-    Assert.assertEquals("1", resourceSkyline.getJobId());
-  }
-
-  @Test public final void testGetJobSubmissionTime() {
-    Assert.assertNull(resourceSkyline);
-    ReservationInterval riAdd = new ReservationInterval(0, 10);
-    skylineList.addInterval(riAdd, resource1);
-    riAdd = new ReservationInterval(10, 20);
-    skylineList.addInterval(riAdd, resource1);
-    resourceSkyline =
-        new ResourceSkyline("1", 1024.5, 0, 20, resource1, skylineList);
-    Assert.assertEquals(0, resourceSkyline.getJobSubmissionTime());
-  }
-
-  @Test public final void testGetJobFinishTime() {
-    Assert.assertNull(resourceSkyline);
-    ReservationInterval riAdd = new ReservationInterval(0, 10);
-    skylineList.addInterval(riAdd, resource1);
-    riAdd = new ReservationInterval(10, 20);
-    skylineList.addInterval(riAdd, resource1);
-    resourceSkyline =
-        new ResourceSkyline("1", 1024.5, 0, 20, resource1, skylineList);
-    Assert.assertEquals(20, resourceSkyline.getJobFinishTime());
-  }
-
-  @Test public final void testGetKthResource() {
-    Assert.assertNull(resourceSkyline);
-    ReservationInterval riAdd = new ReservationInterval(10, 20);
-    skylineList.addInterval(riAdd, resource1);
-    riAdd = new ReservationInterval(20, 30);
-    skylineList.addInterval(riAdd, resource2);
-    resourceSkyline =
-        new ResourceSkyline("1", 1024.5, 0, 20, resource1, skylineList);
-    final RLESparseResourceAllocation skylineList2 =
-        resourceSkyline.getSkylineList();
-    for (int i = 10; i < 20; i++) {
-      Assert.assertEquals(resource1.getMemorySize(),
-          skylineList2.getCapacityAtTime(i).getMemorySize());
-      Assert.assertEquals(resource1.getVirtualCores(),
-          skylineList2.getCapacityAtTime(i).getVirtualCores());
-    }
-    for (int i = 20; i < 30; i++) {
-      Assert.assertEquals(resource2.getMemorySize(),
-          skylineList2.getCapacityAtTime(i).getMemorySize());
-      Assert.assertEquals(resource2.getVirtualCores(),
-          skylineList2.getCapacityAtTime(i).getVirtualCores());
-    }
-    // test if resourceSkyline automatically extends the skyline with
-    // zero-resource at both ends
-    Assert.assertEquals(0, skylineList2.getCapacityAtTime(9).getMemorySize());
-    Assert.assertEquals(0, skylineList2.getCapacityAtTime(9).getVirtualCores());
-    Assert.assertEquals(0, skylineList2.getCapacityAtTime(30).getMemorySize());
-    Assert
-        .assertEquals(0, skylineList2.getCapacityAtTime(30).getVirtualCores());
-  }
-
-  @After public final void cleanUp() {
-    resourceSkyline = null;
-    resource1 = null;
-    resource2 = null;
-    resourceOverTime.clear();
-    resourceOverTime = null;
-    skylineList = null;
-  }
-}
diff --git a/hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/common/serialization/TestHistorySkylineSerDe.java b/hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/common/serialization/TestHistorySkylineSerDe.java
deleted file mode 100644
index 62743aad914..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/common/serialization/TestHistorySkylineSerDe.java
+++ /dev/null
@@ -1,134 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.hadoop.resourceestimator.common.serialization;
-
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.TreeMap;
-
-import org.apache.hadoop.resourceestimator.common.api.RecurrenceId;
-import org.apache.hadoop.resourceestimator.common.api.ResourceSkyline;
-import org.apache.hadoop.yarn.api.records.Resource;
-import org.apache.hadoop.yarn.server.resourcemanager.reservation.RLESparseResourceAllocation;
-import org.apache.hadoop.yarn.server.resourcemanager.reservation.ReservationInterval;
-import org.apache.hadoop.yarn.util.resource.DefaultResourceCalculator;
-import org.junit.After;
-import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Test;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.reflect.TypeToken;
-
-/**
- * Test HistorySkylineSerDe.
- */
-public class TestHistorySkylineSerDe {
-  /**
-   * Testing variables.
-   */
-  private Gson gson;
-
-  private ResourceSkyline resourceSkyline;
-  private Resource resource;
-  private Resource resource2;
-  private TreeMap<Long, Resource> resourceOverTime;
-  private RLESparseResourceAllocation skylineList;
-
-  @Before public final void setup() {
-    resourceOverTime = new TreeMap<>();
-    skylineList = new RLESparseResourceAllocation(resourceOverTime,
-        new DefaultResourceCalculator());
-    resource = Resource.newInstance(1024 * 100, 100);
-    resource2 = Resource.newInstance(1024 * 200, 200);
-    gson = new GsonBuilder()
-        .registerTypeAdapter(Resource.class, new ResourceSerDe())
-        .registerTypeAdapter(RLESparseResourceAllocation.class,
-            new RLESparseResourceAllocationSerDe())
-        .enableComplexMapKeySerialization().create();
-  }
-
-  @Test public final void testSerialization() {
-    ReservationInterval riAdd = new ReservationInterval(0, 10);
-    skylineList.addInterval(riAdd, resource);
-    riAdd = new ReservationInterval(10, 20);
-    skylineList.addInterval(riAdd, resource2);
-    resourceSkyline =
-        new ResourceSkyline("1", 1024.5, 0, 20, resource, skylineList);
-    RecurrenceId recurrenceId = new RecurrenceId("FraudDetection", "1");
-    List<ResourceSkyline> listSkyline = new ArrayList<>();
-    listSkyline.add(resourceSkyline);
-    Map<RecurrenceId, List<ResourceSkyline>> historySkyline =
-        new HashMap<RecurrenceId, List<ResourceSkyline>>();
-    historySkyline.put(recurrenceId, listSkyline);
-
-    final String json = gson.toJson(historySkyline,
-        new TypeToken<Map<RecurrenceId, List<ResourceSkyline>>>() {
-        }.getType());
-    final Map<RecurrenceId, List<ResourceSkyline>> historySkylineDe =
-        gson.fromJson(json,
-            new TypeToken<Map<RecurrenceId, List<ResourceSkyline>>>() {
-            }.getType());
-    // check if the recurrenceId is correct
-    List<ResourceSkyline> resourceSkylineList =
-        historySkylineDe.get(recurrenceId);
-    Assert.assertNotNull(resourceSkylineList);
-    Assert.assertEquals(1, resourceSkylineList.size());
-
-    // check if the resourceSkyline is correct
-    ResourceSkyline resourceSkylineDe = resourceSkylineList.get(0);
-    Assert
-        .assertEquals(resourceSkylineDe.getJobId(), resourceSkyline.getJobId());
-    Assert.assertEquals(resourceSkylineDe.getJobInputDataSize(),
-        resourceSkyline.getJobInputDataSize(), 0);
-    Assert.assertEquals(resourceSkylineDe.getJobSubmissionTime(),
-        resourceSkyline.getJobSubmissionTime());
-    Assert.assertEquals(resourceSkylineDe.getJobFinishTime(),
-        resourceSkyline.getJobFinishTime());
-    Assert.assertEquals(resourceSkylineDe.getContainerSpec().getMemorySize(),
-        resourceSkyline.getContainerSpec().getMemorySize());
-    Assert.assertEquals(resourceSkylineDe.getContainerSpec().getVirtualCores(),
-        resourceSkyline.getContainerSpec().getVirtualCores());
-    final RLESparseResourceAllocation skylineList2 =
-        resourceSkyline.getSkylineList();
-    final RLESparseResourceAllocation skylineListDe =
-        resourceSkylineDe.getSkylineList();
-    for (int i = 0; i < 20; i++) {
-      Assert.assertEquals(skylineList2.getCapacityAtTime(i).getMemorySize(),
-          skylineListDe.getCapacityAtTime(i).getMemorySize());
-      Assert.assertEquals(skylineList2.getCapacityAtTime(i).getVirtualCores(),
-          skylineListDe.getCapacityAtTime(i).getVirtualCores());
-    }
-  }
-
-  @After public final void cleanUp() {
-    gson = null;
-    resourceSkyline = null;
-    resourceOverTime.clear();
-    resourceOverTime = null;
-    resource = null;
-    resource2 = null;
-    skylineList = null;
-  }
-}
diff --git a/hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/common/serialization/TestResourceSerDe.java b/hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/common/serialization/TestResourceSerDe.java
deleted file mode 100644
index 8749e598f79..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/common/serialization/TestResourceSerDe.java
+++ /dev/null
@@ -1,64 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.hadoop.resourceestimator.common.serialization;
-
-import org.apache.hadoop.yarn.api.records.Resource;
-import org.junit.After;
-import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Test;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.reflect.TypeToken;
-
-/**
- * Test ResourceSerDe.
- */
-public class TestResourceSerDe {
-  /**
-   * Testing variables.
-   */
-  private Gson gson;
-
-  private Resource resource;
-
-  @Before public final void setup() {
-    resource = Resource.newInstance(1024 * 100, 100);
-    gson = new GsonBuilder()
-        .registerTypeAdapter(Resource.class, new ResourceSerDe()).create();
-  }
-
-  @Test public final void testSerialization() {
-    final String json = gson.toJson(resource, new TypeToken<Resource>() {
-    }.getType());
-    final Resource resourceDe = gson.fromJson(json, new TypeToken<Resource>() {
-    }.getType());
-    Assert.assertEquals(resource.getMemorySize(), resourceDe.getMemorySize());
-    Assert
-        .assertEquals(resource.getVirtualCores(), resourceDe.getVirtualCores());
-  }
-
-  @After public final void cleanUp() {
-    resource = null;
-    gson = null;
-  }
-}
diff --git a/hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/common/serialization/TestResourceSkylineSerDe.java b/hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/common/serialization/TestResourceSkylineSerDe.java
deleted file mode 100644
index 859ea1e06f0..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/common/serialization/TestResourceSkylineSerDe.java
+++ /dev/null
@@ -1,112 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.hadoop.resourceestimator.common.serialization;
-
-import java.util.TreeMap;
-
-import org.apache.hadoop.resourceestimator.common.api.ResourceSkyline;
-import org.apache.hadoop.yarn.api.records.Resource;
-import org.apache.hadoop.yarn.server.resourcemanager.reservation.RLESparseResourceAllocation;
-import org.apache.hadoop.yarn.server.resourcemanager.reservation.ReservationInterval;
-import org.apache.hadoop.yarn.util.resource.DefaultResourceCalculator;
-import org.junit.After;
-import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Test;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.reflect.TypeToken;
-
-/**
- * Test ResourceSkylineSerDe.
- */
-public class TestResourceSkylineSerDe {
-  /**
-   * Testing variables.
-   */
-  private Gson gson;
-
-  private ResourceSkyline resourceSkyline;
-  private Resource resource;
-  private Resource resource2;
-  private TreeMap<Long, Resource> resourceOverTime;
-  private RLESparseResourceAllocation skylineList;
-
-  @Before public final void setup() {
-    resourceOverTime = new TreeMap<>();
-    skylineList = new RLESparseResourceAllocation(resourceOverTime,
-        new DefaultResourceCalculator());
-    resource = Resource.newInstance(1024 * 100, 100);
-    resource2 = Resource.newInstance(1024 * 200, 200);
-    gson = new GsonBuilder()
-        .registerTypeAdapter(Resource.class, new ResourceSerDe())
-        .registerTypeAdapter(RLESparseResourceAllocation.class,
-            new RLESparseResourceAllocationSerDe()).create();
-  }
-
-  @Test public final void testSerialization() {
-    ReservationInterval riAdd = new ReservationInterval(0, 10);
-    skylineList.addInterval(riAdd, resource);
-    riAdd = new ReservationInterval(10, 20);
-    skylineList.addInterval(riAdd, resource2);
-    resourceSkyline =
-        new ResourceSkyline("1", 1024.5, 0, 20, resource, skylineList);
-    final String json =
-        gson.toJson(resourceSkyline, new TypeToken<ResourceSkyline>() {
-        }.getType());
-    final ResourceSkyline resourceSkylineDe =
-        gson.fromJson(json, new TypeToken<ResourceSkyline>() {
-        }.getType());
-    Assert
-        .assertEquals(resourceSkylineDe.getJobId(), resourceSkyline.getJobId());
-    Assert.assertEquals(resourceSkylineDe.getJobInputDataSize(),
-        resourceSkyline.getJobInputDataSize(), 0);
-    Assert.assertEquals(resourceSkylineDe.getJobSubmissionTime(),
-        resourceSkyline.getJobSubmissionTime());
-    Assert.assertEquals(resourceSkylineDe.getJobFinishTime(),
-        resourceSkyline.getJobFinishTime());
-    Assert.assertEquals(resourceSkylineDe.getContainerSpec().getMemorySize(),
-        resourceSkyline.getContainerSpec().getMemorySize());
-    Assert.assertEquals(resourceSkylineDe.getContainerSpec().getVirtualCores(),
-        resourceSkyline.getContainerSpec().getVirtualCores());
-    final RLESparseResourceAllocation skylineList2 =
-        resourceSkyline.getSkylineList();
-    final RLESparseResourceAllocation skylineListDe =
-        resourceSkylineDe.getSkylineList();
-    for (int i = 0; i < 20; i++) {
-      Assert.assertEquals(skylineList2.getCapacityAtTime(i).getMemorySize(),
-          skylineListDe.getCapacityAtTime(i).getMemorySize());
-      Assert.assertEquals(skylineList2.getCapacityAtTime(i).getVirtualCores(),
-          skylineListDe.getCapacityAtTime(i).getVirtualCores());
-    }
-  }
-
-  @After public final void cleanUp() {
-    gson = null;
-    resourceSkyline = null;
-    resourceOverTime.clear();
-    resourceOverTime = null;
-    resource = null;
-    resource2 = null;
-    skylineList = null;
-  }
-}
diff --git a/hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/common/serialization/package-info.java b/hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/common/serialization/package-info.java
deleted file mode 100644
index 06957b39a7e..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/common/serialization/package-info.java
+++ /dev/null
@@ -1,24 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-/**
- * SkylineStore serialization module.
- */
-package org.apache.hadoop.resourceestimator.common.serialization;
diff --git a/hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/service/GuiceServletConfig.java b/hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/service/GuiceServletConfig.java
deleted file mode 100644
index b72d3174028..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/service/GuiceServletConfig.java
+++ /dev/null
@@ -1,42 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
- * <p>
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.hadoop.resourceestimator.service;
-
-import com.google.inject.Injector;
-import com.google.inject.servlet.GuiceServletContextListener;
-
-/**
- * GuiceServletConfig is a wrapper class to have a static Injector instance
- * instead of having the instance inside test classes. This allow us to use
- * Jersey test framework after 1.13.
- * Please check test cases to know how to use this class:
- * e.g. TestRMWithCSRFFilter.java
- */
-public class GuiceServletConfig extends GuiceServletContextListener {
-
-  private static Injector internalInjector = null;
-
-  @Override protected Injector getInjector() {
-    return internalInjector;
-  }
-
-  public static Injector setInjector(Injector in) {
-    internalInjector = in;
-    return internalInjector;
-  }
-}
\ No newline at end of file
diff --git a/hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/service/TestResourceEstimatorService.java b/hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/service/TestResourceEstimatorService.java
deleted file mode 100644
index 785641cd60e..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/service/TestResourceEstimatorService.java
+++ /dev/null
@@ -1,257 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.hadoop.resourceestimator.service;
-
-import java.util.List;
-import java.util.Map;
-import java.util.TreeMap;
-
-import javax.ws.rs.core.MediaType;
-
-import org.apache.hadoop.resourceestimator.common.api.RecurrenceId;
-import org.apache.hadoop.resourceestimator.common.api.ResourceSkyline;
-import org.apache.hadoop.resourceestimator.common.serialization.RLESparseResourceAllocationSerDe;
-import org.apache.hadoop.resourceestimator.common.serialization.ResourceSerDe;
-import org.apache.hadoop.yarn.api.records.Resource;
-import org.apache.hadoop.yarn.server.resourcemanager.reservation.RLESparseResourceAllocation;
-import org.apache.hadoop.yarn.server.resourcemanager.reservation.ReservationInterval;
-import org.apache.hadoop.yarn.util.resource.DefaultResourceCalculator;
-import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Test;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.reflect.TypeToken;
-import com.sun.jersey.api.client.WebResource;
-import com.sun.jersey.test.framework.JerseyTest;
-
-/**
- * Test ResourceEstimatorService.
- */
-public class TestResourceEstimatorService extends JerseyTest {
-  private final String parseLogCommand = "resourceestimator/translator/"
-      + "src/test/resources/resourceEstimatorService.txt";
-  private final String getHistorySkylineCommand =
-      "resourceestimator/skylinestore/history/tpch_q12/*";
-  private final String getEstimatedSkylineCommand =
-      "resourceestimator/skylinestore/estimation/tpch_q12";
-  private final String makeEstimationCommand =
-      "resourceestimator/estimator/tpch_q12";
-  private final String deleteHistoryCommand =
-      "resourceestimator/skylinestore/history/tpch_q12/tpch_q12_1";
-  private static boolean setUpDone = false;
-  private Resource containerSpec;
-  private Gson gson;
-  private long containerMemAlloc;
-  private int containerCPUAlloc;
-
-  public TestResourceEstimatorService() {
-    super("org.apache.hadoop.resourceestimator.service");
-  }
-
-  @Before @Override public void setUp() throws Exception {
-    super.setUp();
-    containerMemAlloc = 1024;
-    containerCPUAlloc = 1;
-    containerSpec = Resource.newInstance(containerMemAlloc, containerCPUAlloc);
-    gson = new GsonBuilder()
-        .registerTypeAdapter(Resource.class, new ResourceSerDe())
-        .registerTypeAdapter(RLESparseResourceAllocation.class,
-            new RLESparseResourceAllocationSerDe())
-        .enableComplexMapKeySerialization().create();
-  }
-
-  private void compareResourceSkyline(final ResourceSkyline skyline1,
-      final ResourceSkyline skyline2) {
-    Assert.assertEquals(skyline1.getJobId(), skyline2.getJobId());
-    Assert.assertEquals(skyline1.getJobInputDataSize(),
-        skyline2.getJobInputDataSize(), 0);
-    Assert.assertEquals(skyline1.getJobSubmissionTime(),
-        skyline2.getJobSubmissionTime());
-    Assert
-        .assertEquals(skyline1.getJobFinishTime(), skyline2.getJobFinishTime());
-    Assert.assertEquals(skyline1.getContainerSpec().getMemorySize(),
-        skyline2.getContainerSpec().getMemorySize());
-    Assert.assertEquals(skyline1.getContainerSpec().getVirtualCores(),
-        skyline2.getContainerSpec().getVirtualCores());
-    final RLESparseResourceAllocation skylineList1 = skyline1.getSkylineList();
-    final RLESparseResourceAllocation skylineList2 = skyline2.getSkylineList();
-    for (int i = (int) skylineList1.getEarliestStartTime();
-         i < skylineList1.getLatestNonNullTime(); i++) {
-      Assert.assertEquals(skylineList1.getCapacityAtTime(i).getMemorySize(),
-          skylineList2.getCapacityAtTime(i).getMemorySize());
-      Assert.assertEquals(skylineList1.getCapacityAtTime(i).getVirtualCores(),
-          skylineList2.getCapacityAtTime(i).getVirtualCores());
-    }
-  }
-
-  private ResourceSkyline getSkyline1() {
-    final TreeMap<Long, Resource> resourceOverTime = new TreeMap<>();
-    ReservationInterval riAdd;
-    final RLESparseResourceAllocation skylineList =
-        new RLESparseResourceAllocation(resourceOverTime,
-            new DefaultResourceCalculator());
-    riAdd = new ReservationInterval(0, 10);
-    Resource resource =
-        Resource.newInstance(containerMemAlloc, containerCPUAlloc);
-    skylineList.addInterval(riAdd, resource);
-    riAdd = new ReservationInterval(10, 15);
-    resource = Resource
-        .newInstance(containerMemAlloc * 1074, containerCPUAlloc * 1074);
-    skylineList.addInterval(riAdd, resource);
-    riAdd = new ReservationInterval(15, 20);
-    resource = Resource
-        .newInstance(containerMemAlloc * 2538, containerCPUAlloc * 2538);
-    skylineList.addInterval(riAdd, resource);
-    riAdd = new ReservationInterval(20, 25);
-    resource = Resource
-        .newInstance(containerMemAlloc * 2468, containerCPUAlloc * 2468);
-    skylineList.addInterval(riAdd, resource);
-    final ResourceSkyline resourceSkyline1 =
-        new ResourceSkyline("tpch_q12_0", 0, 0, 25, containerSpec, skylineList);
-
-    return resourceSkyline1;
-  }
-
-  private ResourceSkyline getSkyline2() {
-    final TreeMap<Long, Resource> resourceOverTime = new TreeMap<>();
-    ReservationInterval riAdd;
-    final RLESparseResourceAllocation skylineList =
-        new RLESparseResourceAllocation(resourceOverTime,
-            new DefaultResourceCalculator());
-    riAdd = new ReservationInterval(0, 10);
-    Resource resource =
-        Resource.newInstance(containerMemAlloc, containerCPUAlloc);
-    skylineList.addInterval(riAdd, resource);
-    riAdd = new ReservationInterval(10, 15);
-    resource =
-        Resource.newInstance(containerMemAlloc * 794, containerCPUAlloc * 794);
-    skylineList.addInterval(riAdd, resource);
-    riAdd = new ReservationInterval(15, 20);
-    resource = Resource
-        .newInstance(containerMemAlloc * 2517, containerCPUAlloc * 2517);
-    skylineList.addInterval(riAdd, resource);
-    riAdd = new ReservationInterval(20, 25);
-    resource = Resource
-        .newInstance(containerMemAlloc * 2484, containerCPUAlloc * 2484);
-    skylineList.addInterval(riAdd, resource);
-    final ResourceSkyline resourceSkyline2 =
-        new ResourceSkyline("tpch_q12_1", 0, 0, 25, containerSpec, skylineList);
-
-    return resourceSkyline2;
-  }
-
-  private void checkResult(final String jobId,
-      final Map<RecurrenceId, List<ResourceSkyline>> jobHistory) {
-    switch (jobId) {
-    case "tpch_q12_0": {
-      final RecurrenceId recurrenceId =
-          new RecurrenceId("tpch_q12", "tpch_q12_0");
-      Assert.assertEquals(1, jobHistory.get(recurrenceId).size());
-      ResourceSkyline skylineReceive = jobHistory.get(recurrenceId).get(0);
-      compareResourceSkyline(skylineReceive, getSkyline1());
-      break;
-    }
-    case "tpch_q12_1": {
-      final RecurrenceId recurrenceId =
-          new RecurrenceId("tpch_q12", "tpch_q12_1");
-      Assert.assertEquals(1, jobHistory.get(recurrenceId).size());
-      ResourceSkyline skylineReceive = jobHistory.get(recurrenceId).get(0);
-      compareResourceSkyline(skylineReceive, getSkyline2());
-      break;
-    }
-    default:
-      break;
-    }
-  }
-
-  private void compareRLESparseResourceAllocation(
-      final RLESparseResourceAllocation rle1,
-      final RLESparseResourceAllocation rle2) {
-    for (int i = (int) rle1.getEarliestStartTime();
-         i < rle1.getLatestNonNullTime(); i++) {
-      Assert.assertEquals(rle1.getCapacityAtTime(i), rle2.getCapacityAtTime(i));
-    }
-  }
-
-  @Test public void testGetPrediction() {
-    // first, parse the log
-    final String logFile = "resourceEstimatorService.txt";
-    WebResource webResource = resource();
-    webResource.path(parseLogCommand).type(MediaType.APPLICATION_XML_TYPE)
-        .post(logFile);
-    webResource = resource().path(getHistorySkylineCommand);
-    String response = webResource.get(String.class);
-    Map<RecurrenceId, List<ResourceSkyline>> jobHistory =
-        gson.fromJson(response,
-            new TypeToken<Map<RecurrenceId, List<ResourceSkyline>>>() {
-            }.getType());
-    checkResult("tpch_q12_0", jobHistory);
-    checkResult("tpch_q12_1", jobHistory);
-    // then, try to get estimated resource allocation from skyline store
-    webResource = resource().path(getEstimatedSkylineCommand);
-    response = webResource.get(String.class);
-    Assert.assertEquals("null", response);
-    // then, we call estimator module to make the prediction
-    webResource = resource().path(makeEstimationCommand);
-    response = webResource.get(String.class);
-    RLESparseResourceAllocation skylineList =
-        gson.fromJson(response, new TypeToken<RLESparseResourceAllocation>() {
-        }.getType());
-    Assert.assertEquals(1,
-        skylineList.getCapacityAtTime(0).getMemorySize() / containerMemAlloc);
-    Assert.assertEquals(1058,
-        skylineList.getCapacityAtTime(10).getMemorySize() / containerMemAlloc);
-    Assert.assertEquals(2538,
-        skylineList.getCapacityAtTime(15).getMemorySize() / containerMemAlloc);
-    Assert.assertEquals(2484,
-        skylineList.getCapacityAtTime(20).getMemorySize() / containerMemAlloc);
-    // then, we get estimated resource allocation for tpch_q12
-    webResource = resource().path(getEstimatedSkylineCommand);
-    response = webResource.get(String.class);
-    final RLESparseResourceAllocation skylineList2 =
-        gson.fromJson(response, new TypeToken<RLESparseResourceAllocation>() {
-        }.getType());
-    compareRLESparseResourceAllocation(skylineList, skylineList2);
-    // then, we call estimator module again to directly get estimated resource
-    // allocation from skyline store
-    webResource = resource().path(makeEstimationCommand);
-    response = webResource.get(String.class);
-    final RLESparseResourceAllocation skylineList3 =
-        gson.fromJson(response, new TypeToken<RLESparseResourceAllocation>() {
-        }.getType());
-    compareRLESparseResourceAllocation(skylineList, skylineList3);
-    // finally, test delete
-    webResource = resource().path(deleteHistoryCommand);
-    webResource.delete();
-    webResource = resource().path(getHistorySkylineCommand);
-    response = webResource.get(String.class);
-    jobHistory = gson.fromJson(response,
-        new TypeToken<Map<RecurrenceId, List<ResourceSkyline>>>() {
-        }.getType());
-    // jobHistory should only have info for tpch_q12_0
-    Assert.assertEquals(1, jobHistory.size());
-    final String pipelineId =
-        ((RecurrenceId) jobHistory.keySet().toArray()[0]).getRunId();
-    Assert.assertEquals("tpch_q12_0", pipelineId);
-  }
-}
diff --git a/hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/skylinestore/impl/TestInMemoryStore.java b/hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/skylinestore/impl/TestInMemoryStore.java
deleted file mode 100644
index 4aefab4f268..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/skylinestore/impl/TestInMemoryStore.java
+++ /dev/null
@@ -1,32 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.hadoop.resourceestimator.skylinestore.impl;
-
-import org.apache.hadoop.resourceestimator.skylinestore.api.SkylineStore;
-
-/**
- * Test {@link InMemoryStore} class.
- */
-public class TestInMemoryStore extends TestSkylineStore {
-  @Override public final SkylineStore createSkylineStore() {
-    return new InMemoryStore();
-  }
-}
diff --git a/hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/skylinestore/impl/TestSkylineStore.java b/hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/skylinestore/impl/TestSkylineStore.java
deleted file mode 100644
index e333e3ff263..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/skylinestore/impl/TestSkylineStore.java
+++ /dev/null
@@ -1,464 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.hadoop.resourceestimator.skylinestore.impl;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Map;
-import java.util.TreeMap;
-
-import org.apache.hadoop.resourceestimator.common.api.RecurrenceId;
-import org.apache.hadoop.resourceestimator.common.api.ResourceSkyline;
-import org.apache.hadoop.resourceestimator.skylinestore.api.SkylineStore;
-import org.apache.hadoop.resourceestimator.skylinestore.exceptions.DuplicateRecurrenceIdException;
-import org.apache.hadoop.resourceestimator.skylinestore.exceptions.EmptyResourceSkylineException;
-import org.apache.hadoop.resourceestimator.skylinestore.exceptions.NullPipelineIdException;
-import org.apache.hadoop.resourceestimator.skylinestore.exceptions.NullRLESparseResourceAllocationException;
-import org.apache.hadoop.resourceestimator.skylinestore.exceptions.NullRecurrenceIdException;
-import org.apache.hadoop.resourceestimator.skylinestore.exceptions.NullResourceSkylineException;
-import org.apache.hadoop.resourceestimator.skylinestore.exceptions.RecurrenceIdNotFoundException;
-import org.apache.hadoop.resourceestimator.skylinestore.exceptions.SkylineStoreException;
-import org.apache.hadoop.yarn.api.records.Resource;
-import org.apache.hadoop.yarn.server.resourcemanager.reservation.RLESparseResourceAllocation;
-import org.apache.hadoop.yarn.server.resourcemanager.reservation.ReservationInterval;
-import org.apache.hadoop.yarn.util.resource.DefaultResourceCalculator;
-import org.junit.After;
-import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Test;
-
-/**
- * Test {@link SkylineStore} class.
- */
-public abstract class TestSkylineStore {
-  /**
-   * Testing variables.
-   */
-  private SkylineStore skylineStore;
-
-  private TreeMap<Long, Resource> resourceOverTime;
-  private RLESparseResourceAllocation skylineList;
-  private ReservationInterval riAdd;
-  private Resource resource;
-
-  protected abstract SkylineStore createSkylineStore();
-
-  @Before public final void setup() {
-    skylineStore = createSkylineStore();
-    resourceOverTime = new TreeMap<>();
-    resource = Resource.newInstance(1024 * 100, 100);
-  }
-
-  private void compare(final ResourceSkyline skyline1,
-      final ResourceSkyline skyline2) {
-    Assert.assertEquals(skyline1.getJobId(), skyline2.getJobId());
-    Assert.assertEquals(skyline1.getJobInputDataSize(),
-        skyline2.getJobInputDataSize(), 0);
-    Assert.assertEquals(skyline1.getJobSubmissionTime(),
-        skyline2.getJobSubmissionTime());
-    Assert
-        .assertEquals(skyline1.getJobFinishTime(), skyline2.getJobFinishTime());
-    Assert.assertEquals(skyline1.getContainerSpec().getMemorySize(),
-        skyline2.getContainerSpec().getMemorySize());
-    Assert.assertEquals(skyline1.getContainerSpec().getVirtualCores(),
-        skyline2.getContainerSpec().getVirtualCores());
-    Assert.assertEquals(true,
-        skyline2.getSkylineList().equals(skyline1.getSkylineList()));
-  }
-
-  private void addToStore(final RecurrenceId recurrenceId,
-      final ResourceSkyline resourceSkyline) throws SkylineStoreException {
-    final List<ResourceSkyline> resourceSkylines = new ArrayList<>();
-    resourceSkylines.add(resourceSkyline);
-    skylineStore.addHistory(recurrenceId, resourceSkylines);
-    final List<ResourceSkyline> resourceSkylinesGet =
-        skylineStore.getHistory(recurrenceId).get(recurrenceId);
-    Assert.assertTrue(resourceSkylinesGet.contains(resourceSkyline));
-  }
-
-  private ResourceSkyline getSkyline(final int n) {
-    skylineList = new RLESparseResourceAllocation(resourceOverTime,
-        new DefaultResourceCalculator());
-    for (int i = 0; i < n; i++) {
-      riAdd = new ReservationInterval(i * 10, (i + 1) * 10);
-      skylineList.addInterval(riAdd, resource);
-    }
-    final ResourceSkyline resourceSkyline =
-        new ResourceSkyline(Integer.toString(n), 1024.5, 0, 20, resource,
-            skylineList);
-
-    return resourceSkyline;
-  }
-
-  @Test public final void testGetHistory() throws SkylineStoreException {
-    // addHistory first recurring pipeline
-    final RecurrenceId recurrenceId1 =
-        new RecurrenceId("FraudDetection", "17/06/20 00:00:00");
-    final ResourceSkyline resourceSkyline1 = getSkyline(1);
-    addToStore(recurrenceId1, resourceSkyline1);
-    final ResourceSkyline resourceSkyline2 = getSkyline(2);
-    addToStore(recurrenceId1, resourceSkyline2);
-    final RecurrenceId recurrenceId2 =
-        new RecurrenceId("FraudDetection", "17/06/21 00:00:00");
-    final ResourceSkyline resourceSkyline3 = getSkyline(3);
-    addToStore(recurrenceId2, resourceSkyline3);
-    final ResourceSkyline resourceSkyline4 = getSkyline(4);
-    addToStore(recurrenceId2, resourceSkyline4);
-    // addHistory second recurring pipeline
-    final RecurrenceId recurrenceId3 =
-        new RecurrenceId("Random", "17/06/20 00:00:00");
-    addToStore(recurrenceId3, resourceSkyline1);
-    addToStore(recurrenceId3, resourceSkyline2);
-    // test getHistory {pipelineId, runId}
-    Map<RecurrenceId, List<ResourceSkyline>> jobHistory =
-        skylineStore.getHistory(recurrenceId1);
-    Assert.assertEquals(1, jobHistory.size());
-    for (final Map.Entry<RecurrenceId, List<ResourceSkyline>> entry : jobHistory
-        .entrySet()) {
-      Assert.assertEquals(recurrenceId1, entry.getKey());
-      final List<ResourceSkyline> getSkylines = entry.getValue();
-      Assert.assertEquals(2, getSkylines.size());
-      compare(resourceSkyline1, getSkylines.get(0));
-      compare(resourceSkyline2, getSkylines.get(1));
-    }
-    // test getHistory {pipelineId, *}
-    RecurrenceId recurrenceIdTest = new RecurrenceId("FraudDetection", "*");
-    jobHistory = skylineStore.getHistory(recurrenceIdTest);
-    Assert.assertEquals(2, jobHistory.size());
-    for (final Map.Entry<RecurrenceId, List<ResourceSkyline>> entry : jobHistory
-        .entrySet()) {
-      Assert.assertEquals(recurrenceId1.getPipelineId(),
-          entry.getKey().getPipelineId());
-      final List<ResourceSkyline> getSkylines = entry.getValue();
-      if (entry.getKey().getRunId().equals("17/06/20 00:00:00")) {
-        Assert.assertEquals(2, getSkylines.size());
-        compare(resourceSkyline1, getSkylines.get(0));
-        compare(resourceSkyline2, getSkylines.get(1));
-      } else {
-        Assert.assertEquals(entry.getKey().getRunId(), "17/06/21 00:00:00");
-        Assert.assertEquals(2, getSkylines.size());
-        compare(resourceSkyline3, getSkylines.get(0));
-        compare(resourceSkyline4, getSkylines.get(1));
-      }
-    }
-    // test getHistory {*, runId}
-    recurrenceIdTest = new RecurrenceId("*", "some random runId");
-    jobHistory = skylineStore.getHistory(recurrenceIdTest);
-    Assert.assertEquals(3, jobHistory.size());
-    for (final Map.Entry<RecurrenceId, List<ResourceSkyline>> entry : jobHistory
-        .entrySet()) {
-      if (entry.getKey().getPipelineId().equals("FraudDetection")) {
-        final List<ResourceSkyline> getSkylines = entry.getValue();
-        if (entry.getKey().getRunId().equals("17/06/20 00:00:00")) {
-          Assert.assertEquals(2, getSkylines.size());
-          compare(resourceSkyline1, getSkylines.get(0));
-          compare(resourceSkyline2, getSkylines.get(1));
-        } else {
-          Assert.assertEquals(entry.getKey().getRunId(), "17/06/21 00:00:00");
-          Assert.assertEquals(2, getSkylines.size());
-          compare(resourceSkyline3, getSkylines.get(0));
-          compare(resourceSkyline4, getSkylines.get(1));
-        }
-      } else {
-        Assert.assertEquals("Random", entry.getKey().getPipelineId());
-        Assert.assertEquals(entry.getKey().getRunId(), "17/06/20 00:00:00");
-        final List<ResourceSkyline> getSkylines = entry.getValue();
-        Assert.assertEquals(2, getSkylines.size());
-        compare(resourceSkyline1, getSkylines.get(0));
-        compare(resourceSkyline2, getSkylines.get(1));
-      }
-    }
-    // test getHistory with wrong RecurrenceId
-    recurrenceIdTest =
-        new RecurrenceId("some random pipelineId", "some random runId");
-    Assert.assertNull(skylineStore.getHistory(recurrenceIdTest));
-  }
-
-  @Test public final void testGetEstimation() throws SkylineStoreException {
-    // first, add estimation to the skyline store
-    final RLESparseResourceAllocation skylineList2 =
-        new RLESparseResourceAllocation(resourceOverTime,
-            new DefaultResourceCalculator());
-    for (int i = 0; i < 5; i++) {
-      riAdd = new ReservationInterval(i * 10, (i + 1) * 10);
-      skylineList2.addInterval(riAdd, resource);
-    }
-    skylineStore.addEstimation("FraudDetection", skylineList2);
-    // then, try to get the estimation
-    final RLESparseResourceAllocation estimation =
-        skylineStore.getEstimation("FraudDetection");
-    for (int i = 0; i < 50; i++) {
-      Assert.assertEquals(skylineList2.getCapacityAtTime(i),
-          estimation.getCapacityAtTime(i));
-    }
-  }
-
-  @Test(expected = NullRecurrenceIdException.class)
-  public final void testGetNullRecurrenceId()
-      throws SkylineStoreException {
-    // addHistory first recurring pipeline
-    final RecurrenceId recurrenceId1 =
-        new RecurrenceId("FraudDetection", "17/06/20 00:00:00");
-    final ResourceSkyline resourceSkyline1 = getSkyline(1);
-    addToStore(recurrenceId1, resourceSkyline1);
-    final ResourceSkyline resourceSkyline2 = getSkyline(2);
-    addToStore(recurrenceId1, resourceSkyline2);
-    final RecurrenceId recurrenceId2 =
-        new RecurrenceId("FraudDetection", "17/06/21 00:00:00");
-    final ResourceSkyline resourceSkyline3 = getSkyline(3);
-    addToStore(recurrenceId2, resourceSkyline3);
-    final ResourceSkyline resourceSkyline4 = getSkyline(4);
-    addToStore(recurrenceId2, resourceSkyline4);
-    // addHistory second recurring pipeline
-    final RecurrenceId recurrenceId3 =
-        new RecurrenceId("Random", "17/06/20 00:00:00");
-    addToStore(recurrenceId3, resourceSkyline1);
-    addToStore(recurrenceId3, resourceSkyline2);
-    // try to getHistory with null recurringId
-    skylineStore.getHistory(null);
-  }
-
-  @Test(expected = NullPipelineIdException.class)
-  public final void testGetNullPipelineIdException()
-      throws SkylineStoreException {
-    skylineStore.getEstimation(null);
-  }
-
-  @Test public final void testAddNormal() throws SkylineStoreException {
-    // addHistory resource skylines to the in-memory store
-    final RecurrenceId recurrenceId =
-        new RecurrenceId("FraudDetection", "17/06/20 00:00:00");
-    final ResourceSkyline resourceSkyline1 = getSkyline(1);
-    addToStore(recurrenceId, resourceSkyline1);
-    final ArrayList<ResourceSkyline> resourceSkylines =
-        new ArrayList<ResourceSkyline>();
-    // the resource skylines to be added contain null
-    resourceSkylines.add(null);
-    final ResourceSkyline resourceSkyline2 = getSkyline(2);
-    resourceSkylines.add(resourceSkyline2);
-    skylineStore.addHistory(recurrenceId, resourceSkylines);
-    // query the in-memory store
-    final Map<RecurrenceId, List<ResourceSkyline>> jobHistory =
-        skylineStore.getHistory(recurrenceId);
-    Assert.assertEquals(1, jobHistory.size());
-    for (final Map.Entry<RecurrenceId, List<ResourceSkyline>> entry : jobHistory
-        .entrySet()) {
-      Assert.assertEquals(recurrenceId, entry.getKey());
-      final List<ResourceSkyline> getSkylines = entry.getValue();
-      Assert.assertEquals(2, getSkylines.size());
-      compare(resourceSkyline1, getSkylines.get(0));
-      compare(resourceSkyline2, getSkylines.get(1));
-    }
-  }
-
-  @Test(expected = NullRecurrenceIdException.class)
-  public final void testAddNullRecurrenceId()
-      throws SkylineStoreException {
-    // recurrenceId is null
-    final RecurrenceId recurrenceIdNull = null;
-    final ArrayList<ResourceSkyline> resourceSkylines =
-        new ArrayList<ResourceSkyline>();
-    final ResourceSkyline resourceSkyline1 = getSkyline(1);
-    resourceSkylines.add(resourceSkyline1);
-    skylineStore.addHistory(recurrenceIdNull, resourceSkylines);
-  }
-
-  @Test(expected = NullResourceSkylineException.class)
-  public final void testAddNullResourceSkyline()
-      throws SkylineStoreException {
-    final RecurrenceId recurrenceId =
-        new RecurrenceId("FraudDetection", "17/06/20 00:00:00");
-    final ArrayList<ResourceSkyline> resourceSkylines =
-        new ArrayList<ResourceSkyline>();
-    final ResourceSkyline resourceSkyline1 = getSkyline(1);
-    resourceSkylines.add(resourceSkyline1);
-    // resourceSkylines is null
-    skylineStore.addHistory(recurrenceId, null);
-  }
-
-  @Test(expected = DuplicateRecurrenceIdException.class)
-  public final void testAddDuplicateRecurrenceId()
-      throws SkylineStoreException {
-    final RecurrenceId recurrenceId =
-        new RecurrenceId("FraudDetection", "17/06/20 00:00:00");
-    final ArrayList<ResourceSkyline> resourceSkylines =
-        new ArrayList<ResourceSkyline>();
-    final ResourceSkyline resourceSkyline1 = getSkyline(1);
-    resourceSkylines.add(resourceSkyline1);
-    // trying to addHistory duplicate resource skylines
-    skylineStore.addHistory(recurrenceId, resourceSkylines);
-    skylineStore.addHistory(recurrenceId, resourceSkylines);
-  }
-
-  @Test(expected = NullPipelineIdException.class)
-  public final void testAddNullPipelineIdException()
-      throws SkylineStoreException {
-    final RLESparseResourceAllocation skylineList2 =
-        new RLESparseResourceAllocation(resourceOverTime,
-            new DefaultResourceCalculator());
-    for (int i = 0; i < 5; i++) {
-      riAdd = new ReservationInterval(i * 10, (i + 1) * 10);
-      skylineList2.addInterval(riAdd, resource);
-    }
-    skylineStore.addEstimation(null, skylineList2);
-  }
-
-  @Test(expected = NullRLESparseResourceAllocationException.class)
-  public final void testAddNullRLESparseResourceAllocationExceptionException()
-      throws SkylineStoreException {
-    skylineStore.addEstimation("FraudDetection", null);
-  }
-
-  @Test public final void testDeleteNormal() throws SkylineStoreException {
-    // addHistory first recurring pipeline
-    final RecurrenceId recurrenceId1 =
-        new RecurrenceId("FraudDetection", "17/06/20 00:00:00");
-    final ResourceSkyline resourceSkyline1 = getSkyline(1);
-    addToStore(recurrenceId1, resourceSkyline1);
-    final ResourceSkyline resourceSkyline2 = getSkyline(2);
-    addToStore(recurrenceId1, resourceSkyline2);
-    // test deleteHistory function of the in-memory store
-    skylineStore.deleteHistory(recurrenceId1);
-  }
-
-  @Test(expected = NullRecurrenceIdException.class)
-  public final void testDeleteNullRecurrenceId()
-      throws SkylineStoreException {
-    final RecurrenceId recurrenceId1 =
-        new RecurrenceId("FraudDetection", "17/06/20 00:00:00");
-    final ResourceSkyline resourceSkyline1 = getSkyline(1);
-    addToStore(recurrenceId1, resourceSkyline1);
-    // try to deleteHistory with null recurringId
-    skylineStore.deleteHistory(null);
-  }
-
-  @Test(expected = RecurrenceIdNotFoundException.class)
-  public final void testDeleteRecurrenceIdNotFound()
-      throws SkylineStoreException {
-    final RecurrenceId recurrenceId1 =
-        new RecurrenceId("FraudDetection", "17/06/20 00:00:00");
-    final ResourceSkyline resourceSkyline1 = getSkyline(1);
-    addToStore(recurrenceId1, resourceSkyline1);
-    final RecurrenceId recurrenceIdInvalid =
-        new RecurrenceId("Some random pipelineId", "Some random runId");
-    // try to deleteHistory non-existing recurringId
-    skylineStore.deleteHistory(recurrenceIdInvalid);
-  }
-
-  @Test public final void testUpdateNormal() throws SkylineStoreException {
-    // addHistory first recurring pipeline
-    final RecurrenceId recurrenceId1 =
-        new RecurrenceId("FraudDetection", "17/06/20 00:00:00");
-    final ResourceSkyline resourceSkyline1 = getSkyline(1);
-    addToStore(recurrenceId1, resourceSkyline1);
-    final ArrayList<ResourceSkyline> resourceSkylines =
-        new ArrayList<ResourceSkyline>();
-    final ResourceSkyline resourceSkyline2 = getSkyline(2);
-    resourceSkylines.add(resourceSkyline1);
-    resourceSkylines.add(resourceSkyline2);
-    skylineStore.updateHistory(recurrenceId1, resourceSkylines);
-    // query the in-memory store
-    final Map<RecurrenceId, List<ResourceSkyline>> jobHistory =
-        skylineStore.getHistory(recurrenceId1);
-    Assert.assertEquals(1, jobHistory.size());
-    for (final Map.Entry<RecurrenceId, List<ResourceSkyline>> entry : jobHistory
-        .entrySet()) {
-      Assert.assertEquals(recurrenceId1, entry.getKey());
-      final List<ResourceSkyline> getSkylines = entry.getValue();
-      Assert.assertEquals(2, getSkylines.size());
-      compare(resourceSkyline1, getSkylines.get(0));
-      compare(resourceSkyline2, getSkylines.get(1));
-    }
-  }
-
-  @Test(expected = NullRecurrenceIdException.class)
-  public final void testUpdateNullRecurrenceId()
-      throws SkylineStoreException {
-    final ArrayList<ResourceSkyline> resourceSkylines =
-        new ArrayList<ResourceSkyline>();
-    final ResourceSkyline resourceSkyline1 = getSkyline(1);
-    resourceSkylines.add(resourceSkyline1);
-    final ArrayList<ResourceSkyline> resourceSkylinesInvalid =
-        new ArrayList<ResourceSkyline>();
-    resourceSkylinesInvalid.add(null);
-    // try to updateHistory with null recurringId
-    skylineStore.updateHistory(null, resourceSkylines);
-  }
-
-  @Test(expected = NullResourceSkylineException.class)
-  public final void testUpdateNullResourceSkyline()
-      throws SkylineStoreException {
-    final RecurrenceId recurrenceId =
-        new RecurrenceId("FraudDetection", "17/06/20 00:00:00");
-    final ArrayList<ResourceSkyline> resourceSkylines =
-        new ArrayList<ResourceSkyline>();
-    final ResourceSkyline resourceSkyline1 = getSkyline(1);
-    resourceSkylines.add(resourceSkyline1);
-    final ArrayList<ResourceSkyline> resourceSkylinesInvalid =
-        new ArrayList<ResourceSkyline>();
-    resourceSkylinesInvalid.add(null);
-    // try to updateHistory with null resourceSkylines
-    skylineStore.addHistory(recurrenceId, resourceSkylines);
-    skylineStore.updateHistory(recurrenceId, null);
-  }
-
-  @Test(expected = EmptyResourceSkylineException.class)
-  public final void testUpdateEmptyRecurrenceId()
-      throws SkylineStoreException {
-    final RecurrenceId recurrenceId =
-        new RecurrenceId("FraudDetection", "17/06/20 00:00:00");
-    final ArrayList<ResourceSkyline> resourceSkylines =
-        new ArrayList<ResourceSkyline>();
-    final ResourceSkyline resourceSkyline1 = getSkyline(1);
-    resourceSkylines.add(resourceSkyline1);
-    final ArrayList<ResourceSkyline> resourceSkylinesInvalid =
-        new ArrayList<ResourceSkyline>();
-    resourceSkylinesInvalid.add(null);
-    skylineStore.addHistory(recurrenceId, resourceSkylines);
-    // try to updateHistory with empty resourceSkyline
-    skylineStore.updateHistory(recurrenceId, resourceSkylinesInvalid);
-  }
-
-  @Test(expected = RecurrenceIdNotFoundException.class)
-  public final void testUpdateRecurrenceIdNotFound()
-      throws SkylineStoreException {
-    final ArrayList<ResourceSkyline> resourceSkylines =
-        new ArrayList<ResourceSkyline>();
-    final ResourceSkyline resourceSkyline1 = getSkyline(1);
-    resourceSkylines.add(resourceSkyline1);
-    final RecurrenceId recurrenceIdInvalid =
-        new RecurrenceId("Some random pipelineId", "Some random runId");
-    final ArrayList<ResourceSkyline> resourceSkylinesInvalid =
-        new ArrayList<ResourceSkyline>();
-    resourceSkylinesInvalid.add(null);
-    // try to updateHistory with non-existing recurringId
-    skylineStore.updateHistory(recurrenceIdInvalid, resourceSkylines);
-  }
-
-  @After public final void cleanUp() {
-    skylineStore = null;
-    resourceOverTime.clear();
-    resourceOverTime = null;
-    skylineList = null;
-    riAdd = null;
-    resource = null;
-  }
-}
diff --git a/hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/solver/impl/TestLpSolver.java b/hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/solver/impl/TestLpSolver.java
deleted file mode 100644
index 1bce63466a5..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/solver/impl/TestLpSolver.java
+++ /dev/null
@@ -1,112 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.hadoop.resourceestimator.solver.impl;
-
-import org.apache.hadoop.conf.Configuration;
-import org.apache.hadoop.resourceestimator.common.api.RecurrenceId;
-import org.apache.hadoop.resourceestimator.common.api.ResourceSkyline;
-import org.apache.hadoop.resourceestimator.common.config.ResourceEstimatorConfiguration;
-import org.apache.hadoop.resourceestimator.common.exception.ResourceEstimatorException;
-import org.apache.hadoop.resourceestimator.skylinestore.exceptions.SkylineStoreException;
-import org.apache.hadoop.resourceestimator.skylinestore.impl.InMemoryStore;
-import org.apache.hadoop.resourceestimator.solver.api.Solver;
-import org.apache.hadoop.resourceestimator.solver.exceptions.SolverException;
-import org.apache.hadoop.resourceestimator.translator.api.LogParser;
-import org.apache.hadoop.resourceestimator.translator.exceptions.DataFieldNotFoundException;
-import org.apache.hadoop.resourceestimator.translator.impl.BaseLogParser;
-import org.apache.hadoop.yarn.server.resourcemanager.reservation.RLESparseResourceAllocation;
-import org.junit.Test;
-
-import java.io.BufferedReader;
-import java.io.FileInputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.io.Reader;
-import java.nio.charset.StandardCharsets;
-import java.text.ParseException;
-import java.util.List;
-import java.util.Map;
-
-import static org.junit.Assert.assertEquals;
-
-/**
- * This LPSolver class will make resource estimation using Linear Programming
- * model. We use ojAlgo solver to solve the model.
- */
-public class TestLpSolver extends TestSolver {
-  private static final LogParser SAMPLEPARSER = new BaseLogParser();
-  private Solver solver;
-  private InMemoryStore skylineStore = new InMemoryStore();
-
-  private void parseLog(final String inputLog)
-      throws SolverException, IOException, SkylineStoreException,
-      DataFieldNotFoundException, ParseException {
-    final InputStream logs = new FileInputStream(inputLog);
-    SAMPLEPARSER.parseStream(logs);
-  }
-
-  @Override protected Solver createSolver() throws ResourceEstimatorException {
-    solver = new LpSolver();
-    Configuration config = new Configuration();
-    config.addResource(ResourceEstimatorConfiguration.CONFIG_FILE);
-    solver.init(config, skylineStore);
-    SAMPLEPARSER.init(config, skylineStore);
-    return solver;
-  }
-
-  @Test public void testSolve()
-      throws IOException, SkylineStoreException, SolverException,
-      ResourceEstimatorException, DataFieldNotFoundException, ParseException {
-    parseLog("src/test/resources/lp/tpch_q12.txt");
-    RecurrenceId recurrenceId = new RecurrenceId("tpch_q12", "*");
-    final Map<RecurrenceId, List<ResourceSkyline>> jobHistory =
-        skylineStore.getHistory(recurrenceId);
-    solver = createSolver();
-    RLESparseResourceAllocation result = solver.solve(jobHistory);
-    String file = "src/test/resources/lp/answer.txt";
-    Reader fileReader = new InputStreamReader(new FileInputStream(file),
-        StandardCharsets.UTF_8);
-    BufferedReader bufferedReader = new BufferedReader(fileReader);
-    String line = bufferedReader.readLine();
-    Configuration config = new Configuration();
-    config.addResource(new org.apache.hadoop.fs.Path(
-        ResourceEstimatorConfiguration.CONFIG_FILE));
-    int timeInterval =
-        config.getInt(ResourceEstimatorConfiguration.TIME_INTERVAL_KEY, 5);
-    final long containerMemAlloc =
-        jobHistory.entrySet().iterator().next().getValue().get(0)
-            .getContainerSpec().getMemorySize();
-    int count = 0;
-    int numContainer = 0;
-    while (line != null) {
-      numContainer =
-          (int) (result.getCapacityAtTime(count * timeInterval).getMemorySize()
-              / containerMemAlloc);
-      assertEquals(Integer.parseInt(line), numContainer,
-          0.1 * Integer.parseInt(line));
-      line = bufferedReader.readLine();
-      count++;
-    }
-    fileReader.close();
-    bufferedReader.close();
-  }
-}
diff --git a/hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/solver/impl/TestSolver.java b/hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/solver/impl/TestSolver.java
deleted file mode 100644
index 11df6cde4c9..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/solver/impl/TestSolver.java
+++ /dev/null
@@ -1,73 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.hadoop.resourceestimator.solver.impl;
-
-import java.io.IOException;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import org.apache.hadoop.resourceestimator.common.api.RecurrenceId;
-import org.apache.hadoop.resourceestimator.common.api.ResourceSkyline;
-import org.apache.hadoop.resourceestimator.common.exception.ResourceEstimatorException;
-import org.apache.hadoop.resourceestimator.skylinestore.exceptions.SkylineStoreException;
-import org.apache.hadoop.resourceestimator.solver.api.Solver;
-import org.apache.hadoop.resourceestimator.solver.exceptions.InvalidInputException;
-import org.apache.hadoop.resourceestimator.solver.exceptions.SolverException;
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-
-/**
- * This LPSolver class will make resource estimation using Linear Programming
- * model. We use Google Or Tool to solve the model.
- */
-public abstract class TestSolver {
-  private Solver solver;
-
-  protected abstract Solver createSolver() throws ResourceEstimatorException;
-
-  @Before public void setup()
-      throws SolverException, IOException, SkylineStoreException,
-      ResourceEstimatorException {
-    solver = createSolver();
-  }
-
-  @Test(expected = InvalidInputException.class) public void testNullJobHistory()
-      throws SolverException, SkylineStoreException {
-    // try to solve with null jobHistory
-    solver.solve(null);
-  }
-
-  @Test(expected = InvalidInputException.class)
-  public void testEmptyJobHistory()
-      throws SolverException, SkylineStoreException {
-    Map<RecurrenceId, List<ResourceSkyline>> jobHistoryInvalid =
-        new HashMap<RecurrenceId, List<ResourceSkyline>>();
-    // try to solve with emty jobHistory
-    solver.solve(jobHistoryInvalid);
-  }
-
-  @After public final void cleanUp() {
-    solver.close();
-    solver = null;
-  }
-}
diff --git a/hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/translator/api/TestJobMetaData.java b/hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/translator/api/TestJobMetaData.java
deleted file mode 100644
index 69ba48058a1..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/translator/api/TestJobMetaData.java
+++ /dev/null
@@ -1,163 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.hadoop.resourceestimator.translator.api;
-
-import java.text.ParseException;
-
-import org.apache.hadoop.resourceestimator.common.api.RecurrenceId;
-import org.apache.hadoop.resourceestimator.translator.impl.LogParserUtil;
-import org.apache.hadoop.yarn.api.records.Resource;
-import org.apache.hadoop.yarn.server.resourcemanager.reservation.RLESparseResourceAllocation;
-import org.junit.After;
-import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Test;
-
-/**
- * Test JobMetaData.
- */
-public class TestJobMetaData {
-  /**
-   * TODO: parametrize this test.
-   */
-  private LogParserUtil logParserUtil = new LogParserUtil();
-
-  private JobMetaData jobMetaData;
-  private RecurrenceId recurrenceId;
-
-  @Before public final void setup() throws ParseException {
-    recurrenceId = new RecurrenceId("Fraud Detection", "17/07/16 16:27:25");
-    jobMetaData = new JobMetaData(
-        logParserUtil.stringToUnixTimestamp("17/07/16 16:27:25"));
-    jobMetaData.setRecurrenceId(recurrenceId);
-    jobMetaData.setContainerStart("C1",
-        logParserUtil.stringToUnixTimestamp("17/07/16 16:27:30"));
-    jobMetaData.setContainerEnd("C1",
-        logParserUtil.stringToUnixTimestamp("17/07/16 16:37:30"));
-    jobMetaData.setContainerStart("C2",
-        logParserUtil.stringToUnixTimestamp("17/07/16 16:27:40"));
-    jobMetaData.setContainerEnd("C2",
-        logParserUtil.stringToUnixTimestamp("17/07/16 16:37:40"));
-    jobMetaData.setJobFinishTime(
-        logParserUtil.stringToUnixTimestamp("17/07/16 16:37:45"));
-    final Resource containerAlloc = Resource.newInstance(1, 1);
-    jobMetaData.getResourceSkyline().setContainerSpec(containerAlloc);
-    jobMetaData.getResourceSkyline().setJobInputDataSize(1024.5);
-    jobMetaData.createSkyline();
-  }
-
-  @Test public final void testGetContainerSpec() {
-    final Resource containerAlloc =
-        jobMetaData.getResourceSkyline().getContainerSpec();
-    final Resource containerAlloc2 = Resource.newInstance(1, 1);
-    Assert.assertEquals(containerAlloc.getMemorySize(),
-        containerAlloc2.getMemorySize());
-    Assert.assertEquals(containerAlloc.getVirtualCores(),
-        containerAlloc2.getVirtualCores());
-  }
-
-  @Test public final void testGetJobSize() {
-    Assert.assertEquals(jobMetaData.getResourceSkyline().getJobInputDataSize(),
-        1024.5, 0);
-  }
-
-  @Test public final void testGetRecurrenceeId() {
-    final RecurrenceId recurrenceIdTest =
-        new RecurrenceId("Fraud Detection", "17/07/16 16:27:25");
-    Assert.assertEquals(recurrenceIdTest, jobMetaData.getRecurrenceId());
-  }
-
-  @Test public final void testStringToUnixTimestamp() throws ParseException {
-    final long submissionTime =
-        logParserUtil.stringToUnixTimestamp("17/07/16 16:27:25");
-    Assert.assertEquals(jobMetaData.getResourceSkyline().getJobSubmissionTime(),
-        submissionTime);
-  }
-
-  @Test public final void testResourceSkyline() {
-    final RLESparseResourceAllocation skylineList =
-        jobMetaData.getResourceSkyline().getSkylineList();
-    final int containerCPU =
-        jobMetaData.getResourceSkyline().getContainerSpec().getVirtualCores();
-    int k;
-    for (k = 0; k < 5; k++) {
-      Assert.assertEquals(0,
-          skylineList.getCapacityAtTime(k).getVirtualCores() / containerCPU);
-    }
-    for (k = 5; k < 15; k++) {
-      Assert.assertEquals(1,
-          skylineList.getCapacityAtTime(k).getVirtualCores() / containerCPU);
-    }
-    for (k = 15; k < 605; k++) {
-      Assert.assertEquals(2,
-          skylineList.getCapacityAtTime(k).getVirtualCores() / containerCPU);
-    }
-    for (k = 605; k < 615; k++) {
-      Assert.assertEquals(1,
-          skylineList.getCapacityAtTime(k).getVirtualCores() / containerCPU);
-    }
-    Assert.assertEquals(0,
-        skylineList.getCapacityAtTime(615).getVirtualCores() / containerCPU);
-  }
-
-  @Test public final void testContainerReleaseTimeMissing()
-      throws ParseException {
-    // create an invalid JobMetaData
-    recurrenceId = new RecurrenceId("Fraud Detection", "17/07/16 16:27:25");
-    jobMetaData = new JobMetaData(
-        logParserUtil.stringToUnixTimestamp("17/07/16 16:27:25"));
-    jobMetaData.setRecurrenceId(recurrenceId);
-    jobMetaData.setContainerStart("C1",
-        logParserUtil.stringToUnixTimestamp("17/07/16 16:27:30"));
-    jobMetaData.setContainerEnd("C1",
-        logParserUtil.stringToUnixTimestamp("17/07/16 16:37:30"));
-    jobMetaData.setContainerStart("C2",
-        logParserUtil.stringToUnixTimestamp("17/07/16 16:27:40"));
-    jobMetaData.setJobFinishTime(
-        logParserUtil.stringToUnixTimestamp("17/07/16 16:37:45"));
-    final Resource containerAlloc = Resource.newInstance(1, 1);
-    jobMetaData.getResourceSkyline().setContainerSpec(containerAlloc);
-    jobMetaData.getResourceSkyline().setJobInputDataSize(1024.5);
-    jobMetaData.createSkyline();
-    // test the generated ResourceSkyline
-    final RLESparseResourceAllocation skylineList =
-        jobMetaData.getResourceSkyline().getSkylineList();
-    final int containerCPU =
-        jobMetaData.getResourceSkyline().getContainerSpec().getVirtualCores();
-    int k;
-    for (k = 0; k < 5; k++) {
-      Assert.assertEquals(0,
-          skylineList.getCapacityAtTime(k).getVirtualCores() / containerCPU);
-    }
-    for (k = 5; k < 605; k++) {
-      Assert.assertEquals(1,
-          skylineList.getCapacityAtTime(k).getVirtualCores() / containerCPU);
-    }
-    Assert.assertEquals(0,
-        skylineList.getCapacityAtTime(605).getVirtualCores() / containerCPU);
-  }
-
-  @After public final void cleanUp() {
-    jobMetaData = null;
-    recurrenceId = null;
-    logParserUtil = null;
-  }
-}
diff --git a/hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/translator/impl/TestNativeParser.java b/hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/translator/impl/TestNativeParser.java
deleted file mode 100644
index f399bf944b6..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/translator/impl/TestNativeParser.java
+++ /dev/null
@@ -1,115 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.hadoop.resourceestimator.translator.impl;
-
-import java.io.IOException;
-import java.text.ParseException;
-import java.util.List;
-import java.util.Map;
-
-import org.apache.hadoop.conf.Configuration;
-import org.apache.hadoop.resourceestimator.common.api.RecurrenceId;
-import org.apache.hadoop.resourceestimator.common.api.ResourceSkyline;
-import org.apache.hadoop.resourceestimator.common.config.ResourceEstimatorConfiguration;
-import org.apache.hadoop.resourceestimator.common.exception.ResourceEstimatorException;
-import org.apache.hadoop.resourceestimator.skylinestore.api.SkylineStore;
-import org.apache.hadoop.resourceestimator.skylinestore.exceptions.SkylineStoreException;
-import org.apache.hadoop.resourceestimator.skylinestore.impl.InMemoryStore;
-import org.apache.hadoop.resourceestimator.translator.api.LogParser;
-import org.apache.hadoop.resourceestimator.translator.exceptions.DataFieldNotFoundException;
-import org.apache.hadoop.yarn.server.resourcemanager.reservation.RLESparseResourceAllocation;
-import org.junit.After;
-import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Test;
-
-/**
- * This sample parser will parse the sample log and extract the resource
- * skyline.
- */
-public class TestNativeParser {
-  private LogParserUtil logParserUtil = new LogParserUtil();
-  private SkylineStore skylineStore;
-
-  @Before public final void setup() throws ResourceEstimatorException {
-    skylineStore = new InMemoryStore();
-    final LogParser nativeParser = new BaseLogParser();
-    Configuration config = new Configuration();
-    config.addResource(ResourceEstimatorConfiguration.CONFIG_FILE);
-    nativeParser.init(config, skylineStore);
-    logParserUtil.setLogParser(nativeParser);
-  }
-
-  private void parseFile(final String logFile)
-      throws SkylineStoreException, IOException, ParseException,
-      ResourceEstimatorException, DataFieldNotFoundException {
-    logParserUtil.parseLog(logFile);
-  }
-
-  @Test public final void testParse()
-      throws SkylineStoreException, IOException, ParseException,
-      ResourceEstimatorException, DataFieldNotFoundException {
-    final String logFile = "src/test/resources/trace/nativeLog.txt";
-    parseFile(logFile);
-    final RecurrenceId recurrenceId =
-        new RecurrenceId("tpch_q12", "tpch_q12_0");
-    final Map<RecurrenceId, List<ResourceSkyline>> jobSkylineLists =
-        skylineStore.getHistory(recurrenceId);
-    Assert.assertEquals(1, jobSkylineLists.size());
-    final List<ResourceSkyline> jobHistory = jobSkylineLists.get(recurrenceId);
-    Assert.assertEquals(1, jobHistory.size());
-    final ResourceSkyline resourceSkyline = jobHistory.get(0);
-    Assert.assertEquals(0, resourceSkyline.getJobInputDataSize(), 0);
-    Assert.assertEquals("tpch_q12_0", resourceSkyline.getJobId());
-    Assert.assertEquals(0, resourceSkyline.getJobSubmissionTime());
-    Assert.assertEquals(25, resourceSkyline.getJobFinishTime());
-    Assert
-        .assertEquals(1024, resourceSkyline.getContainerSpec().getMemorySize());
-    Assert
-        .assertEquals(1, resourceSkyline.getContainerSpec().getVirtualCores());
-    final RLESparseResourceAllocation skylineLists =
-        resourceSkyline.getSkylineList();
-    int k;
-    for (k = 0; k < 10; k++) {
-      Assert.assertEquals(1,
-          skylineLists.getCapacityAtTime(k).getMemorySize() / 1024);
-    }
-    for (k = 10; k < 15; k++) {
-      Assert.assertEquals(1074,
-          skylineLists.getCapacityAtTime(k).getMemorySize() / 1024);
-    }
-    for (k = 15; k < 20; k++) {
-      Assert.assertEquals(2538,
-          skylineLists.getCapacityAtTime(k).getMemorySize() / 1024);
-    }
-    for (k = 20; k < 25; k++) {
-      Assert.assertEquals(2468,
-          skylineLists.getCapacityAtTime(k).getMemorySize() / 1024);
-    }
-    Assert.assertEquals(0,
-        skylineLists.getCapacityAtTime(25).getMemorySize() / 1024);
-  }
-
-  @After public final void cleanUp() {
-    skylineStore = null;
-    logParserUtil = null;
-  }
-}
diff --git a/hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/translator/impl/TestRmParser.java b/hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/translator/impl/TestRmParser.java
deleted file mode 100644
index 4a39ed7cf40..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/test/java/org/apache/hadoop/resourceestimator/translator/impl/TestRmParser.java
+++ /dev/null
@@ -1,239 +0,0 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.hadoop.resourceestimator.translator.impl;
-
-import java.io.IOException;
-import java.text.ParseException;
-import java.util.List;
-import java.util.Map;
-
-import org.apache.hadoop.conf.Configuration;
-import org.apache.hadoop.resourceestimator.common.api.RecurrenceId;
-import org.apache.hadoop.resourceestimator.common.api.ResourceSkyline;
-import org.apache.hadoop.resourceestimator.common.config.ResourceEstimatorConfiguration;
-import org.apache.hadoop.resourceestimator.common.exception.ResourceEstimatorException;
-import org.apache.hadoop.resourceestimator.skylinestore.api.SkylineStore;
-import org.apache.hadoop.resourceestimator.skylinestore.exceptions.SkylineStoreException;
-import org.apache.hadoop.resourceestimator.skylinestore.impl.InMemoryStore;
-import org.apache.hadoop.resourceestimator.translator.api.LogParser;
-import org.apache.hadoop.resourceestimator.translator.exceptions.DataFieldNotFoundException;
-import org.apache.hadoop.yarn.api.records.Resource;
-import org.apache.hadoop.yarn.server.resourcemanager.reservation.RLESparseResourceAllocation;
-import org.junit.After;
-import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Test;
-
-/**
- * This sample parser will parse the sample log and extract the resource
- * skyline.
- */
-public class TestRmParser {
-  private LogParserUtil logParserUtil = new LogParserUtil();
-  private SkylineStore skylineStore;
-
-  @Before public final void setup() throws ResourceEstimatorException {
-    skylineStore = new InMemoryStore();
-    final LogParser rmParser = new BaseLogParser();
-    Configuration config = new Configuration();
-    config.addResource(new org.apache.hadoop.fs.Path(
-        ResourceEstimatorConfiguration.CONFIG_FILE));
-    config.set(ResourceEstimatorConfiguration.TRANSLATOR_LINE_PARSER,
-        RmSingleLineParser.class.getName());
-    rmParser.init(config, skylineStore);
-    logParserUtil.setLogParser(rmParser);
-  }
-
-  private void parseFile(final String logFile)
-      throws SkylineStoreException, IOException, ParseException,
-      ResourceEstimatorException, DataFieldNotFoundException {
-    logParserUtil.parseLog(logFile);
-  }
-
-  @Test public final void testParse()
-      throws SkylineStoreException, IOException, ParseException,
-      ResourceEstimatorException, DataFieldNotFoundException {
-    final String logFile = "src/test/resources/trace/rmLog.txt";
-    parseFile(logFile);
-    final RecurrenceId recurrenceId = new RecurrenceId("FraudDetection", "1");
-    final Map<RecurrenceId, List<ResourceSkyline>> jobSkylineLists =
-        skylineStore.getHistory(recurrenceId);
-    Assert.assertEquals(1, jobSkylineLists.size());
-    final List<ResourceSkyline> jobHistory = jobSkylineLists.get(recurrenceId);
-    Assert.assertEquals(1, jobHistory.size());
-    final ResourceSkyline resourceSkyline = jobHistory.get(0);
-    Assert.assertEquals(0, resourceSkyline.getJobInputDataSize(), 0);
-    Assert.assertEquals("application_1497832133857_0330",
-        resourceSkyline.getJobId());
-    Assert.assertEquals(
-        logParserUtil.stringToUnixTimestamp("06/21/2017 16:10:13"),
-        resourceSkyline.getJobSubmissionTime());
-    Assert.assertEquals(
-        logParserUtil.stringToUnixTimestamp("06/21/2017 16:18:35"),
-        resourceSkyline.getJobFinishTime());
-    final Resource resource = Resource.newInstance(1800, 1);
-    Assert.assertEquals(resource.getMemorySize(),
-        resourceSkyline.getContainerSpec().getMemorySize());
-    Assert.assertEquals(resource.getVirtualCores(),
-        resourceSkyline.getContainerSpec().getVirtualCores());
-    final RLESparseResourceAllocation skylineLists =
-        resourceSkyline.getSkylineList();
-
-    int k;
-    for (k = 0; k < 142; k++) {
-      Assert.assertEquals(1,
-          skylineLists.getCapacityAtTime(k).getMemorySize() / resource
-              .getMemorySize());
-    }
-    for (k = 142; k < 345; k++) {
-      Assert.assertEquals(2,
-          skylineLists.getCapacityAtTime(k).getMemorySize() / resource
-              .getMemorySize());
-    }
-    for (k = 345; k < 502; k++) {
-      Assert.assertEquals(1,
-          skylineLists.getCapacityAtTime(k).getMemorySize() / resource
-              .getMemorySize());
-    }
-  }
-
-  @Test(expected = ParseException.class)
-  public final void testInvalidDateFormat()
-      throws ParseException {
-    logParserUtil.stringToUnixTimestamp("2017.07.16 16:37:45");
-  }
-
-  @Test public final void testDuplicateJobSubmissionTime()
-      throws SkylineStoreException, IOException, ParseException,
-      ResourceEstimatorException, DataFieldNotFoundException {
-    final String logFile = "src/test/resources/trace/invalidLog1.txt";
-    parseFile(logFile);
-    final RecurrenceId recurrenceId = new RecurrenceId("Test", "1");
-    final Map<RecurrenceId, List<ResourceSkyline>> jobSkylineLists =
-        skylineStore.getHistory(recurrenceId);
-    Assert.assertEquals(
-        logParserUtil.stringToUnixTimestamp("06/21/2017 16:10:23"),
-        jobSkylineLists.get(recurrenceId).get(0).getJobSubmissionTime());
-  }
-
-  @Test public final void testJobIdNotFoundInJobSubmission()
-      throws SkylineStoreException, IOException, ParseException,
-      ResourceEstimatorException, DataFieldNotFoundException {
-    final String logFile = "src/test/resources/trace/invalidLog2.txt";
-    parseFile(logFile);
-    final RecurrenceId recurrenceId = new RecurrenceId("Test", "2");
-    Assert.assertNull(skylineStore.getHistory(recurrenceId));
-  }
-
-  @Test public final void testJobIdNotFoundInContainerAlloc()
-      throws SkylineStoreException, IOException, ParseException,
-      ResourceEstimatorException, DataFieldNotFoundException {
-    final String logFile = "src/test/resources/trace/invalidLog3.txt";
-    parseFile(logFile);
-    final RecurrenceId recurrenceId = new RecurrenceId("Test", "3");
-    final Map<RecurrenceId, List<ResourceSkyline>> jobSkylineLists =
-        skylineStore.getHistory(recurrenceId);
-    Assert.assertEquals(0,
-        jobSkylineLists.get(recurrenceId).get(0).getSkylineList()
-            .getCumulative().size());
-  }
-
-  @Test public final void testContainerIdNotFoundInContainerAlloc()
-      throws SkylineStoreException, IOException, ParseException,
-      ResourceEstimatorException, DataFieldNotFoundException {
-    final String logFile = "src/test/resources/trace/invalidLog4.txt";
-    parseFile(logFile);
-    final RecurrenceId recurrenceId = new RecurrenceId("Test", "4");
-    final Map<RecurrenceId, List<ResourceSkyline>> jobSkylineLists =
-        skylineStore.getHistory(recurrenceId);
-    Assert.assertEquals(0,
-        jobSkylineLists.get(recurrenceId).get(0).getSkylineList()
-            .getCumulative().size());
-  }
-
-  @Test public final void testJobIdNotFoundInJobFailure()
-      throws SkylineStoreException, IOException, ParseException,
-      ResourceEstimatorException, DataFieldNotFoundException {
-    final String logFile = "src/test/resources/trace/invalidLog5.txt";
-    parseFile(logFile);
-    final RecurrenceId recurrenceId = new RecurrenceId("Test", "5");
-    final Map<RecurrenceId, List<ResourceSkyline>> jobSkylineLists =
-        skylineStore.getHistory(recurrenceId);
-    Assert.assertEquals(
-        logParserUtil.stringToUnixTimestamp("06/21/2017 16:10:13"),
-        jobSkylineLists.get(recurrenceId).get(0).getJobSubmissionTime());
-  }
-
-  @Test public final void testJobIdNotFoundInJobFinish()
-      throws SkylineStoreException, IOException, ParseException,
-      ResourceEstimatorException, DataFieldNotFoundException {
-    final String logFile = "src/test/resources/trace/invalidLog6.txt";
-    parseFile(logFile);
-    final RecurrenceId recurrenceId = new RecurrenceId("Test", "6");
-    Assert.assertNull(skylineStore.getHistory(recurrenceId));
-  }
-
-  @Test public final void testRecurrenceIdNotFoundInJobFinish()
-      throws SkylineStoreException, IOException, ParseException,
-      ResourceEstimatorException, DataFieldNotFoundException {
-    final String logFile = "src/test/resources/trace/invalidLog7.txt";
-    parseFile(logFile);
-    final RecurrenceId recurrenceId = new RecurrenceId("Test", "7");
-    Assert.assertNull(skylineStore.getHistory(recurrenceId));
-  }
-
-  @Test public final void testJobIdNotFoundInResourceSpec()
-      throws SkylineStoreException, IOException, ParseException,
-      ResourceEstimatorException, DataFieldNotFoundException {
-    final String logFile = "src/test/resources/trace/invalidLog8.txt";
-    parseFile(logFile);
-    final RecurrenceId recurrenceId = new RecurrenceId("Test", "8");
-    final Map<RecurrenceId, List<ResourceSkyline>> jobSkylineLists =
-        skylineStore.getHistory(recurrenceId);
-    Assert.assertEquals(1024,
-        jobSkylineLists.get(recurrenceId).get(0).getContainerSpec()
-            .getMemorySize());
-    Assert.assertEquals(1,
-        jobSkylineLists.get(recurrenceId).get(0).getContainerSpec()
-            .getVirtualCores());
-  }
-
-  @Test public final void testResourceSpecNotFoundInResourceSpec()
-      throws SkylineStoreException, IOException, ParseException,
-      ResourceEstimatorException, DataFieldNotFoundException {
-    final String logFile = "src/test/resources/trace/invalidLog9.txt";
-    parseFile(logFile);
-    final RecurrenceId recurrenceId = new RecurrenceId("Test", "9");
-    final Map<RecurrenceId, List<ResourceSkyline>> jobSkylineLists =
-        skylineStore.getHistory(recurrenceId);
-    Assert.assertEquals(1024,
-        jobSkylineLists.get(recurrenceId).get(0).getContainerSpec()
-            .getMemorySize());
-    Assert.assertEquals(1,
-        jobSkylineLists.get(recurrenceId).get(0).getContainerSpec()
-            .getVirtualCores());
-  }
-
-  @After public final void cleanUp() {
-    skylineStore = null;
-    logParserUtil = null;
-  }
-}
diff --git a/hadoop-tools/hadoop-resourceestimator/src/test/resources/log4j.properties b/hadoop-tools/hadoop-resourceestimator/src/test/resources/log4j.properties
deleted file mode 100644
index 60b8fbed16c..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/test/resources/log4j.properties
+++ /dev/null
@@ -1,25 +0,0 @@
-#
-#
-# Licensed to the Apache Software Foundation (ASF) under one
-# or more contributor license agreements.  See the NOTICE file
-# distributed with this work for additional information
-# regarding copyright ownership.  The ASF licenses this file
-# to you under the Apache License, Version 2.0 (the
-# "License"); you may not use this file except in compliance
-# with the License.  You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-#
-log4j.rootLogger=INFO, stdout
-# Redirect log messages to console
-log4j.appender.stdout=org.apache.log4j.ConsoleAppender
-log4j.appender.stdout.Target=System.out
-log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
-log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
diff --git a/hadoop-tools/hadoop-resourceestimator/src/test/resources/lp/answer.txt b/hadoop-tools/hadoop-resourceestimator/src/test/resources/lp/answer.txt
deleted file mode 100644
index 94565dee5ca..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/test/resources/lp/answer.txt
+++ /dev/null
@@ -1,7 +0,0 @@
-1
-1
-1738
-2535
-2484
-2478
-2468
\ No newline at end of file
diff --git a/hadoop-tools/hadoop-resourceestimator/src/test/resources/lp/tinySample.txt b/hadoop-tools/hadoop-resourceestimator/src/test/resources/lp/tinySample.txt
deleted file mode 100644
index 15fb84e98c2..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/test/resources/lp/tinySample.txt
+++ /dev/null
@@ -1,2 +0,0 @@
-tpch_q12 50 1462148517000 1462148527345 1462148952345 tpch_q12_0 8192:0| 1:0|1:5|1074:10|2538:15|2468:20|
-tpch_q12 50 1462148949000 1462148960455 1462149205455 tpch_q12_1 8192:0| 1:0|1:5|794:10|2517:15|2484:20|
\ No newline at end of file
diff --git a/hadoop-tools/hadoop-resourceestimator/src/test/resources/lp/tpch_q12.txt b/hadoop-tools/hadoop-resourceestimator/src/test/resources/lp/tpch_q12.txt
deleted file mode 100644
index ee196250779..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/test/resources/lp/tpch_q12.txt
+++ /dev/null
@@ -1,13 +0,0 @@
-tpch_q12 50 1462148517000 1462148527345 1462148952345 tpch_q12_0 8192:0|8192:5|8798208:10|20791296:15|20348928:20|20275200:25|20217856:30|20160512:35|20045824:40|18554880:45|15736832:50|15302656:55|14991360:60|14737408:65|14508032:70|14360576:75|14196736:80|14049280:85|13901824:90|13795328:95|13721600:100|13664256:105|13565952:110|12877824:115|12148736:120|11476992:125|10829824:130|10444800:135|10059776:140|9633792:145|9355264:150|9125888:155|9027584:160|8937472:165|8839168:170|8757248:175|8642560:180|8527872:185|8421376:190|8396800:195|8355840:200|8323072:205|8298496:210|8282112:215|8282112:220|8273920:225|8273920:230|8273920:235|8273920:240|8273920:245|8273920:250|8273920:255|7700480:260|5160960:265|4087808:270|3907584:275|3702784:280|3407872:285|2965504:290|2686976:295|2473984:300|2244608:305|2056192:310|1933312:315|1810432:320|1613824:325|1417216:330|1277952:335|1130496:340|843776:345|679936:350|647168:355|630784:360|630784:365|630784:370|614400:375|581632:380|548864:385|540672:390|540672:395|540672:400|507904:405|491520:410|278528:415|16384:420|0:425| 1:0|1:5|1074:10|2538:15|2484:20|2475:25|2468:30|
-tpch_q12 50 1462148949000 1462148960455 1462149205455 tpch_q12_1 8192:0|8192:5|6504448:10|20619264:15|20348928:20|20299776:25|20201472:30|20127744:35|20021248:40|18366464:45|15392768:50|15605760:55|15400960:60|16064512:65|13664256:70|15753216:75|15843328:80|15843328:85|13615104:90|11943936:95|11501568:100|10895360:105|10223616:110|9822208:115|9478144:120|9142272:125|8855552:130|8683520:135|8544256:140|8413184:145|8331264:150|8290304:155|8282112:160|8273920:165|8273920:170|8273920:175|8273920:180|8273920:185|8273920:190|8265728:195|4890624:200|1089536:205|671744:210|565248:215|516096:220|483328:225|360448:230|16384:235|16384:240|8192:245|0:250| 1:0|1:5|794:10|2517:15|2484:20|2478:25|2466:30|
-tpch_q12 50 1462150611000 1462150620642 1462150895642 tpch_q12_7 8192:0|8192:5|11362304:10|20365312:15|20348928:20|20242432:25|20176896:30|20029440:35|19783680:40|16703488:45|15286272:50|14589952:55|14172160:60|13770752:65|13598720:70|12992512:75|12468224:80|12025856:85|11640832:90|11460608:95|11272192:100|10510336:105|9789440:110|9207808:115|8781824:120|8585216:125|8478720:130|8396800:135|8314880:140|8290304:145|8273920:150|8273920:155|8273920:160|8273920:165|8273920:170|8273920:175|8273920:180|7077888:185|4407296:190|3735552:195|3260416:200|2736128:205|2228224:210|1777664:215|1433600:220|1155072:225|983040:230|843776:235|720896:240|647168:245|630784:250|622592:255|565248:260|303104:265|16384:270|8192:275|0:280| 1:0|1:5|1387:10|2486:15|2484:20|2471:25|2463:30|
-tpch_q12 50 1462150893000 1462150904200 1462151134200 tpch_q12_8 8192:0|8192:5|7946240:10|20389888:15|20348928:20|20267008:25|20160512:30|20054016:35|19824640:40|17866752:45|14041088:50|14114816:55|12615680:60|14336000:65|12771328:70|12189696:75|11796480:80|11599872:85|11517952:90|11460608:95|11403264:100|11116544:105|10010624:110|9306112:115|8847360:120|8593408:125|8404992:130|8331264:135|8298496:140|8290304:145|8282112:150|8282112:155|8282112:160|8282112:165|8282112:170|8282112:175|8273920:180|8273920:185|8273920:190|8273920:195|8273920:200|8273920:205|8118272:210|2883584:215|376832:220|16384:225|8192:230|0:235| 1:0|1:5|970:10|2489:15|2484:20|2474:25|2461:30|
-tpch_q12 50 1462151132000 1462151141241 1462151421241 tpch_q12_9 8192:0|16384:5|16031744:10|20348928:15|20348928:20|20201472:25|20152320:30|20004864:35|19562496:40|16121856:45|15319040:50|14589952:55|14139392:60|13770752:65|13131776:70|12378112:75|11878400:80|11649024:85|11534336:90|11444224:95|11157504:100|10362880:105|9650176:110|9134080:115|8749056:120|8519680:125|8372224:130|8306688:135|8290304:140|8282112:145|8282112:150|8273920:155|8273920:160|8273920:165|8273920:170|8273920:175|8273920:180|8273920:185|7569408:190|4505600:195|3522560:200|3072000:205|2801664:210|2523136:215|2080768:220|1679360:225|1343488:230|1007616:235|892928:240|819200:245|688128:250|573440:255|540672:260|524288:265|491520:270|24576:275|8192:280|0:285| 1:0|2:5|1957:10|2484:15|2484:20|2466:25|2460:30|
-tpch_q12 50 1462151420000 1462151429196 1462151739196 tpch_q12_10 8192:0|8192:5|10543104:10|20357120:15|20348928:20|20234240:25|20168704:30|20045824:35|19750912:40|17293312:45|15327232:50|14770176:55|14336000:60|13926400:65|13410304:70|12517376:75|12034048:80|11714560:85|11526144:90|11427840:95|11247616:100|10616832:105|9928704:110|9412608:115|8962048:120|8585216:125|8380416:130|8323072:135|8290304:140|8282112:145|8282112:150|8282112:155|8273920:160|8273920:165|8273920:170|8273920:175|8273920:180|8273920:185|8273920:190|6889472:195|4120576:200|3465216:205|3153920:210|2924544:215|2514944:220|2056192:225|1794048:230|1646592:235|1417216:240|1122304:245|1048576:250|1007616:255|892928:260|778240:265|647168:270|557056:275|532480:280|524288:285|507904:290|475136:295|229376:300|16384:305|8192:310|0:315| 1:0|1:5|1287:10|2485:15|2484:20|2470:25|2462:30|
-tpch_q12 50 1462151735000 1462151744905 1462152069905 tpch_q12_11 8192:0|8192:5|9494528:10|20389888:15|20348928:20|20267008:25|20168704:30|20086784:35|19652608:40|17334272:45|15351808:50|15040512:55|14639104:60|14295040:65|13967360:70|13672448:75|12853248:80|12181504:85|11730944:90|11493376:95|11255808:100|10592256:105|10002432:110|9633792:115|9224192:120|8896512:125|8634368:130|8462336:135|8355840:140|8298496:145|8282112:150|8273920:155|8273920:160|8273920:165|8273920:170|8273920:175|8273920:180|8142848:185|5718016:190|4440064:195|3989504:200|3604480:205|3334144:210|2981888:215|2572288:220|2269184:225|1966080:230|1744896:235|1507328:240|1310720:245|1089536:250|942080:255|851968:260|794624:265|745472:270|655360:275|598016:280|565248:285|548864:290|532480:295|532480:300|532480:305|491520:310|270336:315|16384:320|8192:325|0:330| 1:0|1:5|1159:10|2489:15|2484:20|2474:25|2462:30|
-tpch_q12 50 1462152067000 1462152075862 1462152365862 tpch_q12_12 8192:0|8192:5|11583488:10|20357120:15|20348928:20|20234240:25|20168704:30|20037632:35|19734528:40|16744448:45|15351808:50|14704640:55|14229504:60|13901824:65|13631488:70|13107200:75|12500992:80|12140544:85|11804672:90|11558912:95|11386880:100|10723328:105|9928704:110|9355264:115|8937472:120|8691712:125|8519680:130|8421376:135|8372224:140|8339456:145|8306688:150|8273920:155|8273920:160|8273920:165|8273920:170|8273920:175|8273920:180|8273920:185|7577600:190|4898816:195|3719168:200|3104768:205|2613248:210|2252800:215|2064384:220|1835008:225|1515520:230|1171456:235|974848:240|892928:245|802816:250|729088:255|712704:260|663552:265|557056:270|483328:275|368640:280|16384:285|8192:290|0:295| 1:0|1:5|1414:10|2485:15|2484:20|2470:25|2462:30|
-tpch_q12 50 1462161466000 1462161474815 1462161689815 tpch_q12_45 8192:0|8192:5|13836288:10|20365312:15|20348928:20|20209664:25|20160512:30|20029440:35|19906560:40|18333696:45|15794176:50|16015360:55|13451264:60|15269888:65|12730368:70|11862016:75|11657216:80|11509760:85|11460608:90|11403264:95|11296768:100|10698752:105|9814016:110|9175040:115|8757248:120|8486912:125|8339456:130|8290304:135|8282112:140|8273920:145|8273920:150|8273920:155|8273920:160|8273920:165|8273920:170|8273920:175|5447680:180|1245184:185|737280:190|589824:195|483328:200|147456:205|16384:210|8192:215|0:220| 1:0|1:5|1689:10|2486:15|2484:20|2467:25|2461:30|
-tpch_q12 50 1462161685000 1462161693550 1462161903550 tpch_q12_46 8192:0|8192:5|13500416:10|20348928:15|20348928:20|20201472:25|20152320:30|20037632:35|19734528:40|17047552:45|14548992:50|13778944:55|14696448:60|16064512:65|14540800:70|12468224:75|11935744:80|11640832:85|11517952:90|11436032:95|11190272:100|10379264:105|9740288:110|9199616:115|8863744:120|8585216:125|8429568:130|8331264:135|8290304:140|8282112:145|8282112:150|8282112:155|8273920:160|8273920:165|8273920:170|8273920:175|8273920:180|8273920:185|8257536:190|3710976:195|393216:200|16384:205|8192:210|0:215| 1:0|1:5|1648:10|2484:15|2484:20|2466:25|2460:30|
-tpch_q12 50 1462161901000 1462161909461 1462162219461 tpch_q12_47 8192:0|8192:5|14802944:10|20348928:15|20348928:20|20217856:25|20152320:30|20013056:35|19734528:40|16285696:45|15310848:50|14573568:55|14090240:60|13639680:65|13025280:70|12271616:75|11911168:80|11673600:85|11501568:90|11411456:95|11206656:100|10493952:105|9797632:110|9175040:115|8749056:120|8503296:125|8396800:130|8347648:135|8331264:140|8290304:145|8273920:150|8273920:155|8273920:160|8273920:165|8273920:170|8273920:175|8273920:180|6823936:185|4120576:190|3342336:195|2711552:200|2170880:205|1712128:210|1466368:215|1294336:220|1187840:225|1089536:230|917504:235|770048:240|663552:245|589824:250|548864:255|540672:260|540672:265|540672:270|540672:275|540672:280|540672:285|540672:290|516096:295|409600:300|16384:305|8192:310|0:315| 1:0|1:5|1807:10|2484:15|2484:20|2468:25|2460:30|
-tpch_q12 50 1462162218000 1462162226670 1462162536670 tpch_q12_48 8192:0|8192:5|13295616:10|20348928:15|20348928:20|20234240:25|20160512:30|20070400:35|19898368:40|15876096:45|15138816:50|14344192:55|14024704:60|13787136:65|13623296:70|13312000:75|12607488:80|12042240:85|11780096:90|11640832:95|11493376:100|10649600:105|9732096:110|9232384:115|8953856:120|8749056:125|8577024:130|8429568:135|8347648:140|8298496:145|8290304:150|8290304:155|8290304:160|8282112:165|8282112:170|8282112:175|8282112:180|8273920:185|8273920:190|8273920:195|8273920:200|8273920:205|8273920:210|8273920:215|7798784:220|7307264:225|4808704:230|3891200:235|3530752:240|3162112:245|2596864:250|2195456:255|1835008:260|1589248:265|1425408:270|1204224:275|974848:280|745472:285|581632:290|483328:295|237568:300|16384:305|8192:310|0:315| 1:0|1:5|1623:10|2484:15|2484:20|2470:25|2461:30|
-tpch_q12 50 1462162533000 1462162541572 1462162766572 tpch_q12_49 8192:0|8192:5|13320192:10|20348928:15|20348928:20|20217856:25|20152320:30|20004864:35|19750912:40|18366464:45|18063360:50|17530880:55|12361728:60|14123008:65|12713984:70|12181504:75|11943936:80|11730944:85|11624448:90|11493376:95|11329536:100|10723328:105|9887744:110|9322496:115|8921088:120|8634368:125|8429568:130|8339456:135|8314880:140|8306688:145|8298496:150|8282112:155|8273920:160|8273920:165|8273920:170|8273920:175|8273920:180|8273920:185|8232960:190|3375104:195|696320:200|581632:205|507904:210|335872:215|16384:220|8192:225|0:230| 1:0|1:5|1626:10|2484:15|2484:20|2468:25|2460:30|
diff --git a/hadoop-tools/hadoop-resourceestimator/src/test/resources/resourceEstimatorService.txt b/hadoop-tools/hadoop-resourceestimator/src/test/resources/resourceEstimatorService.txt
deleted file mode 100644
index 15fb84e98c2..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/test/resources/resourceEstimatorService.txt
+++ /dev/null
@@ -1,2 +0,0 @@
-tpch_q12 50 1462148517000 1462148527345 1462148952345 tpch_q12_0 8192:0| 1:0|1:5|1074:10|2538:15|2468:20|
-tpch_q12 50 1462148949000 1462148960455 1462149205455 tpch_q12_1 8192:0| 1:0|1:5|794:10|2517:15|2484:20|
\ No newline at end of file
diff --git a/hadoop-tools/hadoop-resourceestimator/src/test/resources/resourceestimator-config.xml b/hadoop-tools/hadoop-resourceestimator/src/test/resources/resourceestimator-config.xml
deleted file mode 100644
index f78085a0abc..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/test/resources/resourceestimator-config.xml
+++ /dev/null
@@ -1,85 +0,0 @@
-<?xml version="1.0"?>
-<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
-<!--
-    Licensed to the Apache Software Foundation (ASF) under one
-    or more contributor license agreements.  See the NOTICE file
-    distributed with this work for additional information
-    regarding copyright ownership.  The ASF licenses this file
-    to you under the Apache License, Version 2.0 (the
-    "License"); you may not use this file except in compliance
-    with the License.  You may obtain a copy of the License at
-        http://www.apache.org/licenses/LICENSE-2.0
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-<configuration>
-    <property>
-        <name>resourceestimator.solver.lp.alpha</name>
-        <value>0.1</value>
-        <description>
-            The resource estimator has an integrated Linear Programming solver to make the prediction, and this parameter tunes the tradeoff between resource over-allocation and under-allocation in the Linear Programming model. This parameter varies from 0 to 1, and a larger alpha value means the model minimizes over-allocation better. Default value is 0.1.
-        </description>
-    </property>
-    <property>
-        <name>resourceestimator.solver.lp.beta</name>
-        <value>0.1</value>
-        <description>
-            This parameter controls the generalization of the Linear Programming model. This parameter varies from 0 to 1. Deafult value is 0.1.
-        </description>
-    </property>
-    <property>
-        <name>resourceestimator.solver.lp.minJobRuns</name>
-        <value>2</value>
-        <description>
-            The minimum number of job runs required in order to make the prediction. Default value is 2.
-        </description>
-    </property>
-    <property>
-        <name>resourceestimator.timeInterval</name>
-        <value>5</value>
-        <description>
-            The time length which is used to discretize job execution into intervals. Note that the estimator makes resource allocation prediction for each interval. A smaller time interval has more fine-grained granularity for prediction, but it also takes longer time and more space for prediction. Default value is 5 (seconds).
-        </description>
-    </property>
-    <property>
-        <name>resourceestimator.translator.line-parser</name>
-        <value>org.apache.hadoop.resourceestimator.translator.impl.NativeSingleLineParser</value>
-        <description>
-            The class name of the translator single-line parser, which parses a single line in the log. Default value is org.apache.hadoop.resourceestimator.translator.impl.NativeSingleLineParser, which can parse one line in the sample log. Note that if users want to parse Hadoop Resource Manager logs, they need to set the value to be org.apache.hadoop.resourceestimator.translator.impl.RmSingleLineParser. If they want to implement single-line parser to parse their customized log file, they need to change this value accordingly.
-        </description>
-    </property>
-    <!-- Optional configuration parameters -->
-    <!--
-    <property>
-        <name>resourceestimator.solver.provider</name>
-        <value>org.apache.hadoop.resourceestimator.solver.impl.LpSolver</value>
-        <description>
-            The class name of the solver provider. Default value is org.apache.hadoop.resourceestimator.solver.impl.LpSolver, which incorporates a Linear Programming model to make the prediction. If users want to implement their own models, they need to change this value accordingly.
-        </description>
-    </property>
-    <property>
-        <name>resourceestimator.skylinestore.provider</name>
-        <value>org.apache.hadoop.resourceestimator.skylinestore.impl.InMemoryStore</value>
-        <description>
-            The class name of the skylinestore provider. Default value is org.apache.hadoop.resourceestimator.skylinestore.impl.InMemoryStore, which is an in-memory implementation of skylinestore. If users want to use their own skylinestore implementation, they need to change this value accordingly.
-        </description>
-    </property>
-    <property>
-        <name>resourceestimator.translator.provider</name>
-        <value>org.apache.hadoop.resourceestimator.translator.impl.BaseLogParser</value>
-        <description>
-            The class name of the translator provider. Default value is org.apache.hadoop.resourceestimator.translator.impl.BaseLogParser, which extracts resourceskylines from log streams. If users want to use their own translator implementation, they need to change this value accordingly.
-        </description>
-    </property>
-    <property>
-        <name>resourceestimator.service-port</name>
-        <value>9998</value>
-        <description>
-            The port which ResourceEstimatorService listens to. The default value is 9998.
-        </description>
-    </property>
-    -->
-</configuration>
diff --git a/hadoop-tools/hadoop-resourceestimator/src/test/resources/trace/invalidLog1.txt b/hadoop-tools/hadoop-resourceestimator/src/test/resources/trace/invalidLog1.txt
deleted file mode 100644
index ba05a8903eb..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/test/resources/trace/invalidLog1.txt
+++ /dev/null
@@ -1,4 +0,0 @@
-// Test case 1: duplicate job submission time
-252823:e,06/21/2017 16:10:13,yarn resourcemanager,DefaultTag,Pid="5156" Tid="39272" TS="0x01D2EAA8DD060D14" String1="17/06/21 16:10:13 INFO resourcemanager.RMAuditLogger: USER=hadoop  IP=25.163.46.150  OPERATION=Submit Application Request  TARGET=ClientRMService  RESULT=SUCCESS  APPID=application_1 CALLERCONTEXT=HIVE_QUERY_ID:ExoAdmin_20170621160339_7fed8f3c-3558-4abe-a0db-029eaa44d70e"
-252823:e,06/21/2017 16:10:23,yarn resourcemanager,DefaultTag,Pid="5156" Tid="39272" TS="0x01D2EAA8DD060D14" String1="17/06/21 16:10:13 INFO resourcemanager.RMAuditLogger: USER=hadoop  IP=25.163.46.150  OPERATION=Submit Application Request  TARGET=ClientRMService  RESULT=SUCCESS  APPID=application_1 CALLERCONTEXT=HIVE_QUERY_ID:ExoAdmin_20170621160339_7fed8f3c-3558-4abe-a0db-029eaa44d70e"
-253114:e,06/21/2017 16:18:35,yarn resourcemanager,DefaultTag,Pid="5156" Tid="19824" TS="0x01D2EAAA089569FD" String1="17/06/21 16:18:35 INFO resourcemanager.RMAppManager$ApplicationSummary: appId=application_1,name=Test-1,user=hadoop, queue=PROD,state=FINISHED,trackingUrl=http://BY1PR00OC0019.namprd00.prod.outlook.com:8088/proxy/1,appMasterHost=by2pr08mb1799.namprd08.prod.outlook.com,startTime=1498061413073,finishTime=1498061905698,finalStatus=SUCCEEDED,memorySeconds=1330655,vcoreSeconds=704,preemptedAMContainers=0,preemptedNonAMContainers=0,preemptedResources=<memory:0\, vCores:0>,applicationType=MAPREDUCE"
diff --git a/hadoop-tools/hadoop-resourceestimator/src/test/resources/trace/invalidLog2.txt b/hadoop-tools/hadoop-resourceestimator/src/test/resources/trace/invalidLog2.txt
deleted file mode 100644
index fe249439873..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/test/resources/trace/invalidLog2.txt
+++ /dev/null
@@ -1,3 +0,0 @@
-// Test case 2: no jobId found in job submission log
-252823:e,06/21/2017 16:10:13,yarn resourcemanager,DefaultTag,Pid="5156" Tid="39272" TS="0x01D2EAA8DD060D14" String1="17/06/21 16:10:13 INFO resourcemanager.RMAuditLogger: USER=hadoop  IP=25.163.46.150  OPERATION=Submit Application Request  TARGET=ClientRMService  RESULT=SUCCESS  APPIDs=2  CALLERCONTEXT=HIVE_QUERY_ID:ExoAdmin_20170621160339_7fed8f3c-3558-4abe-a0db-029eaa44d70e"
-253114:e,06/21/2017 16:18:35,yarn resourcemanager,DefaultTag,Pid="5156" Tid="19824" TS="0x01D2EAAA089569FD" String1="17/06/21 16:18:35 INFO resourcemanager.RMAppManager$ApplicationSummary: appId=application_2,name=Test-2,user=hadoop, queue=PROD,state=FINISHED,trackingUrl=http://BY1PR00OC0019.namprd00.prod.outlook.com:8088/proxy/1,appMasterHost=by2pr08mb1799.namprd08.prod.outlook.com,startTime=1498061413073,finishTime=1498061905698,finalStatus=SUCCEEDED,memorySeconds=1330655,vcoreSeconds=704,preemptedAMContainers=0,preemptedNonAMContainers=0,preemptedResources=<memory:0\, vCores:0>,applicationType=MAPREDUCE"
diff --git a/hadoop-tools/hadoop-resourceestimator/src/test/resources/trace/invalidLog3.txt b/hadoop-tools/hadoop-resourceestimator/src/test/resources/trace/invalidLog3.txt
deleted file mode 100644
index 63d9c2c3a81..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/test/resources/trace/invalidLog3.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-// Test case 3: no jobId found in container allocation log
-252823:e,06/21/2017 16:10:13,yarn resourcemanager,DefaultTag,Pid="5156" Tid="39272" TS="0x01D2EAA8DD060D14" String1="17/06/21 16:10:13 INFO resourcemanager.RMAuditLogger: USER=hadoop  IP=25.163.46.150  OPERATION=Submit Application Request  TARGET=ClientRMService  RESULT=SUCCESS  APPID=application_3 CALLERCONTEXT=HIVE_QUERY_ID:ExoAdmin_20170621160339_7fed8f3c-3558-4abe-a0db-029eaa44d70e"
-252839:e,06/21/2017 16:10:13,yarn resourcemanager,DefaultTag,Pid="5156" Tid="39272" TS="0x01D2EAA8DD11F8F0" String1="17/06/21 16:10:13 INFO resourcemanager.RMAuditLogger: USER=hadoop  OPERATION=AM Allocated Container  TARGET=SchedulerApp RESULT=SUCCESS  APPIDs=3  CONTAINERID=container_e26_1497832133857_0330_01_000001"
-253100:e,06/21/2017 16:18:35,yarn resourcemanager,DefaultTag,Pid="5156" Tid="19824" TS="0x01D2EAAA089569FD" String1="17/06/21 16:18:35 INFO resourcemanager.RMAuditLogger: USER=hadoop  OPERATION=AM Released Container TARGET=SchedulerApp RESULT=SUCCESS  APPID=application_3 CONTAINERID=container_e26_1497832133857_0330_01_000001"
-253114:e,06/21/2017 16:18:35,yarn resourcemanager,DefaultTag,Pid="5156" Tid="19824" TS="0x01D2EAAA089569FD" String1="17/06/21 16:18:35 INFO resourcemanager.RMAppManager$ApplicationSummary: appId=application_3,name=Test-3,user=hadoop, queue=PROD,state=FINISHED,trackingUrl=http://BY1PR00OC0019.namprd00.prod.outlook.com:8088/proxy/1,appMasterHost=by2pr08mb1799.namprd08.prod.outlook.com,startTime=1498061413073,finishTime=1498061905698,finalStatus=SUCCEEDED,memorySeconds=1330655,vcoreSeconds=704,preemptedAMContainers=0,preemptedNonAMContainers=0,preemptedResources=<memory:0\, vCores:0>,applicationType=MAPREDUCE"
diff --git a/hadoop-tools/hadoop-resourceestimator/src/test/resources/trace/invalidLog4.txt b/hadoop-tools/hadoop-resourceestimator/src/test/resources/trace/invalidLog4.txt
deleted file mode 100644
index d787319cd1b..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/test/resources/trace/invalidLog4.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-// Test case 4: no containerId found in container allocation log
-252823:e,06/21/2017 16:10:13,yarn resourcemanager,DefaultTag,Pid="5156" Tid="39272" TS="0x01D2EAA8DD060D14" String1="17/06/21 16:10:13 INFO resourcemanager.RMAuditLogger: USER=hadoop  IP=25.163.46.150  OPERATION=Submit Application Request  TARGET=ClientRMService  RESULT=SUCCESS  APPID=application_4 CALLERCONTEXT=HIVE_QUERY_ID:ExoAdmin_20170621160339_7fed8f3c-3558-4abe-a0db-029eaa44d70e"
-252839:e,06/21/2017 16:10:13,yarn resourcemanager,DefaultTag,Pid="5156" Tid="39272" TS="0x01D2EAA8DD11F8F0" String1="17/06/21 16:10:13 INFO resourcemanager.RMAuditLogger: USER=hadoop  OPERATION=AM Allocated Container  TARGET=SchedulerApp RESULT=SUCCESS  APPID=application_4 CONTAINERIDs=container_e26_1497832133857_0330_01_000001"
-253100:e,06/21/2017 16:18:35,yarn resourcemanager,DefaultTag,Pid="5156" Tid="19824" TS="0x01D2EAAA089569FD" String1="17/06/21 16:18:35 INFO resourcemanager.RMAuditLogger: USER=hadoop  OPERATION=AM Released Container TARGET=SchedulerApp RESULT=SUCCESS  APPID=application_4 CONTAINERID=container_e26_1497832133857_0330_01_000001"
-253114:e,06/21/2017 16:18:35,yarn resourcemanager,DefaultTag,Pid="5156" Tid="19824" TS="0x01D2EAAA089569FD" String1="17/06/21 16:18:35 INFO resourcemanager.RMAppManager$ApplicationSummary: appId=application_4,name=Test-4,user=hadoop, queue=PROD,state=FINISHED,trackingUrl=http://BY1PR00OC0019.namprd00.prod.outlook.com:8088/proxy/1,appMasterHost=by2pr08mb1799.namprd08.prod.outlook.com,startTime=1498061413073,finishTime=1498061905698,finalStatus=SUCCEEDED,memorySeconds=1330655,vcoreSeconds=704,preemptedAMContainers=0,preemptedNonAMContainers=0,preemptedResources=<memory:0\, vCores:0>,applicationType=MAPREDUCE"
diff --git a/hadoop-tools/hadoop-resourceestimator/src/test/resources/trace/invalidLog5.txt b/hadoop-tools/hadoop-resourceestimator/src/test/resources/trace/invalidLog5.txt
deleted file mode 100644
index 2bafa674769..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/test/resources/trace/invalidLog5.txt
+++ /dev/null
@@ -1,7 +0,0 @@
-// Test case 5: jobId not found in app failure log
-252823:e,06/21/2017 16:10:13,yarn resourcemanager,DefaultTag,Pid="5156" Tid="39272" TS="0x01D2EAA8DD060D14" String1="17/06/21 16:10:13 INFO resourcemanager.RMAuditLogger: USER=hadoop  IP=25.163.46.150  OPERATION=Submit Application Request  TARGET=ClientRMService  RESULT=SUCCESS  APPID=application_5 CALLERCONTEXT=HIVE_QUERY_ID:ExoAdmin_20170621160339_7fed8f3c-3558-4abe-a0db-029eaa44d70e"
-252839:e,06/21/2017 16:10:13,yarn resourcemanager,DefaultTag,Pid="5156" Tid="39272" TS="0x01D2EAA8DD11F8F0" String1="17/06/21 16:10:13 INFO resourcemanager.RMAuditLogger: USER=hadoop  OPERATION=AM Allocated Container  TARGET=SchedulerApp RESULT=SUCCESS  APPID=application_5 CONTAINERID=container_e26_1497832133857_0330_01_000001"
-253100:e,06/21/2017 16:18:35,yarn resourcemanager,DefaultTag,Pid="5156" Tid="19824" TS="0x01D2EAAA089569FD" String1="17/06/21 16:18:35 INFO resourcemanager.RMAuditLogger: USER=hadoop  OPERATION=AM Released Container TARGET=SchedulerApp RESULT=SUCCESS  APPID=application_5 CONTAINERID=container_e26_1497832133857_0330_01_000001"
-e,06/20/2017 22:30:21,yarn resourcemanager,DefaultTag,Pid="5156" Tid="9896" TS="0x01D2EA14CDBCF8F1" String1="17/06/20 22:30:21 INFO capacity.CapacityScheduler: Application Attempt appattempt_5 is done. finalState=FAILED"
-252844:e,06/21/2017 16:10:13,yarn resourcemanager,DefaultTag,Pid="5156" Tid="39272" TS="0x01D2EAA8DD11F8F0" String1="17/06/21 16:10:13 INFO attempt.RMAppAttemptImpl: Storing attempt: AppId: application_5 AttemptId: appattempt_5_000001 MasterContainer: Container: [ContainerId: container_e26_1497832133857_0330_01_000001, NodeId: by2pr08mb1799.namprd08.prod.outlook.com:10131, NodeHttpAddress: by2pr08mb1799.namprd08.prod.outlook.com:8042, Resource: <memory:1800, vCores:1>, Priority: 0, Token: Token { kind: ContainerToken, service: by2pr08mb1799.namprd08.prod.outlook.com:10131 }, ]"
-253114:e,06/21/2017 16:18:35,yarn resourcemanager,DefaultTag,Pid="5156" Tid="19824" TS="0x01D2EAAA089569FD" String1="17/06/21 16:18:35 INFO resourcemanager.RMAppManager$ApplicationSummary: appId=application_5,name=Test-5,user=hadoop, queue=PROD,state=FINISHED,trackingUrl=http://BY1PR00OC0019.namprd00.prod.outlook.com:8088/proxy/1,appMasterHost=by2pr08mb1799.namprd08.prod.outlook.com,startTime=1498061413073,finishTime=1498061905698,finalStatus=SUCCEEDED,memorySeconds=1330655,vcoreSeconds=704,preemptedAMContainers=0,preemptedNonAMContainers=0,preemptedResources=<memory:0\, vCores:0>,applicationType=MAPREDUCE"
diff --git a/hadoop-tools/hadoop-resourceestimator/src/test/resources/trace/invalidLog6.txt b/hadoop-tools/hadoop-resourceestimator/src/test/resources/trace/invalidLog6.txt
deleted file mode 100644
index bcb5112510c..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/test/resources/trace/invalidLog6.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-// Test case 6: no jobId found in job finish log
-252823:e,06/21/2017 16:10:13,yarn resourcemanager,DefaultTag,Pid="5156" Tid="39272" TS="0x01D2EAA8DD060D14" String1="17/06/21 16:10:13 INFO resourcemanager.RMAuditLogger: USER=hadoop  IP=25.163.46.150  OPERATION=Submit Application Request  TARGET=ClientRMService  RESULT=SUCCESS  APPID=application_6 CALLERCONTEXT=HIVE_QUERY_ID:ExoAdmin_20170621160339_7fed8f3c-3558-4abe-a0db-029eaa44d70e"
-252839:e,06/21/2017 16:10:13,yarn resourcemanager,DefaultTag,Pid="5156" Tid="39272" TS="0x01D2EAA8DD11F8F0" String1="17/06/21 16:10:13 INFO resourcemanager.RMAuditLogger: USER=hadoop  OPERATION=AM Allocated Container  TARGET=SchedulerApp RESULT=SUCCESS  APPID=application_6 CONTAINERID=container_e26_1497832133857_0330_01_000001"
-253100:e,06/21/2017 16:18:35,yarn resourcemanager,DefaultTag,Pid="5156" Tid="19824" TS="0x01D2EAAA089569FD" String1="17/06/21 16:18:35 INFO resourcemanager.RMAuditLogger: USER=hadoop  OPERATION=AM Released Container TARGET=SchedulerApp RESULT=SUCCESS  APPID=application_6 CONTAINERID=container_e26_1497832133857_0330_01_000001"
-253114:e,06/21/2017 16:18:35,yarn resourcemanager,DefaultTag,Pid="5156" Tid="19824" TS="0x01D2EAAA089569FD" String1="17/06/21 16:18:35 INFO resourcemanager.RMAppManager$ApplicationSummary: appIds=application_6,name=Test-6,user=hadoop, queue=PROD,state=FINISHED,trackingUrl=http://BY1PR00OC0019.namprd00.prod.outlook.com:8088/proxy/1,appMasterHost=by2pr08mb1799.namprd08.prod.outlook.com,startTime=1498061413073,finishTime=1498061905698,finalStatus=SUCCEEDED,memorySeconds=1330655,vcoreSeconds=704,preemptedAMContainers=0,preemptedNonAMContainers=0,preemptedResources=<memory:0\, vCores:0>,applicationType=MAPREDUCE"
diff --git a/hadoop-tools/hadoop-resourceestimator/src/test/resources/trace/invalidLog7.txt b/hadoop-tools/hadoop-resourceestimator/src/test/resources/trace/invalidLog7.txt
deleted file mode 100644
index 46676be7e93..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/test/resources/trace/invalidLog7.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-// Test case 7: no recurrenceId found in job finish log
-252823:e,06/21/2017 16:10:13,yarn resourcemanager,DefaultTag,Pid="5156" Tid="39272" TS="0x01D2EAA8DD060D14" String1="17/06/21 16:10:13 INFO resourcemanager.RMAuditLogger: USER=hadoop  IP=25.163.46.150  OPERATION=Submit Application Request  TARGET=ClientRMService  RESULT=SUCCESS  APPID=application_7 CALLERCONTEXT=HIVE_QUERY_ID:ExoAdmin_20170621160339_7fed8f3c-3558-4abe-a0db-029eaa44d70e"
-252839:e,06/21/2017 16:10:13,yarn resourcemanager,DefaultTag,Pid="5156" Tid="39272" TS="0x01D2EAA8DD11F8F0" String1="17/06/21 16:10:13 INFO resourcemanager.RMAuditLogger: USER=hadoop  OPERATION=AM Allocated Container  TARGET=SchedulerApp RESULT=SUCCESS  APPID=application_7 CONTAINERID=container_e26_1497832133857_0330_01_000001"
-253100:e,06/21/2017 16:18:35,yarn resourcemanager,DefaultTag,Pid="5156" Tid="19824" TS="0x01D2EAAA089569FD" String1="17/06/21 16:18:35 INFO resourcemanager.RMAuditLogger: USER=hadoop  OPERATION=AM Released Container TARGET=SchedulerApp RESULT=SUCCESS  APPID=application_7 CONTAINERID=container_e26_1497832133857_0330_01_000001"
-253114:e,06/21/2017 16:18:35,yarn resourcemanager,DefaultTag,Pid="5156" Tid="19824" TS="0x01D2EAAA089569FD" String1="17/06/21 16:18:35 INFO resourcemanager.RMAppManager$ApplicationSummary: appId=application_7,name=Test:7,user=hadoop, queue=PROD,state=FINISHED,trackingUrl=http://BY1PR00OC0019.namprd00.prod.outlook.com:8088/proxy/1,appMasterHost=by2pr08mb1799.namprd08.prod.outlook.com,startTime=1498061413073,finishTime=1498061905698,finalStatus=SUCCEEDED,memorySeconds=1330655,vcoreSeconds=704,preemptedAMContainers=0,preemptedNonAMContainers=0,preemptedResources=<memory:0\, vCores:0>,applicationType=MAPREDUCE"
diff --git a/hadoop-tools/hadoop-resourceestimator/src/test/resources/trace/invalidLog8.txt b/hadoop-tools/hadoop-resourceestimator/src/test/resources/trace/invalidLog8.txt
deleted file mode 100644
index b8a8e204fce..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/test/resources/trace/invalidLog8.txt
+++ /dev/null
@@ -1,6 +0,0 @@
-// Test case 8: no jobId found in resource spec log
-252823:e,06/21/2017 16:10:13,yarn resourcemanager,DefaultTag,Pid="5156" Tid="39272" TS="0x01D2EAA8DD060D14" String1="17/06/21 16:10:13 INFO resourcemanager.RMAuditLogger: USER=hadoop  IP=25.163.46.150  OPERATION=Submit Application Request  TARGET=ClientRMService  RESULT=SUCCESS  APPID=application_8 CALLERCONTEXT=HIVE_QUERY_ID:ExoAdmin_20170621160339_7fed8f3c-3558-4abe-a0db-029eaa44d70e"
-252839:e,06/21/2017 16:10:13,yarn resourcemanager,DefaultTag,Pid="5156" Tid="39272" TS="0x01D2EAA8DD11F8F0" String1="17/06/21 16:10:13 INFO resourcemanager.RMAuditLogger: USER=hadoop  OPERATION=AM Allocated Container  TARGET=SchedulerApp RESULT=SUCCESS  APPID=application_8 CONTAINERID=container_e26_1497832133857_0330_01_000001"
-253100:e,06/21/2017 16:18:35,yarn resourcemanager,DefaultTag,Pid="5156" Tid="19824" TS="0x01D2EAAA089569FD" String1="17/06/21 16:18:35 INFO resourcemanager.RMAuditLogger: USER=hadoop  OPERATION=AM Released Container TARGET=SchedulerApp RESULT=SUCCESS  APPID=application_8 CONTAINERID=container_e26_1497832133857_0330_01_000001"
-252844:e,06/21/2017 16:10:13,yarn resourcemanager,DefaultTag,Pid="5156" Tid="39272" TS="0x01D2EAA8DD11F8F0" String1="17/06/21 16:10:13 INFO attempt.RMAppAttemptImpl: Storing attempt: AppId: application_8 AttemptIds: appattempt_8_000001 MasterContainer: Container: [ContainerId: container_e26_1497832133857_0330_01_000001, NodeId: by2pr08mb1799.namprd08.prod.outlook.com:10131, NodeHttpAddress: by2pr08mb1799.namprd08.prod.outlook.com:8042, Resource: <memory:1800, vCores:1>, Priority: 0, Token: Token { kind: ContainerToken, service: by2pr08mb1799.namprd08.prod.outlook.com:10131 }, ]"
-253114:e,06/21/2017 16:18:35,yarn resourcemanager,DefaultTag,Pid="5156" Tid="19824" TS="0x01D2EAAA089569FD" String1="17/06/21 16:18:35 INFO resourcemanager.RMAppManager$ApplicationSummary: appId=application_8,name=Test-8,user=hadoop, queue=PROD,state=FINISHED,trackingUrl=http://BY1PR00OC0019.namprd00.prod.outlook.com:8088/proxy/1,appMasterHost=by2pr08mb1799.namprd08.prod.outlook.com,startTime=1498061413073,finishTime=1498061905698,finalStatus=SUCCEEDED,memorySeconds=1330655,vcoreSeconds=704,preemptedAMContainers=0,preemptedNonAMContainers=0,preemptedResources=<memory:0\, vCores:0>,applicationType=MAPREDUCE"
diff --git a/hadoop-tools/hadoop-resourceestimator/src/test/resources/trace/invalidLog9.txt b/hadoop-tools/hadoop-resourceestimator/src/test/resources/trace/invalidLog9.txt
deleted file mode 100644
index 598f935bec2..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/test/resources/trace/invalidLog9.txt
+++ /dev/null
@@ -1,6 +0,0 @@
-// Test case 9: no resource spec found in resource spec log
-252823:e,06/21/2017 16:10:13,yarn resourcemanager,DefaultTag,Pid="5156" Tid="39272" TS="0x01D2EAA8DD060D14" String1="17/06/21 16:10:13 INFO resourcemanager.RMAuditLogger: USER=hadoop  IP=25.163.46.150  OPERATION=Submit Application Request  TARGET=ClientRMService  RESULT=SUCCESS  APPID=application_9 CALLERCONTEXT=HIVE_QUERY_ID:ExoAdmin_20170621160339_7fed8f3c-3558-4abe-a0db-029eaa44d70e"
-252839:e,06/21/2017 16:10:13,yarn resourcemanager,DefaultTag,Pid="5156" Tid="39272" TS="0x01D2EAA8DD11F8F0" String1="17/06/21 16:10:13 INFO resourcemanager.RMAuditLogger: USER=hadoop  OPERATION=AM Allocated Container  TARGET=SchedulerApp RESULT=SUCCESS  APPID=application_9 CONTAINERID=container_e26_1497832133857_0330_01_000001"
-253100:e,06/21/2017 16:18:35,yarn resourcemanager,DefaultTag,Pid="5156" Tid="19824" TS="0x01D2EAAA089569FD" String1="17/06/21 16:18:35 INFO resourcemanager.RMAuditLogger: USER=hadoop  OPERATION=AM Released Container TARGET=SchedulerApp RESULT=SUCCESS  APPID=application_9 CONTAINERID=container_e26_1497832133857_0330_01_000001"
-252844:e,06/21/2017 16:10:13,yarn resourcemanager,DefaultTag,Pid="5156" Tid="39272" TS="0x01D2EAA8DD11F8F0" String1="17/06/21 16:10:13 INFO attempt.RMAppAttemptImpl: Storing attempt: AppId: application_9 AttemptId: appattempt_9_000001 MasterContainer: Container: [ContainerId: container_e26_1497832133857_0330_01_000001, NodeId: by2pr08mb1799.namprd08.prod.outlook.com:10131, NodeHttpAddress: by2pr08mb1799.namprd08.prod.outlook.com:8042, Resource: <memory:1800, CPU:1>, Priority: 0, Token: Token { kind: ContainerToken, service: by2pr08mb1799.namprd08.prod.outlook.com:10131 }, ]"
-253114:e,06/21/2017 16:18:35,yarn resourcemanager,DefaultTag,Pid="5156" Tid="19824" TS="0x01D2EAAA089569FD" String1="17/06/21 16:18:35 INFO resourcemanager.RMAppManager$ApplicationSummary: appId=application_9,name=Test-9,user=hadoop, queue=PROD,state=FINISHED,trackingUrl=http://BY1PR00OC0019.namprd00.prod.outlook.com:8088/proxy/1,appMasterHost=by2pr08mb1799.namprd08.prod.outlook.com,startTime=1498061413073,finishTime=1498061905698,finalStatus=SUCCEEDED,memorySeconds=1330655,vcoreSeconds=704,preemptedAMContainers=0,preemptedNonAMContainers=0,preemptedResources=<memory:0\, vCores:0>,applicationType=MAPREDUCE"
diff --git a/hadoop-tools/hadoop-resourceestimator/src/test/resources/trace/nativeLog.txt b/hadoop-tools/hadoop-resourceestimator/src/test/resources/trace/nativeLog.txt
deleted file mode 100644
index fd03ea364b2..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/test/resources/trace/nativeLog.txt
+++ /dev/null
@@ -1 +0,0 @@
-tpch_q12 50 1462148517000 1462148527345 1462148952345 tpch_q12_0 8192:0| 1:0|1:5|1074:10|2538:15|2468:20|
\ No newline at end of file
diff --git a/hadoop-tools/hadoop-resourceestimator/src/test/resources/trace/rmLog.txt b/hadoop-tools/hadoop-resourceestimator/src/test/resources/trace/rmLog.txt
deleted file mode 100644
index 7532a73dfa3..00000000000
--- a/hadoop-tools/hadoop-resourceestimator/src/test/resources/trace/rmLog.txt
+++ /dev/null
@@ -1,30 +0,0 @@
-252823:e,06/21/2017 16:10:13,yarn resourcemanager,DefaultTag,Pid="5156" Tid="39272" TS="0x01D2EAA8DD060D14" String1="17/06/21 16:10:13 INFO resourcemanager.RMAuditLogger: USER=hadoop  IP=25.163.46.150  OPERATION=Submit Application Request  TARGET=ClientRMService  RESULT=SUCCESS  APPID=application_1497832133857_0330  CALLERCONTEXT=HIVE_QUERY_ID:ExoAdmin_20170621160339_7fed8f3c-3558-4abe-a0db-029eaa44d70e"
-252825:e,06/21/2017 16:10:13,yarn resourcemanager,DefaultTag,Pid="5156" Tid="39272" TS="0x01D2EAA8DD060D14" String1="17/06/21 16:10:13 INFO rmapp.RMAppImpl: Storing application with id application_1497832133857_0330"
-252826:e,06/21/2017 16:10:13,yarn resourcemanager,DefaultTag,Pid="5156" Tid="39272" TS="0x01D2EAA8DD060D14" String1="17/06/21 16:10:13 INFO rmapp.RMAppImpl: application_1497832133857_0330 State change from NEW to NEW_SAVING"
-252827:e,06/21/2017 16:10:13,yarn resourcemanager,DefaultTag,Pid="5156" Tid="39272" TS="0x01D2EAA8DD060D14" String1="17/06/21 16:10:13 INFO recovery.RMStateStore: Storing info for app: application_1497832133857_0330"
-252828:e,06/21/2017 16:10:13,yarn resourcemanager,DefaultTag,Pid="5156" Tid="39272" TS="0x01D2EAA8DD11F8F0" String1="17/06/21 16:10:13 INFO rmapp.RMAppImpl: application_1497832133857_0330 State change from NEW_SAVING to SUBMITTED"
-252829:e,06/21/2017 16:10:13,yarn resourcemanager,DefaultTag,Pid="5156" Tid="39272" TS="0x01D2EAA8DD11F8F0" String1="17/06/21 16:10:13 INFO capacity.ParentQueue: Application added - appId: application_1497832133857_0330 user: hadoop leaf-queue of parent: root #applications: 3"
-252830:e,06/21/2017 16:10:13,yarn resourcemanager,DefaultTag,Pid="5156" Tid="39272" TS="0x01D2EAA8DD11F8F0" String1="17/06/21 16:10:13 INFO capacity.CapacityScheduler: Accepted application application_1497832133857_0330 from user: hadoop, in queue: PROD"
-252831:e,06/21/2017 16:10:13,yarn resourcemanager,DefaultTag,Pid="5156" Tid="39272" TS="0x01D2EAA8DD11F8F0" String1="17/06/21 16:10:13 INFO rmapp.RMAppImpl: application_1497832133857_0330 State change from SUBMITTED to ACCEPTED"
-252834:e,06/21/2017 16:10:13,yarn resourcemanager,DefaultTag,Pid="5156" Tid="39272" TS="0x01D2EAA8DD11F8F0" String1="17/06/21 16:10:13 INFO capacity.LeafQueue: Application application_1497832133857_0330 from user: hadoop activated in queue: PROD"
-252835:e,06/21/2017 16:10:13,yarn resourcemanager,DefaultTag,Pid="5156" Tid="39272" TS="0x01D2EAA8DD11F8F0" String1="17/06/21 16:10:13 INFO capacity.LeafQueue: Application added - appId: application_1497832133857_0330 user: org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.LeafQueue$User@7e2d171f, leaf-queue: PROD #user-pending-applications: 0 #user-active-applications: 1 #queue-pending-applications: 0 #queue-active-applications: 1"
-252839:e,06/21/2017 16:10:13,yarn resourcemanager,DefaultTag,Pid="5156" Tid="39272" TS="0x01D2EAA8DD11F8F0" String1="17/06/21 16:10:13 INFO resourcemanager.RMAuditLogger: USER=hadoop  OPERATION=AM Allocated Container  TARGET=SchedulerApp RESULT=SUCCESS  APPID=application_1497832133857_0330  CONTAINERID=container_e26_1497832133857_0330_01_000001"
-252844:e,06/21/2017 16:10:13,yarn resourcemanager,DefaultTag,Pid="5156" Tid="39272" TS="0x01D2EAA8DD11F8F0" String1="17/06/21 16:10:13 INFO attempt.RMAppAttemptImpl: Storing attempt: AppId: application_1497832133857_0330 AttemptId: appattempt_1497832133857_0330_000001 MasterContainer: Container: [ContainerId: container_e26_1497832133857_0330_01_000001, NodeId: by2pr08mb1799.namprd08.prod.outlook.com:10131, NodeHttpAddress: by2pr08mb1799.namprd08.prod.outlook.com:8042, Resource: <memory:1800, vCores:1>, Priority: 0, Token: Token { kind: ContainerToken, service: by2pr08mb1799.namprd08.prod.outlook.com:10131 }, ]"
-252897:e,06/21/2017 16:12:34,yarn resourcemanager,DefaultTag,Pid="5156" Tid="41712" TS="0x01D2EAA931905154" String1="17/06/21 16:12:34 INFO resourcemanager.RMAuditLogger: USER=hadoop  IP=25.163.46.25 OPERATION=Register App Master TARGET=ApplicationMasterService RESULT=SUCCESS  APPID=application_1497832133857_0330  APPATTEMPTID=appattempt_1497832133857_0330_000001"
-252900:e,06/21/2017 16:12:34,yarn resourcemanager,DefaultTag,Pid="5156" Tid="41712" TS="0x01D2EAA931905154" String1="17/06/21 16:12:34 INFO rmapp.RMAppImpl: application_1497832133857_0330 State change from ACCEPTED to RUNNING"
-252906:e,06/21/2017 16:12:35,yarn resourcemanager,DefaultTag,Pid="5156" Tid="41712" TS="0x01D2EAA93234D4E8" String1="17/06/21 16:12:35 INFO resourcemanager.RMAuditLogger: USER=hadoop  OPERATION=AM Allocated Container  TARGET=SchedulerApp RESULT=SUCCESS  APPID=application_1497832133857_0330  CONTAINERID=container_e26_1497832133857_0330_01_000002"
-252910:e,06/21/2017 16:12:38,yarn resourcemanager,DefaultTag,Pid="5156" Tid="39272" TS="0x01D2EAA933A6643E" String1="17/06/21 16:12:38 INFO scheduler.AppSchedulingInfo: checking for deactivate of application :application_1497832133857_0330"
-253016:e,06/21/2017 16:15:58,yarn resourcemanager,DefaultTag,Pid="5156" Tid="39188" TS="0x01D2EAA9AB29C5EE" String1="17/06/21 16:15:58 INFO resourcemanager.RMAuditLogger: USER=hadoop  OPERATION=AM Released Container TARGET=SchedulerApp RESULT=SUCCESS  APPID=application_1497832133857_0330  CONTAINERID=container_e26_1497832133857_0330_01_000002"
-253086:e,06/21/2017 16:18:25,yarn resourcemanager,DefaultTag,Pid="5156" Tid="19824" TS="0x01D2EAAA02A6A418" String1="17/06/21 16:18:25 INFO rmapp.RMAppImpl: Updating application application_1497832133857_0330 with final state: FINISHING"
-253087:e,06/21/2017 16:18:25,yarn resourcemanager,DefaultTag,Pid="5156" Tid="19824" TS="0x01D2EAAA02A6A418" String1="17/06/21 16:18:25 INFO rmapp.RMAppImpl: application_1497832133857_0330 State change from RUNNING to FINAL_SAVING"
-253089:e,06/21/2017 16:18:25,yarn resourcemanager,DefaultTag,Pid="5156" Tid="19824" TS="0x01D2EAAA02B28FF0" String1="17/06/21 16:18:25 INFO recovery.RMStateStore: Updating info for app: application_1497832133857_0330"
-253090:e,06/21/2017 16:18:25,yarn resourcemanager,DefaultTag,Pid="5156" Tid="19824" TS="0x01D2EAAA02B28FF0" String1="17/06/21 16:18:25 INFO rmapp.RMAppImpl: application_1497832133857_0330 State change from FINAL_SAVING to FINISHING"
-253091:e,06/21/2017 16:18:26,yarn resourcemanager,DefaultTag,Pid="5156" Tid="19824" TS="0x01D2EAAA033F3BC8" String1="17/06/21 16:18:26 INFO resourcemanager.ApplicationMasterService: application_1497832133857_0330 unregistered successfully. "
-253100:e,06/21/2017 16:18:35,yarn resourcemanager,DefaultTag,Pid="5156" Tid="19824" TS="0x01D2EAAA089569FD" String1="17/06/21 16:18:35 INFO resourcemanager.RMAuditLogger: USER=hadoop  OPERATION=AM Released Container TARGET=SchedulerApp RESULT=SUCCESS  APPID=application_1497832133857_0330  CONTAINERID=container_e26_1497832133857_0330_01_000001"
-253105:e,06/21/2017 16:18:35,yarn resourcemanager,DefaultTag,Pid="5156" Tid="19824" TS="0x01D2EAAA089569FD" String1="17/06/21 16:18:35 INFO rmapp.RMAppImpl: application_1497832133857_0330 State change from FINISHING to FINISHED"
-253110:e,06/21/2017 16:18:35,yarn resourcemanager,DefaultTag,Pid="5156" Tid="19824" TS="0x01D2EAAA089569FD" String1="17/06/21 16:18:35 INFO scheduler.AppSchedulingInfo: Application application_1497832133857_0330 requests cleared"
-253111:e,06/21/2017 16:18:35,yarn resourcemanager,DefaultTag,Pid="5156" Tid="19824" TS="0x01D2EAAA089569FD" String1="17/06/21 16:18:35 INFO capacity.LeafQueue: Application removed - appId: application_1497832133857_0330 user: hadoop queue: PROD #user-pending-applications: 0 #user-active-applications: 0 #queue-pending-applications: 0 #queue-active-applications: 0"
-253112:e,06/21/2017 16:18:35,yarn resourcemanager,DefaultTag,Pid="5156" Tid="19824" TS="0x01D2EAAA089569FD" String1="17/06/21 16:18:35 INFO capacity.ParentQueue: Application removed - appId: application_1497832133857_0330 user: hadoop leaf-queue of parent: root #applications: 2"
-253113:e,06/21/2017 16:18:35,yarn resourcemanager,DefaultTag,Pid="5156" Tid="19824" TS="0x01D2EAAA089569FD" String1="17/06/21 16:18:35 INFO resourcemanager.RMAuditLogger: USER=hadoop  OPERATION=Application Finished - Succeeded  TARGET=RMAppManager RESULT=SUCCESS  APPID=application_1497832133857_0330"
-253114:e,06/21/2017 16:18:35,yarn resourcemanager,DefaultTag,Pid="5156" Tid="19824" TS="0x01D2EAAA089569FD" String1="17/06/21 16:18:35 INFO resourcemanager.RMAppManager$ApplicationSummary: appId=application_1497832133857_0330,name=FraudDetection-1,user=hadoop, queue=PROD,state=FINISHED,trackingUrl=http://BY1PR00OC0019.namprd00.prod.outlook.com:8088/proxy/application_1497832133857_0330/,appMasterHost=by2pr08mb1799.namprd08.prod.outlook.com,startTime=1498061413073,finishTime=1498061905698,finalStatus=SUCCEEDED,memorySeconds=1330655,vcoreSeconds=704,preemptedAMContainers=0,preemptedNonAMContainers=0,preemptedResources=<memory:0\, vCores:0>,applicationType=MAPREDUCE"
-e,06/20/2017 22:30:21,yarn resourcemanager,DefaultTag,Pid="5156" Tid="9896" TS="0x01D2EA14CDBCF8F1" String1="17/06/20 22:30:21 INFO capacity.CapacityScheduler: Application Attempt appattempt_1497832133857_0194_000001 is done. finalState=FAILED"
diff --git a/hadoop-tools/hadoop-tools-dist/pom.xml b/hadoop-tools/hadoop-tools-dist/pom.xml
index fe2dcb4ea6f..b07155fb74c 100644
--- a/hadoop-tools/hadoop-tools-dist/pom.xml
+++ b/hadoop-tools/hadoop-tools-dist/pom.xml
@@ -83,12 +83,6 @@
       <artifactId>hadoop-sls</artifactId>
       <scope>compile</scope>
     </dependency>
-    <dependency>
-        <groupId>org.apache.hadoop</groupId>
-        <artifactId>hadoop-resourceestimator</artifactId>
-        <version>${project.version}</version>
-        <scope>compile</scope>
-    </dependency>
     <dependency>
       <groupId>org.apache.hadoop</groupId>
       <artifactId>hadoop-azure-datalake</artifactId>
diff --git a/hadoop-tools/pom.xml b/hadoop-tools/pom.xml
index 0508c62b89b..54bdd157715 100644
--- a/hadoop-tools/pom.xml
+++ b/hadoop-tools/pom.xml
@@ -36,7 +36,6 @@
     <module>hadoop-rumen</module>
     <module>hadoop-tools-dist</module>
     <module>hadoop-sls</module>
-    <module>hadoop-resourceestimator</module>
     <module>hadoop-azure</module>
     <module>hadoop-aws</module>
     <module>hadoop-azure-datalake</module>
