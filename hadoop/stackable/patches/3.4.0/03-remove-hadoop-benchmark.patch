Entirely remove hadoop-benchmark

From: Lars Francke <git@lars-francke.de>


---
 hadoop-tools/hadoop-benchmark/pom.xml              |   87 -------
 .../hadoop-benchmark/src/main/assembly/uber.xml    |   33 ---
 .../hadoop-benchmark/src/main/findbugs/exclude.xml |   22 --
 .../hadoop/benchmark/VectoredReadBenchmark.java    |  245 --------------------
 .../org/apache/hadoop/benchmark/package-info.java  |   22 --
 hadoop-tools/pom.xml                               |    1 
 6 files changed, 410 deletions(-)
 delete mode 100644 hadoop-tools/hadoop-benchmark/pom.xml
 delete mode 100644 hadoop-tools/hadoop-benchmark/src/main/assembly/uber.xml
 delete mode 100644 hadoop-tools/hadoop-benchmark/src/main/findbugs/exclude.xml
 delete mode 100644 hadoop-tools/hadoop-benchmark/src/main/java/org/apache/hadoop/benchmark/VectoredReadBenchmark.java
 delete mode 100644 hadoop-tools/hadoop-benchmark/src/main/java/org/apache/hadoop/benchmark/package-info.java

diff --git a/hadoop-tools/hadoop-benchmark/pom.xml b/hadoop-tools/hadoop-benchmark/pom.xml
deleted file mode 100644
index e045a5a6e97..00000000000
--- a/hadoop-tools/hadoop-benchmark/pom.xml
+++ /dev/null
@@ -1,87 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--
-  Licensed under the Apache License, Version 2.0 (the "License");
-  you may not use this file except in compliance with the License.
-  You may obtain a copy of the License at
-
-  http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
-
-
--->
-<project xmlns="http://maven.apache.org/POM/4.0.0"
-         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
-                      https://maven.apache.org/xsd/maven-4.0.0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-  <parent>
-    <groupId>org.apache.hadoop</groupId>
-    <artifactId>hadoop-project</artifactId>
-    <version>3.4.0</version>
-    <relativePath>../../hadoop-project/pom.xml</relativePath>
-  </parent>
-  <artifactId>hadoop-benchmark</artifactId>
-  <version>3.4.0</version>
-  <packaging>jar</packaging>
-
-  <name>Apache Hadoop Common Benchmark</name>
-  <description>Apache Hadoop Common Benchmark</description>
-
-  <dependencies>
-    <dependency>
-      <groupId>org.apache.hadoop</groupId>
-      <artifactId>hadoop-common</artifactId>
-    </dependency>
-    <dependency>
-      <groupId>org.openjdk.jmh</groupId>
-      <artifactId>jmh-core</artifactId>
-    </dependency>
-    <dependency>
-      <groupId>org.openjdk.jmh</groupId>
-      <artifactId>jmh-generator-annprocess</artifactId>
-    </dependency>
-  </dependencies>
-
-  <build>
-    <plugins>
-      <plugin>
-        <artifactId>maven-assembly-plugin</artifactId>
-        <configuration>
-          <archive>
-            <manifest>
-              <mainClass>org.apache.hadoop.benchmark.VectoredReadBenchmark</mainClass>
-            </manifest>
-          </archive>
-          <descriptors>
-            <descriptor>src/main/assembly/uber.xml</descriptor>
-          </descriptors>
-        </configuration>
-        <executions>
-          <execution>
-            <id>make-assembly</id> <!-- this is used for inheritance merges -->
-            <phase>package</phase> <!-- bind to the packaging phase -->
-            <goals>
-              <goal>single</goal>
-            </goals>
-          </execution>
-        </executions>
-      </plugin>
-      <plugin>
-        <groupId>com.github.spotbugs</groupId>
-        <artifactId>spotbugs-maven-plugin</artifactId>
-        <configuration>
-          <excludeFilterFile>${basedir}/src/main/findbugs/exclude.xml</excludeFilterFile>
-        </configuration>
-      </plugin>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-compiler-plugin</artifactId>
-      </plugin>
-    </plugins>
-  </build>
-</project>
diff --git a/hadoop-tools/hadoop-benchmark/src/main/assembly/uber.xml b/hadoop-tools/hadoop-benchmark/src/main/assembly/uber.xml
deleted file mode 100644
index 014eab951b3..00000000000
--- a/hadoop-tools/hadoop-benchmark/src/main/assembly/uber.xml
+++ /dev/null
@@ -1,33 +0,0 @@
-<!--
-  Licensed under the Apache License, Version 2.0 (the "License");
-  you may not use this file except in compliance with the License.
-  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
--->
-<assembly>
-  <id>uber</id>
-  <formats>
-    <format>jar</format>
-  </formats>
-  <includeBaseDirectory>false</includeBaseDirectory>
-  <dependencySets>
-    <dependencySet>
-      <outputDirectory>/</outputDirectory>
-      <useProjectArtifact>true</useProjectArtifact>
-      <unpack>true</unpack>
-      <scope>runtime</scope>
-    </dependencySet>
-  </dependencySets>
-  <containerDescriptorHandlers>
-    <containerDescriptorHandler>
-      <handlerName>metaInf-services</handlerName>
-    </containerDescriptorHandler>
-  </containerDescriptorHandlers>
-</assembly>
diff --git a/hadoop-tools/hadoop-benchmark/src/main/findbugs/exclude.xml b/hadoop-tools/hadoop-benchmark/src/main/findbugs/exclude.xml
deleted file mode 100644
index 05f2a067cf0..00000000000
--- a/hadoop-tools/hadoop-benchmark/src/main/findbugs/exclude.xml
+++ /dev/null
@@ -1,22 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--
-  Licensed under the Apache License, Version 2.0 (the "License");
-  you may not use this file except in compliance with the License.
-  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
--->
-<FindBugsFilter>
-  <Match>
-    <Class name="~org\.apache\.hadoop\.benchmark\.generated.*"/>
-  </Match>
-  <Match>
-    <Class name="~org\.openjdk\.jmh\.infra\.generated.*"/>
-  </Match>
-</FindBugsFilter>
diff --git a/hadoop-tools/hadoop-benchmark/src/main/java/org/apache/hadoop/benchmark/VectoredReadBenchmark.java b/hadoop-tools/hadoop-benchmark/src/main/java/org/apache/hadoop/benchmark/VectoredReadBenchmark.java
deleted file mode 100644
index 5df46c36786..00000000000
--- a/hadoop-tools/hadoop-benchmark/src/main/java/org/apache/hadoop/benchmark/VectoredReadBenchmark.java
+++ /dev/null
@@ -1,245 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.hadoop.benchmark;
-
-import org.openjdk.jmh.annotations.Benchmark;
-import org.openjdk.jmh.annotations.BenchmarkMode;
-import org.openjdk.jmh.annotations.Level;
-import org.openjdk.jmh.annotations.Mode;
-import org.openjdk.jmh.annotations.OutputTimeUnit;
-import org.openjdk.jmh.annotations.Param;
-import org.openjdk.jmh.annotations.Scope;
-import org.openjdk.jmh.annotations.Setup;
-import org.openjdk.jmh.annotations.State;
-import org.openjdk.jmh.infra.Blackhole;
-import org.openjdk.jmh.runner.Runner;
-import org.openjdk.jmh.runner.options.OptionsBuilder;
-
-import java.io.EOFException;
-import java.io.IOException;
-import java.nio.ByteBuffer;
-import java.nio.channels.AsynchronousFileChannel;
-import java.nio.channels.CompletionHandler;
-import java.nio.file.FileSystems;
-import java.nio.file.StandardOpenOption;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.concurrent.TimeUnit;
-import java.util.function.IntFunction;
-
-import org.apache.hadoop.fs.FSDataInputStream;
-import org.apache.hadoop.fs.LocalFileSystem;
-import org.apache.hadoop.conf.Configuration;
-import org.apache.hadoop.fs.FileRange;
-import org.apache.hadoop.fs.impl.FileRangeImpl;
-import org.apache.hadoop.fs.FileSystem;
-import org.apache.hadoop.fs.Path;
-
-@BenchmarkMode(Mode.AverageTime)
-@OutputTimeUnit(TimeUnit.MICROSECONDS)
-public class VectoredReadBenchmark {
-
-  static final Path DATA_PATH = getTestDataPath();
-  static final String DATA_PATH_PROPERTY = "bench.data";
-  static final int READ_SIZE = 64 * 1024;
-  static final long SEEK_SIZE = 1024L * 1024;
-
-
-  static Path getTestDataPath() {
-    String value = System.getProperty(DATA_PATH_PROPERTY);
-    return new Path(value == null ? "/tmp/taxi.orc" : value);
-  }
-
-  @State(Scope.Thread)
-  public static class FileSystemChoice {
-
-    @Param({"local", "raw"})
-    private String fileSystemKind;
-
-    private Configuration conf;
-    private FileSystem fs;
-
-    @Setup(Level.Trial)
-    public void setup() {
-      conf = new Configuration();
-      try {
-        LocalFileSystem local = FileSystem.getLocal(conf);
-        fs = "raw".equals(fileSystemKind) ? local.getRaw() : local;
-      } catch (IOException e) {
-        throw new IllegalArgumentException("Can't get filesystem", e);
-      }
-    }
-  }
-
-  @State(Scope.Thread)
-  public static class BufferChoice {
-    @Param({"direct", "array"})
-    private String bufferKind;
-
-    private IntFunction<ByteBuffer> allocate;
-    @Setup(Level.Trial)
-    public void setup() {
-      allocate = "array".equals(bufferKind)
-                     ? ByteBuffer::allocate : ByteBuffer::allocateDirect;
-    }
-  }
-
-  @Benchmark
-  public void asyncRead(FileSystemChoice fsChoice,
-                        BufferChoice bufferChoice,
-                        Blackhole blackhole) throws Exception {
-    FSDataInputStream stream = fsChoice.fs.open(DATA_PATH);
-    List<FileRange> ranges = new ArrayList<>();
-    for(int m=0; m < 100; ++m) {
-      FileRange range = FileRange.createFileRange(m * SEEK_SIZE, READ_SIZE);
-      ranges.add(range);
-    }
-    stream.readVectored(ranges, bufferChoice.allocate);
-    for(FileRange range: ranges) {
-      blackhole.consume(range.getData().get());
-    }
-    stream.close();
-  }
-
-  static class Joiner implements CompletionHandler<ByteBuffer, FileRange> {
-    private int remaining;
-    private final ByteBuffer[] result;
-    private Throwable exception = null;
-
-    Joiner(int total) {
-      remaining = total;
-      result = new ByteBuffer[total];
-    }
-
-    synchronized void finish() {
-      remaining -= 1;
-      if (remaining == 0) {
-        notify();
-      }
-    }
-
-    synchronized ByteBuffer[] join() throws InterruptedException, IOException {
-      while (remaining > 0 && exception == null) {
-        wait();
-      }
-      if (exception != null) {
-        throw new IOException("problem reading", exception);
-      }
-      return result;
-    }
-
-
-    @Override
-    public synchronized void completed(ByteBuffer buffer, FileRange attachment) {
-      result[--remaining] = buffer;
-      if (remaining == 0) {
-        notify();
-      }
-    }
-
-    @Override
-    public synchronized void failed(Throwable exc, FileRange attachment) {
-      this.exception = exc;
-      notify();
-    }
-  }
-
-  static class FileRangeCallback extends FileRangeImpl implements
-          CompletionHandler<Integer, FileRangeCallback> {
-    private final AsynchronousFileChannel channel;
-    private final ByteBuffer buffer;
-    private int completed = 0;
-    private final Joiner joiner;
-
-    FileRangeCallback(AsynchronousFileChannel channel, long offset,
-                      int length, Joiner joiner, ByteBuffer buffer) {
-      super(offset, length, null);
-      this.channel = channel;
-      this.joiner = joiner;
-      this.buffer = buffer;
-    }
-
-    @Override
-    public void completed(Integer result, FileRangeCallback attachment) {
-      final int bytes = result;
-      if (bytes == -1) {
-        failed(new EOFException("Read past end of file"), this);
-      }
-      completed += bytes;
-      if (completed < this.getLength()) {
-        channel.read(buffer, this.getOffset() + completed, this, this);
-      } else {
-        buffer.flip();
-        joiner.finish();
-      }
-    }
-
-    @Override
-    public void failed(Throwable exc, FileRangeCallback attachment) {
-      joiner.failed(exc, this);
-    }
-  }
-
-  @Benchmark
-  public void asyncFileChanArray(BufferChoice bufferChoice,
-                                 Blackhole blackhole) throws Exception {
-    java.nio.file.Path path = FileSystems.getDefault().getPath(DATA_PATH.toString());
-    AsynchronousFileChannel channel = AsynchronousFileChannel.open(path, StandardOpenOption.READ);
-    List<FileRangeImpl> ranges = new ArrayList<>();
-    Joiner joiner = new Joiner(100);
-    for(int m=0; m < 100; ++m) {
-      ByteBuffer buffer = bufferChoice.allocate.apply(READ_SIZE);
-      FileRangeCallback range = new FileRangeCallback(channel, m * SEEK_SIZE,
-          READ_SIZE, joiner, buffer);
-      ranges.add(range);
-      channel.read(buffer, range.getOffset(), range, range);
-    }
-    joiner.join();
-    channel.close();
-    blackhole.consume(ranges);
-  }
-
-  @Benchmark
-  public void syncRead(FileSystemChoice fsChoice,
-                       Blackhole blackhole) throws Exception {
-    FSDataInputStream stream = fsChoice.fs.open(DATA_PATH);
-    List<byte[]> result = new ArrayList<>();
-    for(int m=0; m < 100; ++m) {
-      byte[] buffer = new byte[READ_SIZE];
-      stream.readFully(m * SEEK_SIZE, buffer);
-      result.add(buffer);
-    }
-    blackhole.consume(result);
-    stream.close();
-  }
-
-  /**
-   * Run the benchmarks.
-   * @param args the pathname of a 100MB data file
-   * @throws Exception any ex.
-   */
-  public static void main(String[] args) throws Exception {
-    OptionsBuilder opts = new OptionsBuilder();
-    opts.include("VectoredReadBenchmark");
-    opts.jvmArgs("-server", "-Xms256m", "-Xmx2g",
-        "-D" + DATA_PATH_PROPERTY + "=" + args[0]);
-    opts.forks(1);
-    new Runner(opts.build()).run();
-  }
-}
diff --git a/hadoop-tools/hadoop-benchmark/src/main/java/org/apache/hadoop/benchmark/package-info.java b/hadoop-tools/hadoop-benchmark/src/main/java/org/apache/hadoop/benchmark/package-info.java
deleted file mode 100644
index 95d6977e3ab..00000000000
--- a/hadoop-tools/hadoop-benchmark/src/main/java/org/apache/hadoop/benchmark/package-info.java
+++ /dev/null
@@ -1,22 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * Benchmark for Vectored Read IO operations.
- */
-package org.apache.hadoop.benchmark;
diff --git a/hadoop-tools/pom.xml b/hadoop-tools/pom.xml
index 5ed1976b8a9..f3556a81351 100644
--- a/hadoop-tools/pom.xml
+++ b/hadoop-tools/pom.xml
@@ -49,7 +49,6 @@
     <module>hadoop-azure-datalake</module>
     <module>hadoop-aliyun</module>
     <module>hadoop-fs2img</module>
-    <module>hadoop-benchmark</module>
   </modules>
 
   <build>
