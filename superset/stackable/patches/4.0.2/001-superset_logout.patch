diff --git a/superset/security/CustomKeycloakSecurityManager.py b/superset/security/CustomKeycloakSecurityManager.py
new file mode 100644
index 0000000000..6596f386f8
--- /dev/null
+++ b/superset/security/CustomKeycloakSecurityManager.py
@@ -0,0 +1,119 @@
+# This was mainly taken from documentation https://superset.apache.org/docs/configuration/configuring-superset/#keycloak-specific-configuration-using-flask-oidc
+# Some improvements have been done e.g. breaking change in Keycloak 18 and greater
+# Using this, requires to have a configuration file within a secret or configMap, being mounted into the superset pod ( e.g. configMap )
+
+'''
+---
+apiVersion: v1
+kind: ConfigMap
+metadata:
+  name: oidc-config
+data:
+  client_config.json: |
+    {
+      "keycloak": {
+          "issuer": "https://<myKeycloakDomain>/realms/<myRealm>,
+          "auth_uri": "https://<myKeycloakDomain>/realms/<myRealm>/protocol/openid-connect/auth",
+          "client_id": "<CLIENT_ID>",
+          "client_secret": "<CLIENT_SECRET>",
+          "redirect_uris": [
+              "https://<SupersetWebserver>/oauth-authorized/<myOpenIDProvider>"
+      ],
+          "userinfo_uri": "https://<myKeycloakDomain>/realms/<myRealm>/protocol/openid-connect/userinfo",
+          "token_uri": "https://<myKeycloakDomain>/realms/<myRealm>/protocol/openid-connect/token",
+          "token_introspection_uri": "https://<myKeycloakDomain>/realms/<myRealm>/protocol/openid-connect/token/introspect"
+      }
+    }
+'''
+
+# This ConfigMap needs to be mounted into pod like follows
+
+'''
+    podOverrides:
+      spec:
+        containers:
+          - name: superset
+            volumeMounts:
+              - mountPath: /stackable/oidc
+                name: oidc-config
+        volumes:
+          - name: oidc-config
+            configMap:
+              name: oidc-config
+'''
+
+# To use this custom security manager you need to set some values in configOverrides in superset_config.py as follows:
+
+'''
+configOverrides:
+      superset_config.py:
+        AUTH_TYPE: "AUTH_OID"
+        SECRET_KEY: '"<SECRET_KEY>"'
+        OIDC_CLIENT_SECRETS: '"oidc/client_config.json"'
+        OIDC_ID_TOKEN_COOKIE_SECURE: '"false"'
+        OIDC_OPENID_REALM: '"<My-REALM>"'
+        OIDC_INTROSPECTION_AUTH_METHOD: '"client_secret_post"'
+        CUSTOM_SECURITY_MANAGER: "OIDCSecurityManager"
+        AUTH_USER_REGISTRATION: 'true'
+'''
+from flask_appbuilder.security.manager import AUTH_OID
+from superset.security import SupersetSecurityManager
+from flask_oidc import OpenIDConnect
+from flask_appbuilder.security.views import AuthOIDView
+from flask_login import login_user
+from urllib.parse import quote
+from flask_appbuilder.views import expose
+from flask import (
+    redirect,
+    request,
+    session
+)
+import logging
+class OIDCSecurityManager(SupersetSecurityManager):
+
+    def __init__(self, appbuilder):
+        super(OIDCSecurityManager, self).__init__(appbuilder)
+        if self.auth_type == AUTH_OID:
+            self.oid = OpenIDConnect(self.appbuilder.get_app)
+        self.authoidview = AuthOIDCView
+
+class AuthOIDCView(AuthOIDView):
+
+    @expose('/login/', methods=['GET', 'POST'])
+    def login(self, flag=True):
+        sm = self.appbuilder.sm
+        oidc = sm.oid
+
+        @self.appbuilder.sm.oid.require_login
+        def handle_login():
+            user = sm.auth_user_oid(oidc.user_getfield('email'))
+
+            if user is None:
+                info = oidc.user_getinfo(['preferred_username', 'given_name', 'family_name', 'email'])
+                user = sm.add_user(info.get('preferred_username'), info.get('given_name'), info.get('family_name'),
+                                   info.get('email'), sm.find_role('Gamma'))
+
+            login_user(user, remember=False)
+
+            logging.info(f'Logged in {user}')
+
+            return redirect(self.appbuilder.get_url_for_index)
+
+        return handle_login()
+
+    @expose('/logout/', methods=['GET', 'POST'])
+    def logout(self):
+        oidc = self.appbuilder.sm.oid
+
+        oidc.logout()
+        super(AuthOIDCView, self).logout()
+        redirect_url = request.url_root + "logout"
+
+        # Providing information about which user has been logged out
+        sm = self.appbuilder.sm 
+        user = sm.auth_user_oid(oidc.user_getfield('email'))
+        logging.info(f'logged out {user} successfully')
+
+        return redirect(
+            # This works with Keycloak > 18 as there was a breaking change in `redirect_uri`
+            oidc.client_secrets.get('issuer') + '/protocol/openid-connect/logout?post_logout_redirect_uri=' + quote(redirect_url) + '&id_token_hint=' + session.get('oidc_auth_token').get('id_token') )
